/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.habilidades;

import algoritmos.batalhas.AlgoritmoPrincipal;
import algoritmos.habilidades.AlgoritmoPrincipalHabilidades;
import algoritmos.habilidades.CalculadoraHabilidades;
import ficha_personagem.Armas;
import ficha_personagem.Ficha;
import ficha_personagem.Habilidades;
import ficha_personagem.LvlBonus;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author 422UR4H
 */
public class ViewPrincipalHabilidades extends javax.swing.JFrame {

    /**
     * Creates new form ViewPrincipalHabilidades
     * @throws java.io.IOException
     * @throws java.io.FileNotFoundException
     * @throws java.lang.ClassNotFoundException
     */
    public ViewPrincipalHabilidades() throws IOException, FileNotFoundException, ClassNotFoundException {
        initComponents();
        
        
        // meu codigo
        
        // desabilitando campos
        desabilitarCampos();
        
        // inicializando algoritmo principal
        AlgoritmoPrincipalHabilidades.init();
        CalculadoraHabilidades.init();
        
        // fim do meu codigo
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        auraBonus = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldNome = new javax.swing.JTextField();
        jButtonNome = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jComboBoxHabilidades = new javax.swing.JComboBox<>();
        jButtonComecar = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jTextFieldNomeHabilidade = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jTextFieldDano = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldVol = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jCheckBoxRestricao = new javax.swing.JCheckBox();
        jTextFieldRestricao = new javax.swing.JTextField();
        jCheckBoxTipoEms = new javax.swing.JCheckBox();
        jTextFieldQtd = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldLvl = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jTextFieldAcerto = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jCheckBoxFor = new javax.swing.JCheckBox();
        jTextFieldFor = new javax.swing.JTextField();
        jTextFieldCon = new javax.swing.JTextField();
        jCheckBoxCon = new javax.swing.JCheckBox();
        jTextFieldDex = new javax.swing.JTextField();
        jCheckBoxDex = new javax.swing.JCheckBox();
        jTextFieldInt = new javax.swing.JTextField();
        jCheckBoxInt = new javax.swing.JCheckBox();
        jTextFieldCar = new javax.swing.JTextField();
        jCheckBoxCar = new javax.swing.JCheckBox();
        jTextFieldMen = new javax.swing.JTextField();
        jCheckBoxMen = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jTextFieldRef = new javax.swing.JTextField();
        jCheckBoxRef = new javax.swing.JCheckBox();
        jCheckBoxEsp = new javax.swing.JCheckBox();
        jTextFieldEsp = new javax.swing.JTextField();
        jCheckBoxTrs = new javax.swing.JCheckBox();
        jTextFieldTrs = new javax.swing.JTextField();
        jCheckBoxMat = new javax.swing.JCheckBox();
        jTextFieldMat = new javax.swing.JTextField();
        jCheckBoxMan = new javax.swing.JCheckBox();
        jTextFieldMan = new javax.swing.JTextField();
        jCheckBoxEms = new javax.swing.JCheckBox();
        jTextFieldEms = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jComboBoxArmas = new javax.swing.JComboBox<>();
        jCheckBoxPerfurante = new javax.swing.JCheckBox();
        jPanel7 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jComboBoxPro = new javax.swing.JComboBox<>();
        jLabel28 = new javax.swing.JLabel();
        jLabelDanoPro = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jCheckBoxEsq = new javax.swing.JCheckBox();
        jTextFieldEsq = new javax.swing.JTextField();
        jTextFieldVel = new javax.swing.JTextField();
        jCheckBoxVel = new javax.swing.JCheckBox();
        jTextFieldTen = new javax.swing.JTextField();
        jCheckBoxTen = new javax.swing.JCheckBox();
        jTextFieldAop = new javax.swing.JTextField();
        jCheckBoxAop = new javax.swing.JCheckBox();
        jTextFieldMop = new javax.swing.JTextField();
        jCheckBoxMop = new javax.swing.JCheckBox();
        jTextFieldCdn = new javax.swing.JTextField();
        jCheckBoxCdn = new javax.swing.JCheckBox();
        jPanel9 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jButtonSalvar = new javax.swing.JButton();
        jLabelDanoFinal = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jRadioButtonMat = new javax.swing.JRadioButton();
        jRadioButtonMan = new javax.swing.JRadioButton();
        jLabel18 = new javax.swing.JLabel();
        jRadioButtonNenhum = new javax.swing.JRadioButton();
        jTextFieldAuraBonus = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel11 = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabelPerf = new javax.swing.JLabel();
        jLabelDado = new javax.swing.JLabel();
        jLabelDanoArma = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabelCrit = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jComboBoxElementos = new javax.swing.JComboBox<>();
        jComboBoxNivelElemental = new javax.swing.JComboBox<>();
        jPanel14 = new javax.swing.JPanel();
        jLabel27 = new javax.swing.JLabel();
        jCheckBoxAtkPad = new javax.swing.JCheckBox();
        jCheckBoxDefPad = new javax.swing.JCheckBox();
        jPanel15 = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        jTextFieldRyu = new javax.swing.JTextField();
        jCheckBoxGastaRyu = new javax.swing.JCheckBox();
        jCheckBoxDanoRebote = new javax.swing.JCheckBox();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel13 = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabelElemento = new javax.swing.JLabel();
        jLabelDadoElemento = new javax.swing.JLabel();
        jLabelDanoElemental = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("GxG Editor de Habilidades");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));

        jPanel2.setBackground(new java.awt.Color(102, 102, 102));

        jLabel1.setBackground(new java.awt.Color(102, 102, 102));
        jLabel1.setText("In√≠cio");

        jLabel2.setBackground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("Nome: ");

        jTextFieldNome.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldNome.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldNome.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldNome.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldNome.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldNome.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldNomeFocusGained(evt);
            }
        });
        jTextFieldNome.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldNomeKeyPressed(evt);
            }
        });

        jButtonNome.setBackground(new java.awt.Color(102, 102, 102));
        jButtonNome.setText("OK");
        jButtonNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNomeActionPerformed(evt);
            }
        });

        jLabel3.setBackground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("Habilidades: ");

        jComboBoxHabilidades.setBackground(new java.awt.Color(102, 102, 102));
        jComboBoxHabilidades.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NOVA" }));
        jComboBoxHabilidades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxHabilidadesActionPerformed(evt);
            }
        });

        jButtonComecar.setBackground(new java.awt.Color(102, 102, 102));
        jButtonComecar.setText("Come√ßar");
        jButtonComecar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonComecarActionPerformed(evt);
            }
        });

        jLabel16.setBackground(new java.awt.Color(102, 102, 102));
        jLabel16.setText("Nome: ");

        jTextFieldNomeHabilidade.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldNomeHabilidade.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldNomeHabilidade.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldNomeHabilidade.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldNomeHabilidade.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldNomeHabilidade.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldNomeHabilidadeFocusGained(evt);
            }
        });
        jTextFieldNomeHabilidade.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldNomeHabilidadeKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBoxHabilidades, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonComecar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jTextFieldNome, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonNome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldNomeHabilidade, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonNome))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxHabilidades, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldNomeHabilidade)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonComecar)
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(102, 102, 102));

        jLabel4.setBackground(new java.awt.Color(102, 102, 102));
        jLabel4.setText("Dano Fixo: ");
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel4MouseEntered(evt);
            }
        });

        jTextFieldDano.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldDano.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldDano.setText("0");
        jTextFieldDano.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldDano.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldDano.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldDano.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldDanoFocusGained(evt);
            }
        });
        jTextFieldDano.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jTextFieldDanoMouseEntered(evt);
            }
        });

        jLabel5.setBackground(new java.awt.Color(102, 102, 102));
        jLabel5.setText("Volume: ");

        jTextFieldVol.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldVol.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldVol.setText("3");
        jTextFieldVol.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldVol.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldVol.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldVol.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldVolFocusGained(evt);
            }
        });

        jLabel6.setBackground(new java.awt.Color(102, 102, 102));
        jLabel6.setText("Quantidade: ");

        jCheckBoxRestricao.setBackground(new java.awt.Color(102, 102, 102));
        jCheckBoxRestricao.setText("Restri√ß√£o: ");
        jCheckBoxRestricao.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxRestricaoItemStateChanged(evt);
            }
        });

        jTextFieldRestricao.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldRestricao.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldRestricao.setText("1.0");
        jTextFieldRestricao.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldRestricao.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldRestricao.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldRestricao.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldRestricaoFocusGained(evt);
            }
        });

        jCheckBoxTipoEms.setBackground(new java.awt.Color(102, 102, 102));
        jCheckBoxTipoEms.setText("Transforma√ß√£o");
        jCheckBoxTipoEms.setEnabled(false);

        jTextFieldQtd.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldQtd.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldQtd.setText("1");
        jTextFieldQtd.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldQtd.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldQtd.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldQtd.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldQtdFocusGained(evt);
            }
        });

        jLabel19.setBackground(new java.awt.Color(102, 102, 102));
        jLabel19.setText("Dados Iniciais");

        jLabel7.setBackground(new java.awt.Color(102, 102, 102));
        jLabel7.setText("Lvl Habilidade: ");

        jTextFieldLvl.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldLvl.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldLvl.setText("5");
        jTextFieldLvl.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldLvl.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldLvl.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldLvl.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldLvlFocusGained(evt);
            }
        });

        jLabel15.setBackground(new java.awt.Color(102, 102, 102));
        jLabel15.setText("Acerto Fixo: ");
        jLabel15.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel15MouseEntered(evt);
            }
        });

        jTextFieldAcerto.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldAcerto.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldAcerto.setText("0");
        jTextFieldAcerto.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldAcerto.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldAcerto.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldAcerto.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldAcertoFocusGained(evt);
            }
        });
        jTextFieldAcerto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jTextFieldAcertoMouseEntered(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                .addComponent(jCheckBoxRestricao)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldRestricao, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jCheckBoxTipoEms, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(2, 2, 2)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldQtd, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldVol, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(2, 2, 2)
                        .addComponent(jTextFieldDano, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(2, 2, 2)
                        .addComponent(jTextFieldLvl, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(2, 2, 2)
                        .addComponent(jTextFieldAcerto, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel19)
                .addGap(8, 8, 8)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldLvl, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldDano, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldAcerto, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldVol, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldQtd, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxRestricao, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jTextFieldRestricao, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(5, 5, 5)
                .addComponent(jCheckBoxTipoEms, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBackground(new java.awt.Color(102, 102, 102));

        jLabel8.setBackground(new java.awt.Color(102, 102, 102));
        jLabel8.setText("Per√≠cias");

        jCheckBoxFor.setBackground(new java.awt.Color(102, 102, 102));
        jCheckBoxFor.setText("For ");
        jCheckBoxFor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxForItemStateChanged(evt);
            }
        });

        jTextFieldFor.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldFor.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldFor.setText("0");
        jTextFieldFor.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldFor.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldFor.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldFor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldForFocusGained(evt);
            }
        });

        jTextFieldCon.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldCon.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldCon.setText("0");
        jTextFieldCon.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldCon.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldCon.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldCon.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldConFocusGained(evt);
            }
        });

        jCheckBoxCon.setBackground(new java.awt.Color(102, 102, 102));
        jCheckBoxCon.setText("Con ");
        jCheckBoxCon.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxConItemStateChanged(evt);
            }
        });

        jTextFieldDex.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldDex.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldDex.setText("0");
        jTextFieldDex.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldDex.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldDex.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldDex.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldDexFocusGained(evt);
            }
        });

        jCheckBoxDex.setBackground(new java.awt.Color(102, 102, 102));
        jCheckBoxDex.setText("Dex ");
        jCheckBoxDex.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxDexItemStateChanged(evt);
            }
        });

        jTextFieldInt.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldInt.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldInt.setText("0");
        jTextFieldInt.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldInt.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldInt.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldInt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldIntFocusGained(evt);
            }
        });

        jCheckBoxInt.setBackground(new java.awt.Color(102, 102, 102));
        jCheckBoxInt.setText("Int ");
        jCheckBoxInt.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxIntItemStateChanged(evt);
            }
        });

        jTextFieldCar.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldCar.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldCar.setText("0");
        jTextFieldCar.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldCar.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldCar.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldCar.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldCarFocusGained(evt);
            }
        });

        jCheckBoxCar.setBackground(new java.awt.Color(102, 102, 102));
        jCheckBoxCar.setText("Car ");
        jCheckBoxCar.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxCarItemStateChanged(evt);
            }
        });

        jTextFieldMen.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldMen.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldMen.setText("0");
        jTextFieldMen.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldMen.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldMen.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldMen.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldMenFocusGained(evt);
            }
        });

        jCheckBoxMen.setBackground(new java.awt.Color(102, 102, 102));
        jCheckBoxMen.setText("Men ");
        jCheckBoxMen.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxMenItemStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jCheckBoxFor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxCon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxDex, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxInt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxCar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxMen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextFieldMen, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTextFieldCar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jTextFieldInt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jTextFieldDex, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jTextFieldCon, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jTextFieldFor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxFor)
                    .addComponent(jTextFieldFor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxCon)
                    .addComponent(jTextFieldCon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxDex)
                    .addComponent(jTextFieldDex, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxInt)
                    .addComponent(jTextFieldInt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxCar)
                    .addComponent(jTextFieldCar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxMen)
                    .addComponent(jTextFieldMen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBackground(new java.awt.Color(102, 102, 102));

        jLabel9.setBackground(new java.awt.Color(102, 102, 102));
        jLabel9.setText("Atributos Nen");

        jTextFieldRef.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldRef.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldRef.setText("0");
        jTextFieldRef.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldRef.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldRef.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldRef.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldRefFocusGained(evt);
            }
        });

        jCheckBoxRef.setBackground(new java.awt.Color(102, 102, 102));
        jCheckBoxRef.setText("Ref ");
        jCheckBoxRef.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxRefItemStateChanged(evt);
            }
        });

        jCheckBoxEsp.setBackground(new java.awt.Color(102, 102, 102));
        jCheckBoxEsp.setText("Esp ");
        jCheckBoxEsp.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxEspItemStateChanged(evt);
            }
        });

        jTextFieldEsp.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldEsp.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldEsp.setText("0");
        jTextFieldEsp.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldEsp.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldEsp.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldEsp.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldEspFocusGained(evt);
            }
        });

        jCheckBoxTrs.setBackground(new java.awt.Color(102, 102, 102));
        jCheckBoxTrs.setText("Trs ");
        jCheckBoxTrs.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxTrsItemStateChanged(evt);
            }
        });

        jTextFieldTrs.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldTrs.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldTrs.setText("0");
        jTextFieldTrs.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldTrs.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldTrs.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldTrs.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldTrsFocusGained(evt);
            }
        });

        jCheckBoxMat.setBackground(new java.awt.Color(102, 102, 102));
        jCheckBoxMat.setText("Mat ");
        jCheckBoxMat.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxMatItemStateChanged(evt);
            }
        });

        jTextFieldMat.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldMat.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldMat.setText("0");
        jTextFieldMat.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldMat.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldMat.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldMat.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldMatFocusGained(evt);
            }
        });

        jCheckBoxMan.setBackground(new java.awt.Color(102, 102, 102));
        jCheckBoxMan.setText("Man ");
        jCheckBoxMan.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxManItemStateChanged(evt);
            }
        });

        jTextFieldMan.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldMan.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldMan.setText("0");
        jTextFieldMan.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldMan.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldMan.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldMan.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldManFocusGained(evt);
            }
        });

        jCheckBoxEms.setBackground(new java.awt.Color(102, 102, 102));
        jCheckBoxEms.setText("Ems ");
        jCheckBoxEms.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxEmsItemStateChanged(evt);
            }
        });

        jTextFieldEms.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldEms.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldEms.setText("0");
        jTextFieldEms.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldEms.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldEms.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldEms.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldEmsFocusGained(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jCheckBoxRef, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxEms, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxMan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxMat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxTrs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxEsp, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jTextFieldEsp, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jTextFieldTrs, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jTextFieldMat, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jTextFieldMan, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jTextFieldEms, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jTextFieldRef, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxRef)
                    .addComponent(jTextFieldRef, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxEms)
                    .addComponent(jTextFieldEms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxMan)
                    .addComponent(jTextFieldMan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxMat)
                    .addComponent(jTextFieldMat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxTrs)
                    .addComponent(jTextFieldTrs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxEsp)
                    .addComponent(jTextFieldEsp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(102, 102, 102));

        jLabel10.setBackground(new java.awt.Color(102, 102, 102));
        jLabel10.setText("Armas");

        jComboBoxArmas.setBackground(new java.awt.Color(102, 102, 102));
        jComboBoxArmas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nenhuma", "Arte marcial", "Adaga", "Adaga de a.", "Alabarda (longa)", "Arco", "Arco longo", "Bast√£o", "Cimitarra", "Chicote", "Clava", "Clava longa", "Espada", "Espada longa", "Foice", "Foice longa", "Katana", "Katar", "Lan√ßa", "Lan√ßa longa", "Machado", "Machado longo", "Machadinha", "Martelo", "Marreta", "Martelo de a.", "Massa/Mangual", "Massa longa", "Picareta", "Picareta longa", "Punhos", "Rapieira", "Tridente", "Nuntchaco", "Nuntchaco triplo", "AK-47", "AR-15", "Besta", "Metralhadora", "Pistola .38", "Pistola lazer", "Rifle", "Uzi", "Fogo 1", "Raio 1", "Acido 1", "Trevas 1", "Madeira 1", "Gelo 1", "Terra 1", "Metal 1", "Fogo 2", "Raio 2", "Acido 2", "Trevas 2", "Madeira 2", "Gelo 2", "Terra 2", "Metal 2", "Fogo 3", "Raio 3", "Acido 3", "Trevas 3", "Madeira 3", "Gelo 3", "Terra 3", "Metal 3", "Fogo 4", "Raio 4", "Acido 4", "Trevas 4", "Madeira 4", "Gelo 4", "Terra 4", "Metal 4" }));
        jComboBoxArmas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxArmasItemStateChanged(evt);
            }
        });

        jCheckBoxPerfurante.setBackground(new java.awt.Color(102, 102, 102));
        jCheckBoxPerfurante.setText("Dano Perfurante");
        jCheckBoxPerfurante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxPerfuranteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxPerfurante, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBoxArmas, 0, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBoxArmas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxPerfurante)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel7.setBackground(new java.awt.Color(102, 102, 102));

        jLabel11.setBackground(new java.awt.Color(102, 102, 102));
        jLabel11.setText("Profici√™ncias");

        jComboBoxPro.setBackground(new java.awt.Color(102, 102, 102));
        jComboBoxPro.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NENHUMA" }));
        jComboBoxPro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxProActionPerformed(evt);
            }
        });

        jLabel28.setBackground(new java.awt.Color(102, 102, 102));
        jLabel28.setText("Dano: ");

        jLabelDanoPro.setBackground(new java.awt.Color(102, 102, 102));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxPro, 0, 182, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel28)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelDanoPro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jComboBoxPro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelDanoPro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel8.setBackground(new java.awt.Color(102, 102, 102));

        jLabel12.setBackground(new java.awt.Color(102, 102, 102));
        jLabel12.setText("Outros");

        jCheckBoxEsq.setBackground(new java.awt.Color(102, 102, 102));
        jCheckBoxEsq.setText("Esq ");
        jCheckBoxEsq.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxEsqItemStateChanged(evt);
            }
        });

        jTextFieldEsq.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldEsq.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldEsq.setText("0");
        jTextFieldEsq.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldEsq.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldEsq.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldEsq.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldEsqFocusGained(evt);
            }
        });

        jTextFieldVel.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldVel.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldVel.setText("0");
        jTextFieldVel.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldVel.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldVel.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldVel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldVelFocusGained(evt);
            }
        });

        jCheckBoxVel.setBackground(new java.awt.Color(102, 102, 102));
        jCheckBoxVel.setText("Vel ");
        jCheckBoxVel.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVelItemStateChanged(evt);
            }
        });

        jTextFieldTen.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldTen.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldTen.setText("0");
        jTextFieldTen.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldTen.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldTen.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldTen.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldTenFocusGained(evt);
            }
        });

        jCheckBoxTen.setBackground(new java.awt.Color(102, 102, 102));
        jCheckBoxTen.setText("Ten ");
        jCheckBoxTen.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxTenItemStateChanged(evt);
            }
        });

        jTextFieldAop.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldAop.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldAop.setText("0");
        jTextFieldAop.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldAop.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldAop.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldAop.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldAopFocusGained(evt);
            }
        });

        jCheckBoxAop.setBackground(new java.awt.Color(102, 102, 102));
        jCheckBoxAop.setText("Aop ");
        jCheckBoxAop.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxAopItemStateChanged(evt);
            }
        });

        jTextFieldMop.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldMop.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldMop.setText("0");
        jTextFieldMop.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldMop.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldMop.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldMop.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldMopFocusGained(evt);
            }
        });

        jCheckBoxMop.setBackground(new java.awt.Color(102, 102, 102));
        jCheckBoxMop.setText("Mop ");
        jCheckBoxMop.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxMopItemStateChanged(evt);
            }
        });

        jTextFieldCdn.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldCdn.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldCdn.setText("0");
        jTextFieldCdn.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldCdn.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldCdn.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldCdn.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldCdnFocusGained(evt);
            }
        });
        jTextFieldCdn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jTextFieldCdnMouseEntered(evt);
            }
        });

        jCheckBoxCdn.setBackground(new java.awt.Color(102, 102, 102));
        jCheckBoxCdn.setText("Cdn ");
        jCheckBoxCdn.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxCdnItemStateChanged(evt);
            }
        });
        jCheckBoxCdn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jCheckBoxCdnMouseEntered(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBoxVel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxEsq, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextFieldEsq, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                            .addComponent(jTextFieldVel)))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jCheckBoxTen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxAop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxMop, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jCheckBoxCdn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextFieldCdn, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jTextFieldMop, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jTextFieldAop, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jTextFieldTen, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxEsq)
                    .addComponent(jTextFieldEsq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxVel)
                    .addComponent(jTextFieldVel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxTen)
                    .addComponent(jTextFieldTen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxAop)
                    .addComponent(jTextFieldAop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxMop)
                    .addComponent(jTextFieldMop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxCdn)
                    .addComponent(jTextFieldCdn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel9.setBackground(new java.awt.Color(102, 102, 102));

        jLabel13.setBackground(new java.awt.Color(102, 102, 102));
        jLabel13.setText("Finalizar");

        jLabel14.setBackground(new java.awt.Color(102, 102, 102));
        jLabel14.setText("Dano:");

        jButtonSalvar.setBackground(new java.awt.Color(102, 102, 102));
        jButtonSalvar.setText("Salvar");
        jButtonSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalvarActionPerformed(evt);
            }
        });

        jLabelDanoFinal.setBackground(new java.awt.Color(102, 102, 102));

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonSalvar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelDanoFinal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDanoFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonSalvar, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel10.setBackground(new java.awt.Color(102, 102, 102));

        jRadioButtonMat.setBackground(new java.awt.Color(102, 102, 102));
        auraBonus.add(jRadioButtonMat);
        jRadioButtonMat.setText("Materializa√ß√£o");
        jRadioButtonMat.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonMatItemStateChanged(evt);
            }
        });

        jRadioButtonMan.setBackground(new java.awt.Color(102, 102, 102));
        auraBonus.add(jRadioButtonMan);
        jRadioButtonMan.setText("Manipula√ß√£o");
        jRadioButtonMan.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonManItemStateChanged(evt);
            }
        });

        jLabel18.setBackground(new java.awt.Color(102, 102, 102));
        jLabel18.setText("Aura Bonus: ");

        jRadioButtonNenhum.setBackground(new java.awt.Color(102, 102, 102));
        auraBonus.add(jRadioButtonNenhum);
        jRadioButtonNenhum.setText("Nenhum");
        jRadioButtonNenhum.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonNenhumItemStateChanged(evt);
            }
        });

        jTextFieldAuraBonus.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldAuraBonus.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldAuraBonus.setText("0");
        jTextFieldAuraBonus.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldAuraBonus.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldAuraBonus.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldAuraBonus.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldAuraBonusFocusGained(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldAuraBonus, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jRadioButtonMat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jRadioButtonMan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jRadioButtonNenhum, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(jTextFieldAuraBonus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jRadioButtonNenhum, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButtonMan, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jRadioButtonMat, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11))
        );

        jPanel11.setBackground(new java.awt.Color(51, 51, 51));

        jLabel20.setBackground(new java.awt.Color(102, 102, 102));
        jLabel20.setForeground(new java.awt.Color(0, 255, 0));
        jLabel20.setText("Dano: ");

        jLabel21.setBackground(new java.awt.Color(102, 102, 102));
        jLabel21.setForeground(new java.awt.Color(0, 255, 0));
        jLabel21.setText("Dado: ");

        jLabel24.setBackground(new java.awt.Color(102, 102, 102));
        jLabel24.setForeground(new java.awt.Color(0, 255, 0));
        jLabel24.setText("Perfurante: ");

        jLabelPerf.setBackground(new java.awt.Color(102, 102, 102));
        jLabelPerf.setForeground(new java.awt.Color(0, 255, 0));

        jLabelDado.setBackground(new java.awt.Color(102, 102, 102));
        jLabelDado.setForeground(new java.awt.Color(0, 255, 0));
        jLabelDado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabelDadoMouseEntered(evt);
            }
        });

        jLabelDanoArma.setBackground(new java.awt.Color(102, 102, 102));
        jLabelDanoArma.setForeground(new java.awt.Color(0, 255, 0));

        jLabel26.setBackground(new java.awt.Color(102, 102, 102));
        jLabel26.setForeground(new java.awt.Color(0, 255, 0));
        jLabel26.setText("Cr√≠tico: ");

        jLabelCrit.setBackground(new java.awt.Color(102, 102, 102));
        jLabelCrit.setForeground(new java.awt.Color(0, 255, 0));

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel24)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelPerf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel11Layout.createSequentialGroup()
                                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel26, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelCrit, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelDado, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel11Layout.createSequentialGroup()
                                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelDanoArma, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(1, 1, 1)))
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDanoArma, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDado, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelCrit, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelPerf, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10))
        );

        jScrollPane2.setViewportView(jPanel11);

        jPanel12.setBackground(new java.awt.Color(102, 102, 102));

        jLabel17.setBackground(new java.awt.Color(102, 102, 102));
        jLabel17.setText("Elementos");

        jComboBoxElementos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nenhum", "Fogo", "Raio", "Acido", "Trevas", "Madeira", "Gelo", "Terra", "Metal" }));
        jComboBoxElementos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxElementosItemStateChanged(evt);
            }
        });

        jComboBoxNivelElemental.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nivel 1", "Nivel 2", "Nivel 3", "Nivel 4", "Nivel 5", "Nivel 6", "Nivel 7", "Nivel 8" }));

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxElementos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBoxNivelElemental, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel17)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxElementos, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxNivelElemental, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel14.setBackground(new java.awt.Color(102, 102, 102));

        jLabel27.setBackground(new java.awt.Color(102, 102, 102));
        jLabel27.setText("Habilidade Padr√£o");

        jCheckBoxAtkPad.setBackground(new java.awt.Color(102, 102, 102));
        jCheckBoxAtkPad.setText("Ataque Padr√£o");

        jCheckBoxDefPad.setBackground(new java.awt.Color(102, 102, 102));
        jCheckBoxDefPad.setText("Defesa Padr√£o");

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxAtkPad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBoxDefPad))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(10, 10, 10))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel27)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jCheckBoxAtkPad)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxDefPad)
                .addContainerGap())
        );

        jPanel15.setBackground(new java.awt.Color(102, 102, 102));

        jLabel29.setBackground(new java.awt.Color(102, 102, 102));
        jLabel29.setText("Ryu: ");

        jTextFieldRyu.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldRyu.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldRyu.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldRyu.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldRyu.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldRyu.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldRyuFocusGained(evt);
            }
        });

        jCheckBoxGastaRyu.setBackground(new java.awt.Color(102, 102, 102));
        jCheckBoxGastaRyu.setText("Gasta Ryu");

        jCheckBoxDanoRebote.setBackground(new java.awt.Color(102, 102, 102));
        jCheckBoxDanoRebote.setText("Dano Rebote");

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jCheckBoxGastaRyu, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addComponent(jLabel29)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldRyu, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jCheckBoxDanoRebote, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextFieldRyu, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxGastaRyu)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxDanoRebote)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel13.setBackground(new java.awt.Color(51, 51, 51));
        jPanel13.setPreferredSize(new java.awt.Dimension(138, 82));

        jLabel22.setForeground(new java.awt.Color(0, 255, 0));
        jLabel22.setText("Elemento: ");

        jLabel23.setForeground(new java.awt.Color(0, 255, 0));
        jLabel23.setText("Dado: ");

        jLabel25.setForeground(new java.awt.Color(0, 255, 0));
        jLabel25.setText("Dano: ");

        jLabelElemento.setForeground(new java.awt.Color(0, 255, 0));

        jLabelDadoElemento.setForeground(new java.awt.Color(0, 255, 0));

        jLabelDanoElemental.setForeground(new java.awt.Color(0, 255, 0));

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel25, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelElemento, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDadoElemento, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDanoElemental, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(jLabelElemento, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel23)
                    .addComponent(jLabelDadoElemento, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel25)
                    .addComponent(jLabelDanoElemental, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jScrollPane3.setViewportView(jPanel13);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, 0)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3)
                            .addComponent(jScrollPane2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(11, 11, 11))
        );

        jScrollPane1.setViewportView(jPanel1);

        jMenu1.setText("Arquivo");

        jMenuItem3.setText("Deletar Habilidade");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem5.setText("Salvar Habilidade");
        jMenu1.add(jMenuItem5);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Editar");

        jMenuItem4.setText("Breve Descri√ß√£o");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        jMenuItem1.setText("Descri√ß√£o");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Corpo");

        jMenuItem2.setText("Visualizar Nen");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem2);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    
    private void desabilitarCampos() {
        // inicio
        jComboBoxHabilidades.setEnabled(false);
        jButtonComecar.setEnabled(false);
        jTextFieldNomeHabilidade.setEnabled(false);
        
        // dados iniciais
        jTextFieldLvl.setEnabled(false);
        jTextFieldVol.setEnabled(false);
        jTextFieldQtd.setEnabled(false);
        jTextFieldDano.setEnabled(false);
        jTextFieldAcerto.setEnabled(false);
        jTextFieldRestricao.setEnabled(false);
        
        jCheckBoxRestricao.setEnabled(false);
        jCheckBoxTipoEms.setEnabled(false);
        
        // pericias
        jCheckBoxFor.setEnabled(false);
        jCheckBoxCon.setEnabled(false);
        jCheckBoxDex.setEnabled(false);
        jCheckBoxInt.setEnabled(false);
        jCheckBoxCar.setEnabled(false);
        jCheckBoxMen.setEnabled(false);
        
        jTextFieldFor.setEnabled(false);
        jTextFieldCon.setEnabled(false);
        jTextFieldDex.setEnabled(false);
        jTextFieldInt.setEnabled(false);
        jTextFieldCar.setEnabled(false);
        jTextFieldMen.setEnabled(false);
        
        // atributos nen
        jCheckBoxRef.setEnabled(false);
        jCheckBoxEms.setEnabled(false);
        jCheckBoxMan.setEnabled(false);
        jCheckBoxMat.setEnabled(false);
        jCheckBoxTrs.setEnabled(false);
        jCheckBoxEsp.setEnabled(false);
        
        jTextFieldRef.setEnabled(false);
        jTextFieldEms.setEnabled(false);
        jTextFieldMan.setEnabled(false);
        jTextFieldMat.setEnabled(false);
        jTextFieldTrs.setEnabled(false);
        jTextFieldEsp.setEnabled(false);
        
        // outros
        jCheckBoxEsq.setEnabled(false);
        jCheckBoxVel.setEnabled(false);
        jCheckBoxTen.setEnabled(false);
        jCheckBoxAop.setEnabled(false);
        jCheckBoxMop.setEnabled(false);
        jCheckBoxCdn.setEnabled(false);
        
        jTextFieldEsq.setEnabled(false);
        jTextFieldVel.setEnabled(false);
        jTextFieldTen.setEnabled(false);
        jTextFieldAop.setEnabled(false);
        jTextFieldMop.setEnabled(false);
        jTextFieldCdn.setEnabled(false);
        
        // armas
        jComboBoxArmas.setEnabled(false);
        jCheckBoxPerfurante.setEnabled(false);
        
        // pericias
        jComboBoxPro.setEnabled(false);
        
        // aura bonus
        jRadioButtonMan.setEnabled(false);
        jRadioButtonMat.setEnabled(false);
        
        // finalizar
        jButtonSalvar.setEnabled(false);
    }
        
    private void setNome() {
        // lendo o nome do personagem
        Ficha ficha;
        String nomePer = jTextFieldNome.getText().toUpperCase();
        // retorna true se o personagem tiver um nome valido
        if (AlgoritmoPrincipal.containsFicha(nomePer)) {
            ficha = AlgoritmoPrincipal.getFicha(nomePer);
        } else {
            JOptionPane.showMessageDialog(null, "N√£o foi encontrado um personagem com esse nome",
                    "Error!", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // setando ficha
        AlgoritmoPrincipalHabilidades.setFicha(ficha);
        
        // setando jComboBoxHabilidades
        jComboBoxHabilidades.removeAllItems();
        jComboBoxHabilidades.addItem("NOVA");
        for (String nome : ficha.getHabilidades().keySet()) {
            jComboBoxHabilidades.addItem(nome);
        }
        
        // habilitando campos
        jComboBoxHabilidades.setEnabled(true);
        jButtonComecar.setEnabled(true);
        
        // limpando jTextFieldNomeHabilidade
        jTextFieldNomeHabilidade.setText("");
    }
    
    private void jTextFieldNomeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldNomeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            setNome();
        }
    }//GEN-LAST:event_jTextFieldNomeKeyPressed

    private void jButtonNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNomeActionPerformed
        setNome();
    }//GEN-LAST:event_jButtonNomeActionPerformed

    private void comecar() {
        Ficha ficha = AlgoritmoPrincipalHabilidades.getFicha();
        Habilidades habilidade = ficha.getHabilidade(jComboBoxHabilidades.getSelectedItem().toString());
        
        // testando se a habilidade √© nova
        if (habilidade == null) {
            // controlando nomes repetidos das habilidades
            for (String nome : ficha.getHabilidades().keySet()) {
                if (nome.equals(jTextFieldNomeHabilidade.getText())) {
                    JOptionPane.showMessageDialog(null, "O personagem j√° possui uma habilidade com esse nome!",
                            "Error!", JOptionPane.WARNING_MESSAGE);
                    
                    return;
                }
            }
            // criando nova habilidade
            habilidade = new Habilidades();
            habilidade.setNome(jTextFieldNomeHabilidade.getText().toUpperCase());
            // testando se o nome da habilidade √© v√°lido
            if (habilidade.getNome().equals("NULL") || habilidade.getNome().equals("NOVA") ||
                habilidade.getNome().equals("FISICO") || habilidade.getNome().equals("SEM DEFESA") ||
                habilidade.getNome().equals("")) {
                JOptionPane.showMessageDialog(null, "Esse nome n√£o √© v√°lido!",
                        "Error!", JOptionPane.WARNING_MESSAGE);
                return;
            }
            // inserindo habilidade na ficha
            ficha.putHabilidade(jTextFieldNomeHabilidade.getText().toUpperCase(), habilidade);
            
            // inserindo em personagem
            //AlgoritmoPrincipalHabilidades.getPerson(ficha.getNick()).putHabilidades(habilidade);
        }
        
        // desativando jTextFieldNomeHabilidade
        jTextFieldNomeHabilidade.setEnabled(false);

        // inserindo habilidade em algoritmo principal
        AlgoritmoPrincipalHabilidades.setHabilidade(habilidade);
        
        // habilitando campos
        habilitarCampos();
        
        // inicializando jComboBoxPro
        // travando action performered de comboBoxHabilidades
        // para que a habilidade nao seja sobrescrita
        AlgoritmoPrincipalHabilidades.setComboBoxLocked(true);
        jComboBoxPro.removeAllItems();
        jComboBoxPro.addItem("NENHUMA");
        for (String nome : ficha.getPro().keySet()) {
            jComboBoxPro.addItem(nome);
        }

        // inserindo dados
        // dados iniciais
        jTextFieldLvl.setText(String.valueOf(habilidade.getLvl()));
        jTextFieldVol.setText(String.valueOf(habilidade.getVol()));
        jTextFieldQtd.setText(String.valueOf(habilidade.getQtd()));
        jTextFieldDano.setText(String.valueOf(habilidade.getDanoFixo()));
        jTextFieldAcerto.setText(String.valueOf(habilidade.getAcertoFixo()));
        jTextFieldRestricao.setText(String.valueOf(habilidade.getRestricao()));
        
        if (!habilidade.getProficiencia().equals("")) {
            jComboBoxPro.setSelectedItem(habilidade.getProficiencia());
        }
        
        jCheckBoxRestricao.setSelected(habilidade.getRestricao() != 1.0);
        jCheckBoxEms.setSelected(habilidade.isTrs());
        
        // pericias
        jCheckBoxFor.setSelected(habilidade.isSomarFor());
        jCheckBoxCon.setSelected(habilidade.isSomarCon());
        jCheckBoxDex.setSelected(habilidade.isSomarDex());
        jCheckBoxInt.setSelected(habilidade.isSomarInt());
        jCheckBoxCar.setSelected(habilidade.isSomarCar());
        jCheckBoxMen.setSelected(habilidade.isSomarMen());
        
        jTextFieldFor.setText(String.valueOf(habilidade.getQtdFor()));
        jTextFieldCon.setText(String.valueOf(habilidade.getQtdCon()));
        jTextFieldDex.setText(String.valueOf(habilidade.getQtdDex()));
        jTextFieldInt.setText(String.valueOf(habilidade.getQtdInt()));
        jTextFieldCar.setText(String.valueOf(habilidade.getQtdCar()));
        jTextFieldMen.setText(String.valueOf(habilidade.getQtdMen()));
        
        // atributos nen
        jCheckBoxRef.setSelected(habilidade.isSomarRef());
        jCheckBoxEms.setSelected(habilidade.isSomarEms());
        jCheckBoxMan.setSelected(habilidade.isSomarMan());
        jCheckBoxMat.setSelected(habilidade.isSomarMat());
        jCheckBoxTrs.setSelected(habilidade.isSomarTrs());
        jCheckBoxEsp.setSelected(habilidade.isSomarEsp());
        
        jTextFieldRef.setText(String.valueOf(habilidade.getQtdRef()));
        jTextFieldEms.setText(String.valueOf(habilidade.getQtdEms()));
        jTextFieldMan.setText(String.valueOf(habilidade.getQtdMan()));
        jTextFieldMat.setText(String.valueOf(habilidade.getQtdMat()));
        jTextFieldTrs.setText(String.valueOf(habilidade.getQtdTrs()));
        jTextFieldEsp.setText(String.valueOf(habilidade.getQtdEsp()));
        
        // outros
        jCheckBoxVel.setSelected(habilidade.isSomarVel());
        jCheckBoxEsq.setSelected(habilidade.isSomarEsq());
        jCheckBoxTen.setSelected(habilidade.isSomarTen());
        jCheckBoxAop.setSelected(habilidade.isSomarAop());
        jCheckBoxMop.setSelected(habilidade.isSomarMop());
        jCheckBoxCdn.setSelected(habilidade.isSomarCdn());
        
        jTextFieldVel.setText(String.valueOf(habilidade.getQtdVel()));
        jTextFieldEsq.setText(String.valueOf(habilidade.getQtdEsq()));
        jTextFieldTen.setText(String.valueOf(habilidade.getQtdTen()));
        jTextFieldAop.setText(String.valueOf(habilidade.getQtdAop()));
        jTextFieldMop.setText(String.valueOf(habilidade.getQtdMop()));
        jTextFieldCdn.setText(String.valueOf(habilidade.getQtdCdn()));
        
        jTextFieldRyu.setText(String.valueOf(habilidade.getRyu()));
        try {
            jCheckBoxAtkPad.setSelected(ficha.getAtkPad().equals(habilidade.getNome()));
        } catch (NullPointerException e) {
            jCheckBoxAtkPad.setSelected(false);
        }
        try {
            jCheckBoxDefPad.setSelected(ficha.getDefPad().equals(habilidade.getNome()));
        } catch (NullPointerException e) {
            jCheckBoxDefPad.setSelected(false);
        }
        jCheckBoxGastaRyu.setSelected(habilidade.isGastaRyu());
        jCheckBoxDanoRebote.setSelected(habilidade.isDanoRebote());
        
        
        // setando jRaioButton
        if (habilidade.isMan()) {
            jRadioButtonMan.setSelected(true);
        } else if (habilidade.isMat()) {
            jRadioButtonMat.setSelected(true);
        } else {
            jRadioButtonNenhum.setSelected(true);
        }
        
        // armas
        // destravando comboBoxes
        AlgoritmoPrincipalHabilidades.setComboBoxLocked(false);
        jComboBoxArmas.setSelectedItem(habilidade.getArma());
        
        jCheckBoxPerfurante.setSelected(habilidade.isPerfurante());
        
        // proficiencias
        jComboBoxPro.setSelectedItem(habilidade.getProficiencia());
        
        // aura bonus
        /*jRadioButtonNenhum.setSelected(true);
        jRadioButtonMan.setSelected(habilidade.isMan());
        jRadioButtonMat.setSelected(habilidade.isMat());*/
    }
    
    private void atualizaArmas() {
        if (AlgoritmoPrincipalHabilidades.isComboBoxLocked()) {
            return;
        }
        
        String nome = jComboBoxArmas.getSelectedItem().toString();
        
        if (nome.equals("Nenhuma")) {
            jLabelDanoArma.setText("+0");
            jLabelDado.setText("0");
            jLabelCrit.setText("2");
            jCheckBoxPerfurante.setSelected(false);
            if (jCheckBoxPerfurante.isSelected()) {
                jLabelPerf.setText("sim");
            } else {
                jLabelPerf.setText("n√£o");
            }
        } else {
            Armas arma = CalculadoraHabilidades.getArma(nome);
            
            jLabelDanoArma.setText("+" + String.valueOf(arma.getDano()));
            jLabelDado.setText(String.valueOf(arma.getDados()));
            jLabelCrit.setText(String.valueOf(arma.getCritico()));
            jCheckBoxPerfurante.setSelected(arma.isPerfurante());
            if (jCheckBoxPerfurante.isSelected()) {
                jLabelPerf.setText("sim");
            } else {
                jLabelPerf.setText("n√£o");
            }
        }
        
        atualizaHabilidade();
        danoFinal();
    }
    
    private void jButtonComecarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonComecarActionPerformed
        comecar();
    }//GEN-LAST:event_jButtonComecarActionPerformed

    private void atualizaHabilidade() {
        if (AlgoritmoPrincipalHabilidades.isComboBoxLocked()) {
            return;
        }
        
        Habilidades habilidade = AlgoritmoPrincipalHabilidades.getHabilidade();
        
        // dados iniciais
        try {
            habilidade.setLvl(Integer.parseInt(jTextFieldLvl.getText()));
        } catch (NumberFormatException e) {
            return;
        }
        habilidade.setVol(Integer.parseInt(jTextFieldVol.getText()));
        habilidade.setQtd(Integer.parseInt(jTextFieldQtd.getText()));
        habilidade.setDanoFixo(Integer.parseInt(jTextFieldDano.getText()));
        habilidade.setAcertoFixo(Integer.parseInt(jTextFieldAcerto.getText()));
        habilidade.setRestricao(Double.parseDouble(jTextFieldRestricao.getText()));
        
        habilidade.setTrs(jCheckBoxTipoEms.isSelected());
        
        // pericias
        habilidade.setSomarFor(jCheckBoxFor.isSelected());
        habilidade.setSomarCon(jCheckBoxCon.isSelected());
        habilidade.setSomarDex(jCheckBoxDex.isSelected());
        habilidade.setSomarInt(jCheckBoxInt.isSelected());
        habilidade.setSomarCar(jCheckBoxCar.isSelected());
        habilidade.setSomarMen(jCheckBoxMen.isSelected());
        
        habilidade.setQtdFor(Integer.parseInt(jTextFieldFor.getText()));
        habilidade.setQtdCon(Integer.parseInt(jTextFieldCon.getText()));
        habilidade.setQtdDex(Integer.parseInt(jTextFieldDex.getText()));
        habilidade.setQtdInt(Integer.parseInt(jTextFieldInt.getText()));
        habilidade.setQtdCar(Integer.parseInt(jTextFieldCar.getText()));
        habilidade.setQtdMen(Integer.parseInt(jTextFieldMen.getText()));
        
        // atributos nen
        habilidade.setSomarRef(jCheckBoxRef.isSelected());
        habilidade.setSomarEms(jCheckBoxEms.isSelected());
        habilidade.setSomarMan(jCheckBoxMan.isSelected());
        habilidade.setSomarMat(jCheckBoxMat.isSelected());
        habilidade.setSomarTrs(jCheckBoxTrs.isSelected());
        habilidade.setSomarEsp(jCheckBoxEsp.isSelected());
        
        habilidade.setQtdRef(Integer.parseInt(jTextFieldRef.getText()));
        habilidade.setQtdEms(Integer.parseInt(jTextFieldEms.getText()));
        habilidade.setQtdMan(Integer.parseInt(jTextFieldMan.getText()));
        habilidade.setQtdMat(Integer.parseInt(jTextFieldMat.getText()));
        habilidade.setQtdTrs(Integer.parseInt(jTextFieldTrs.getText()));
        habilidade.setQtdEsp(Integer.parseInt(jTextFieldEsp.getText()));
        
        // outros
        habilidade.setSomarEsq(jCheckBoxEsq.isSelected());
        habilidade.setSomarVel(jCheckBoxVel.isSelected());
        habilidade.setSomarTen(jCheckBoxTen.isSelected());
        habilidade.setSomarAop(jCheckBoxAop.isSelected());
        habilidade.setSomarMop(jCheckBoxMop.isSelected());
        habilidade.setSomarCdn(jCheckBoxCdn.isSelected());
        
        habilidade.setQtdEsq(Integer.parseInt(jTextFieldEsq.getText()));
        habilidade.setQtdVel(Integer.parseInt(jTextFieldVel.getText()));
        habilidade.setQtdTen(Integer.parseInt(jTextFieldTen.getText()));
        habilidade.setQtdAop(Integer.parseInt(jTextFieldAop.getText()));
        habilidade.setQtdMop(Integer.parseInt(jTextFieldMop.getText()));
        habilidade.setQtdCdn(Integer.parseInt(jTextFieldCdn.getText()));
        
        // arma
        habilidade.setArma(jComboBoxArmas.getSelectedItem().toString());
        //...
        
        // proficiencia
        habilidade.setProficiencia(jComboBoxPro.getSelectedItem().toString());
        
        // aura bonus
        habilidade.setMan(jRadioButtonMan.isSelected());
        habilidade.setMat(jRadioButtonMat.isSelected());
        
        // setando habilidade
        AlgoritmoPrincipalHabilidades.setHabilidade(habilidade);
    }
    
    private void danoFinal() {
        if (AlgoritmoPrincipalHabilidades.isComboBoxLocked()) {
            return;
        }
        
        int danoFinal = CalculadoraHabilidades.calculaDano(
                AlgoritmoPrincipalHabilidades.getFicha(), AlgoritmoPrincipalHabilidades.getHabilidade()
        );
        
        jLabelDanoFinal.setText(String.valueOf(danoFinal));
        AlgoritmoPrincipalHabilidades.getHabilidade().setDano(danoFinal);
    }
    
    private void jComboBoxProActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxProActionPerformed
        if (AlgoritmoPrincipalHabilidades.isComboBoxLocked()) {
            return;
        }

        if (jComboBoxPro.getSelectedItem() == null) {
            return;
        }
        
        Ficha ficha = AlgoritmoPrincipalHabilidades.getFicha();
        
        // setando proficiencia na habilidade
        AlgoritmoPrincipalHabilidades.getHabilidade().setProficiencia(jComboBoxPro.getSelectedItem().toString());
        
        atualizaHabilidade();
        danoFinal();
        
        if (jComboBoxPro.getSelectedItem().toString().equals("NENHUMA")) {
            // limpando label de dano
            jLabelDanoPro.setText("");
            return;
        }
        // setando dano na label
        jLabelDanoPro.setText(String.valueOf(ficha.getPro().get(jComboBoxPro.getSelectedItem().toString()).getLvl()));
    }//GEN-LAST:event_jComboBoxProActionPerformed

    private void limparCampos() {
        // dados iniciais
        jTextFieldLvl.setText("");
        jTextFieldDano.setText("");
        jTextFieldAcerto.setText("");
        jTextFieldVol.setText("");
        jTextFieldQtd.setText("");
        jTextFieldRyu.setText("");
        
        jCheckBoxRestricao.setSelected(false);
        jCheckBoxTipoEms.setSelected(false);
        
        // pericias
        jCheckBoxFor.setSelected(false);
        jCheckBoxCon.setSelected(false);
        jCheckBoxDex.setSelected(false);
        jCheckBoxInt.setSelected(false);
        jCheckBoxCar.setSelected(false);
        jCheckBoxMen.setSelected(false);
        
        // atributos nen
        jCheckBoxRef.setSelected(false);
        jCheckBoxEms.setSelected(false);
        jCheckBoxMan.setSelected(false);
        jCheckBoxMat.setSelected(false);
        jCheckBoxTrs.setSelected(false);
        jCheckBoxEsp.setSelected(false);
        
        // outros
        jCheckBoxTen.setSelected(false);
        jCheckBoxAop.setSelected(false);
        jCheckBoxMop.setSelected(false);
        jCheckBoxCdn.setSelected(false);
        jCheckBoxEsq.setSelected(false);
        jCheckBoxVel.setSelected(false);
        
        // habilidade padrao e ryu
        jCheckBoxAtkPad.setSelected(false);
        jCheckBoxDefPad.setSelected(false);
        jCheckBoxGastaRyu.setSelected(false);
        jCheckBoxDanoRebote.setSelected(false);
        
        // armas
        jComboBoxArmas.setSelectedItem("Nenhuma");
        
        // proficiencia
        jComboBoxPro.setSelectedItem("NENHUMA");
        
        // aura bonus
        jRadioButtonNenhum.setSelected(true);
        
        // finalizar
        jLabelDanoFinal.setText("");
    }
    
    private void jButtonSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalvarActionPerformed
        try {
            salvar();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ViewPrincipalHabilidades.class.getName()).log(Level.SEVERE, null, ex);
        }
        setNome();
    }//GEN-LAST:event_jButtonSalvarActionPerformed

    private void salvar() throws ClassNotFoundException {
        Habilidades habilidade = AlgoritmoPrincipalHabilidades.getHabilidade();
        
        // setando dados iniciais
        habilidade.setLvl(Integer.parseInt(jTextFieldLvl.getText()));
        habilidade.setDanoFixo(Integer.parseInt(jTextFieldDano.getText()));
        habilidade.setAcertoFixo(Integer.parseInt(jTextFieldAcerto.getText()));
        habilidade.setVol(Integer.parseInt(jTextFieldVol.getText()));
        habilidade.setQtd(Integer.parseInt(jTextFieldQtd.getText()));
        habilidade.setRestricao(Double.parseDouble(jTextFieldRestricao.getText()));
        habilidade.setTrs(jCheckBoxTipoEms.isSelected());
        
        // setando pericias
        habilidade.setSomarFor(jCheckBoxFor.isSelected());
        habilidade.setSomarCon(jCheckBoxCon.isSelected());
        habilidade.setSomarDex(jCheckBoxDex.isSelected());
        habilidade.setSomarInt(jCheckBoxInt.isSelected());
        habilidade.setSomarCar(jCheckBoxCar.isSelected());
        habilidade.setSomarMen(jCheckBoxMen.isSelected());
        
        habilidade.setQtdFor(Integer.parseInt(jTextFieldFor.getText()));
        habilidade.setQtdCon(Integer.parseInt(jTextFieldCon.getText()));
        habilidade.setQtdDex(Integer.parseInt(jTextFieldDex.getText()));
        habilidade.setQtdInt(Integer.parseInt(jTextFieldInt.getText()));
        habilidade.setQtdCar(Integer.parseInt(jTextFieldCar.getText()));
        habilidade.setQtdMen(Integer.parseInt(jTextFieldMen.getText()));
        
        // setando atributos nen
        habilidade.setSomarRef(jCheckBoxRef.isSelected());
        habilidade.setSomarEms(jCheckBoxEms.isSelected());
        habilidade.setSomarMan(jCheckBoxMan.isSelected());
        habilidade.setSomarMat(jCheckBoxMat.isSelected());
        habilidade.setSomarTrs(jCheckBoxTrs.isSelected());
        habilidade.setSomarEsp(jCheckBoxEsp.isSelected());
        
        habilidade.setQtdRef(Integer.parseInt(jTextFieldRef.getText()));
        habilidade.setQtdEms(Integer.parseInt(jTextFieldEms.getText()));
        habilidade.setQtdMan(Integer.parseInt(jTextFieldMan.getText()));
        habilidade.setQtdMat(Integer.parseInt(jTextFieldMat.getText()));
        habilidade.setQtdTrs(Integer.parseInt(jTextFieldTrs.getText()));
        habilidade.setQtdEsp(Integer.parseInt(jTextFieldEsp.getText()));
        
        // outros
        habilidade.setSomarEsq(jCheckBoxEsq.isSelected());
        habilidade.setSomarVel(jCheckBoxVel.isSelected());
        habilidade.setSomarTen(jCheckBoxTen.isSelected());
        habilidade.setSomarAop(jCheckBoxAop.isSelected());
        habilidade.setSomarMop(jCheckBoxMop.isSelected());
        habilidade.setSomarCdn(jCheckBoxCdn.isSelected());
        
        habilidade.setQtdEsq(Integer.parseInt(jTextFieldEsq.getText()));
        habilidade.setQtdVel(Integer.parseInt(jTextFieldVel.getText()));
        habilidade.setQtdTen(Integer.parseInt(jTextFieldTen.getText()));
        habilidade.setQtdAop(Integer.parseInt(jTextFieldAop.getText()));
        habilidade.setQtdMop(Integer.parseInt(jTextFieldMop.getText()));
        habilidade.setQtdCdn(Integer.parseInt(jTextFieldCdn.getText()));
        
        // setando estado padrao das habilidades
        habilidade.setRyu(Integer.parseInt(jTextFieldRyu.getText()));
        habilidade.setGastaRyu(jCheckBoxGastaRyu.isSelected());
        habilidade.setDanoRebote(jCheckBoxDanoRebote.isSelected());
        habilidade.setPerfurante(jCheckBoxPerfurante.isSelected());
        
        // armas
        habilidade.setArma(jComboBoxArmas.getSelectedItem().toString());
        if (!habilidade.getArma().equals("Nenhuma")) {
            habilidade.setDados(CalculadoraHabilidades.getArma(habilidade.getArma()).getDados());
        } else {
            habilidade.setDados("");
            
            // quando eu conseguir somar armas com dano, tirar esse if de fora desse escopo
            // elementos
            // e trocar habilidade.setArma abaixo por habilidade.setElemento
            habilidade.setArma(jComboBoxElementos.getSelectedItem().toString());
            if (!habilidade.getArma().equals("Nenhum")){
                habilidade.setDados(CalculadoraHabilidades.getElemento(habilidade.getArma()).getDados());
            }
        }
        
        
        
        // proficiencias
        habilidade.setProficiencia(jComboBoxPro.getSelectedItem().toString());
        
        // aura bonus
        habilidade.setMan(jRadioButtonMan.isSelected());
        habilidade.setMat(jRadioButtonMat.isSelected());
        // setando auraBonus
        if (habilidade.isMan()) {
            habilidade.setAuraBonus(Integer.parseInt(jTextFieldAuraBonus.getText()));
        } else if (habilidade.isMat()) {
            habilidade.setAuraBonus(Integer.parseInt(jTextFieldAuraBonus.getText()));
        } else {
            habilidade.setAuraBonus(0);
        }
        
        // finalizar (setando dano final)
        danoFinal();
        habilidade.setDano(Integer.parseInt(jLabelDanoFinal.getText()));
        
        // criando proficiencia assossiada √† habilidade
        boolean proExistente = false;
        for (String nome : AlgoritmoPrincipalHabilidades.getFicha().getPro().keySet()) {
            if (nome.equals(habilidade.getNome())) {
                proExistente = true;
                break;
            }
        }
        if (!proExistente) {
            LvlBonus lvlBonus = new LvlBonus();
            AlgoritmoPrincipalHabilidades.getFicha().putPro(habilidade.getNome(), lvlBonus);
        }
        
        // setando habilidade como padr√£o, se for o caso
        if (jCheckBoxAtkPad.isSelected()) {
            AlgoritmoPrincipalHabilidades.getFicha().setAtkPad(habilidade.getNome());
        }
        if (jCheckBoxDefPad.isSelected()) {
            AlgoritmoPrincipalHabilidades.getFicha().setDefPad(habilidade.getNome());
        }
        
        // salvando ficha
//        File folder = new File(algoritmos.batalhas.AlgoritmoPrincipal.getDIR_FICHAS());
//        if (AlgoritmoPrincipalHabilidades.saveFicha(folder)) {
//            JOptionPane.showMessageDialog(null, "Habilidade salva com sucesso!",
//                    "Success!", JOptionPane.INFORMATION_MESSAGE);
//            
//        } else {
//            JOptionPane.showMessageDialog(null, "A ficha n√£o foi salva!", "Error!",
//                    JOptionPane.ERROR_MESSAGE);
//            
//            return;
//        }
        AlgoritmoPrincipal.deleteFicha(AlgoritmoPrincipalHabilidades.getFicha().getNick());
        AlgoritmoPrincipal.saveFicha(AlgoritmoPrincipalHabilidades.getFicha());
        
        
        // limpando jPanel
        limparCampos();
        
        // limpando jComboBoxHabilidades
        jComboBoxHabilidades.removeAllItems();
        
        // desabilitando campos
        desabilitarCampos();
        
        // habilitando campos
        jTextFieldNome.setEnabled(true);
        jButtonNome.setEnabled(true);
        
        // limpando habilidade de algoritmo principal
        AlgoritmoPrincipalHabilidades.setHabilidade(null);
        
        // travando comboBoxes
        AlgoritmoPrincipalHabilidades.setComboBoxLocked(true);
        
        // atualizando
        AlgoritmoPrincipal.loadFichas();
    }
    
    private void jComboBoxHabilidadesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxHabilidadesActionPerformed
        if (jComboBoxHabilidades.getSelectedItem() == null) {
            return;
        }
        
        if (jComboBoxHabilidades.getSelectedItem().toString().equals("NOVA")) {
            jTextFieldNomeHabilidade.setEnabled(true);
        } else {
            jTextFieldNomeHabilidade.setEnabled(false);
            jTextFieldNomeHabilidade.setText("");
            
            Ficha ficha = AlgoritmoPrincipalHabilidades.getFicha();
        }
    }//GEN-LAST:event_jComboBoxHabilidadesActionPerformed

    private void jTextFieldNomeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldNomeFocusGained
        jTextFieldNome.selectAll();
    }//GEN-LAST:event_jTextFieldNomeFocusGained

    private void jTextFieldNomeHabilidadeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldNomeHabilidadeFocusGained
        jTextFieldNomeHabilidade.selectAll();
    }//GEN-LAST:event_jTextFieldNomeHabilidadeFocusGained

    private void jTextFieldLvlFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldLvlFocusGained
        jTextFieldLvl.selectAll();
    }//GEN-LAST:event_jTextFieldLvlFocusGained

    private void jTextFieldDanoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldDanoFocusGained
        jTextFieldDano.selectAll();
    }//GEN-LAST:event_jTextFieldDanoFocusGained

    private void jTextFieldVolFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldVolFocusGained
        jTextFieldVol.selectAll();
    }//GEN-LAST:event_jTextFieldVolFocusGained

    private void jTextFieldQtdFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldQtdFocusGained
        jTextFieldQtd.selectAll();
    }//GEN-LAST:event_jTextFieldQtdFocusGained

    private void jTextFieldRestricaoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldRestricaoFocusGained
        jTextFieldRestricao.selectAll();
    }//GEN-LAST:event_jTextFieldRestricaoFocusGained

    private void jTextFieldForFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldForFocusGained
        jTextFieldFor.selectAll();
    }//GEN-LAST:event_jTextFieldForFocusGained

    private void jTextFieldConFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldConFocusGained
        jTextFieldCon.selectAll();
    }//GEN-LAST:event_jTextFieldConFocusGained

    private void jTextFieldDexFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldDexFocusGained
        jTextFieldDex.selectAll();
    }//GEN-LAST:event_jTextFieldDexFocusGained

    private void jTextFieldIntFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldIntFocusGained
        jTextFieldInt.selectAll();
    }//GEN-LAST:event_jTextFieldIntFocusGained

    private void jTextFieldCarFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldCarFocusGained
        jTextFieldCar.selectAll();
    }//GEN-LAST:event_jTextFieldCarFocusGained

    private void jTextFieldMenFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldMenFocusGained
        jTextFieldMen.selectAll();
    }//GEN-LAST:event_jTextFieldMenFocusGained

    private void jTextFieldRefFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldRefFocusGained
        jTextFieldRef.selectAll();
    }//GEN-LAST:event_jTextFieldRefFocusGained

    private void jTextFieldEmsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldEmsFocusGained
        jTextFieldEms.selectAll();
    }//GEN-LAST:event_jTextFieldEmsFocusGained

    private void jTextFieldManFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldManFocusGained
        jTextFieldMan.selectAll();
    }//GEN-LAST:event_jTextFieldManFocusGained

    private void jTextFieldMatFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldMatFocusGained
        jTextFieldMat.selectAll();
    }//GEN-LAST:event_jTextFieldMatFocusGained

    private void jTextFieldTrsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldTrsFocusGained
        jTextFieldTrs.selectAll();
    }//GEN-LAST:event_jTextFieldTrsFocusGained

    private void jTextFieldEspFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldEspFocusGained
        jTextFieldEsp.selectAll();
    }//GEN-LAST:event_jTextFieldEspFocusGained

    private void jTextFieldEsqFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldEsqFocusGained
        jTextFieldEsq.selectAll();
    }//GEN-LAST:event_jTextFieldEsqFocusGained

    private void jTextFieldVelFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldVelFocusGained
        jTextFieldVel.selectAll();
    }//GEN-LAST:event_jTextFieldVelFocusGained

    private void jTextFieldTenFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldTenFocusGained
        jTextFieldTen.selectAll();
    }//GEN-LAST:event_jTextFieldTenFocusGained

    private void jTextFieldAopFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldAopFocusGained
        jTextFieldAop.selectAll();
    }//GEN-LAST:event_jTextFieldAopFocusGained

    private void jTextFieldMopFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldMopFocusGained
        jTextFieldMop.selectAll();
    }//GEN-LAST:event_jTextFieldMopFocusGained

    private void jTextFieldCdnFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldCdnFocusGained
        jTextFieldCdn.selectAll();
    }//GEN-LAST:event_jTextFieldCdnFocusGained

    private void jCheckBoxPerfuranteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxPerfuranteActionPerformed
        if (jCheckBoxPerfurante.isSelected()) {
            jLabelPerf.setText("sim");
        } else {
            jLabelPerf.setText("n√£o");
        }
    }//GEN-LAST:event_jCheckBoxPerfuranteActionPerformed

    private void jTextFieldNomeHabilidadeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldNomeHabilidadeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            comecar();
        }
    }//GEN-LAST:event_jTextFieldNomeHabilidadeKeyPressed

    private void jLabelDadoMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelDadoMouseEntered
        jLabelDado.setToolTipText(jLabelDado.getText());
    }//GEN-LAST:event_jLabelDadoMouseEntered

    private void jLabel4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseEntered
        jLabel4.setToolTipText("Dano intr√≠nseco √† habilidade");
    }//GEN-LAST:event_jLabel4MouseEntered

    private void jTextFieldDanoMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldDanoMouseEntered
        jLabel4.setToolTipText("Dano intr√≠nseco √† habilidade");
    }//GEN-LAST:event_jTextFieldDanoMouseEntered

    private void jCheckBoxCdnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBoxCdnMouseEntered
        jCheckBoxCdn.setToolTipText("Per√≠cia de Cdn");
    }//GEN-LAST:event_jCheckBoxCdnMouseEntered

    private void jTextFieldCdnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldCdnMouseEntered
        jCheckBoxCdn.setToolTipText("Per√≠cia de Cdn");
    }//GEN-LAST:event_jTextFieldCdnMouseEntered

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        Habilidades habilidade = AlgoritmoPrincipalHabilidades.getHabilidade();
        if (habilidade == null) {
            JOptionPane.showMessageDialog(null, "Primeiro escolha uma habilidade!", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        new View_descricao(null, true).setVisible(true);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jCheckBoxForItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxForItemStateChanged
        if (jCheckBoxFor.isSelected()) {
            jTextFieldFor.setText("1");
            jTextFieldFor.setEnabled(true);
            atualizaHabilidade();
            danoFinal();
            
        } else {
            jTextFieldFor.setText("0");
            jTextFieldFor.setEnabled(false);
            atualizaHabilidade();
            danoFinal();
        }
    }//GEN-LAST:event_jCheckBoxForItemStateChanged

    private void jCheckBoxConItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxConItemStateChanged
        if (jCheckBoxCon.isSelected()) {
            jTextFieldCon.setText("1");
            jTextFieldCon.setEnabled(true);
            atualizaHabilidade();
            danoFinal();
        } else {
            jTextFieldCon.setText("0");
            jTextFieldCon.setEnabled(false);
            atualizaHabilidade();
            danoFinal();
        }        
    }//GEN-LAST:event_jCheckBoxConItemStateChanged

    private void jCheckBoxDexItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxDexItemStateChanged
        if (jCheckBoxDex.isSelected()) {
            jTextFieldDex.setText("1");
            jTextFieldDex.setEnabled(true);
            atualizaHabilidade();
            danoFinal();
        } else {
            jTextFieldDex.setText("0");
            jTextFieldDex.setEnabled(false);
            atualizaHabilidade();
            danoFinal();
        }        
    }//GEN-LAST:event_jCheckBoxDexItemStateChanged

    private void jCheckBoxIntItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxIntItemStateChanged
        if (jCheckBoxInt.isSelected()) {
            jTextFieldInt.setText("1");
            jTextFieldInt.setEnabled(true);
            atualizaHabilidade();
            danoFinal();
        } else {
            jTextFieldInt.setText("0");
            jTextFieldInt.setEnabled(false);
            atualizaHabilidade();
            danoFinal();
        }        
    }//GEN-LAST:event_jCheckBoxIntItemStateChanged

    private void jCheckBoxCarItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxCarItemStateChanged
        if (jCheckBoxCar.isSelected()) {
            jTextFieldCar.setText("1");
            jTextFieldCar.setEnabled(true);
            atualizaHabilidade();
            danoFinal();
        } else {
            jTextFieldCar.setText("0");
            jTextFieldCar.setEnabled(false);
            atualizaHabilidade();
            danoFinal();
        }        
    }//GEN-LAST:event_jCheckBoxCarItemStateChanged

    private void jCheckBoxMenItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxMenItemStateChanged
        if (jCheckBoxMen.isSelected()) {
            jTextFieldMen.setText("1");
            jTextFieldMen.setEnabled(true);
            atualizaHabilidade();
            danoFinal();
        } else {
            jTextFieldMen.setText("0");
            jTextFieldMen.setEnabled(false);
            atualizaHabilidade();
            danoFinal();
        }        
    }//GEN-LAST:event_jCheckBoxMenItemStateChanged

    private void jCheckBoxRefItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxRefItemStateChanged
        if (jCheckBoxRef.isSelected()) {
            jTextFieldRef.setText("1");
            jTextFieldRef.setEnabled(true);
            atualizaHabilidade();
            danoFinal();
        } else {
            jTextFieldRef.setText("0");
            jTextFieldRef.setEnabled(false);
            atualizaHabilidade();
            danoFinal();
        }        
    }//GEN-LAST:event_jCheckBoxRefItemStateChanged

    private void jCheckBoxEmsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxEmsItemStateChanged
        if (jCheckBoxEms.isSelected()) {
            jTextFieldEms.setText("1");
            jTextFieldEms.setEnabled(true);
            atualizaHabilidade();
            danoFinal();
        } else {
            jTextFieldEms.setText("0");
            jTextFieldEms.setEnabled(false);
            atualizaHabilidade();
            danoFinal();
        }        
    }//GEN-LAST:event_jCheckBoxEmsItemStateChanged

    private void jCheckBoxManItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxManItemStateChanged
        if (jCheckBoxMan.isSelected()) {
            jTextFieldMan.setText("1");
            jTextFieldMan.setEnabled(true);
            atualizaHabilidade();
            danoFinal();
        } else {
            jTextFieldMan.setText("0");
            jTextFieldMan.setEnabled(false);
            atualizaHabilidade();
            danoFinal();
        }        
    }//GEN-LAST:event_jCheckBoxManItemStateChanged

    private void jCheckBoxMatItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxMatItemStateChanged
        if (jCheckBoxMat.isSelected()) {
            jTextFieldMat.setText("1");
            jTextFieldMat.setEnabled(true);
            atualizaHabilidade();
            danoFinal();
        } else {
            jTextFieldMat.setText("0");
            jTextFieldMat.setEnabled(false);
            atualizaHabilidade();
            danoFinal();
        }        
    }//GEN-LAST:event_jCheckBoxMatItemStateChanged

    private void jCheckBoxTrsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxTrsItemStateChanged
        if (jCheckBoxTrs.isSelected()) {
            jTextFieldTrs.setText("1");
            jTextFieldTrs.setEnabled(true);
            atualizaHabilidade();
            danoFinal();
        } else {
            jTextFieldTrs.setText("0");
            jTextFieldTrs.setEnabled(false);
            atualizaHabilidade();
            danoFinal();
        }        
    }//GEN-LAST:event_jCheckBoxTrsItemStateChanged

    private void jCheckBoxEspItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxEspItemStateChanged
        if (jCheckBoxEsp.isSelected()) {
            jTextFieldEsp.setText("1");
            jTextFieldEsp.setEnabled(true);
            atualizaHabilidade();
            danoFinal();
        } else {
            jTextFieldEsp.setText("0");
            jTextFieldEsp.setEnabled(false);
            atualizaHabilidade();
            danoFinal();
        }        
    }//GEN-LAST:event_jCheckBoxEspItemStateChanged

    private void jCheckBoxEsqItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxEsqItemStateChanged
        if (jCheckBoxEsq.isSelected()) {
            jTextFieldEsq.setText("1");
            jTextFieldEsq.setEnabled(true);
            atualizaHabilidade();
            danoFinal();
        } else {
            jTextFieldEsq.setText("0");
            jTextFieldEsq.setEnabled(false);
            atualizaHabilidade();
            danoFinal();
        }        
    }//GEN-LAST:event_jCheckBoxEsqItemStateChanged

    private void jCheckBoxVelItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVelItemStateChanged
        if (jCheckBoxVel.isSelected()) {
            jTextFieldVel.setText("1");
            jTextFieldVel.setEnabled(true);
            atualizaHabilidade();
            danoFinal();
        } else {
            jTextFieldVel.setText("0");
            jTextFieldVel.setEnabled(false);
            atualizaHabilidade();
            danoFinal();
        }        
    }//GEN-LAST:event_jCheckBoxVelItemStateChanged

    private void jCheckBoxTenItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxTenItemStateChanged
        if (jCheckBoxTen.isSelected()) {
            jTextFieldTen.setText("1");
            jTextFieldTen.setEnabled(true);
            atualizaHabilidade();
            danoFinal();
        } else {
            jTextFieldTen.setText("0");
            jTextFieldTen.setEnabled(false);
            atualizaHabilidade();
            danoFinal();
        }        
    }//GEN-LAST:event_jCheckBoxTenItemStateChanged

    private void jCheckBoxAopItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxAopItemStateChanged
        if (jCheckBoxAop.isSelected()) {
            jTextFieldAop.setText("1");
            jTextFieldAop.setEnabled(true);
            atualizaHabilidade();
            danoFinal();
        } else {
            jTextFieldAop.setText("0");
            jTextFieldAop.setEnabled(false);
            atualizaHabilidade();
            danoFinal();
        }        
    }//GEN-LAST:event_jCheckBoxAopItemStateChanged

    private void jCheckBoxMopItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxMopItemStateChanged
        if (jCheckBoxMop.isSelected()) {
            jTextFieldMop.setText("1");
            jTextFieldMop.setEnabled(true);
            atualizaHabilidade();
            danoFinal();
        } else {
            jTextFieldMop.setText("0");
            jTextFieldMop.setEnabled(false);
            atualizaHabilidade();
            danoFinal();
        }        
    }//GEN-LAST:event_jCheckBoxMopItemStateChanged

    private void jCheckBoxCdnItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxCdnItemStateChanged
        if (jCheckBoxCdn.isSelected()) {
            jTextFieldCdn.setText("1");
            jTextFieldCdn.setEnabled(true);
            atualizaHabilidade();
            danoFinal();
        } else {
            jTextFieldCdn.setText("0");
            jTextFieldCdn.setEnabled(false);
            atualizaHabilidade();
            danoFinal();
        }        
    }//GEN-LAST:event_jCheckBoxCdnItemStateChanged

    private void jCheckBoxRestricaoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxRestricaoItemStateChanged
        if (jCheckBoxRestricao.isSelected()) {
            jTextFieldRestricao.setEnabled(true);
        } else {
            jTextFieldRestricao.setText("1.0");
            jTextFieldRestricao.setEnabled(false);
        }        
    }//GEN-LAST:event_jCheckBoxRestricaoItemStateChanged

    private void jLabel15MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel15MouseEntered
        jLabel15.setToolTipText("Acerto bonus da habilidade");
    }//GEN-LAST:event_jLabel15MouseEntered

    private void jTextFieldAcertoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldAcertoFocusGained
        jTextFieldAcerto.selectAll();
    }//GEN-LAST:event_jTextFieldAcertoFocusGained

    private void jTextFieldAcertoMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextFieldAcertoMouseEntered
        jTextFieldAcerto.setToolTipText("Acerto bonus da habilidade");
    }//GEN-LAST:event_jTextFieldAcertoMouseEntered

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        new ViewNenCorpo().setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        if (jComboBoxHabilidades.getSelectedItem().toString().equals("NOVA")) {
            JOptionPane.showMessageDialog(null, "Escolha uma habilidade primeiro!",
                    "Error!", JOptionPane.INFORMATION_MESSAGE);
            
            return;
        }
        // lendo o nome do personagem
        // retorna true se atacante for um nome valido
        String nomePer = jTextFieldNome.getText().toUpperCase();
        if (!AlgoritmoPrincipalHabilidades.containsFicha(nomePer)) {
            JOptionPane.showMessageDialog(null, "N√£o foi encontrado um personagem com esse nome\n" +
                    "Insira o nome do personagem desejado no campo Nome", "Error!", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        String nomeSkill = jComboBoxHabilidades.getSelectedItem().toString();
        
        switch (JOptionPane.showConfirmDialog(null, "Deseja deletar essa habilidade?",
                "Warning!", JOptionPane.YES_NO_OPTION)) {
            
            case 0:
                // deletando ficha
                AlgoritmoPrincipalHabilidades.removeHabilidade(nomeSkill, nomePer);
                
                // mensagem ao usuario
                JOptionPane.showMessageDialog(null, "Habilidade removida com sucesso!",
                        "Success!", JOptionPane.INFORMATION_MESSAGE);
                
                // salvando banco de dados
                File folder = new File(algoritmos.batalhas.AlgoritmoPrincipal.getDIR_FICHAS());
                try {
                    AlgoritmoPrincipalHabilidades.saveFichas(folder);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(ViewPrincipalHabilidades.class.getName()).log(Level.SEVERE, null, ex);
                }
                
                // mensagem ao usuario
                JOptionPane.showMessageDialog(null, "Banco de dados salvo com sucesso!",
                        "Success!", JOptionPane.INFORMATION_MESSAGE);
                break;

        }
        
        // reiniciando
        setNome();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        Habilidades habilidade = AlgoritmoPrincipalHabilidades.getHabilidade();
        if (habilidade == null) {
            JOptionPane.showMessageDialog(null, "Primeiro escolha uma habilidade!", "Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        new View_breveDescricao(null, true).setVisible(true);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jComboBoxArmasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxArmasItemStateChanged
        atualizaArmas();
    }//GEN-LAST:event_jComboBoxArmasItemStateChanged

    private void jTextFieldRyuFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldRyuFocusGained
        jTextFieldRyu.selectAll();
    }//GEN-LAST:event_jTextFieldRyuFocusGained

    private void jComboBoxElementosItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxElementosItemStateChanged
        if (AlgoritmoPrincipalHabilidades.isComboBoxLocked()) {
            return;
        }

        String nome = jComboBoxElementos.getSelectedItem().toString();
        jLabelElemento.setText(nome);
        if (nome.equals("Nenhum")) {
            jLabelDadoElemento.setText("0");
            jLabelDanoElemental.setText("0");
        } else {
            Armas arma = CalculadoraHabilidades.getElemento(nome);

            jLabelDadoElemento.setText(arma.getDados());
            jLabelDanoElemental.setText("+" + String.valueOf(arma.getDano()));
        }

        atualizaHabilidade();
        danoFinal();
    }//GEN-LAST:event_jComboBoxElementosItemStateChanged

    private void jTextFieldAuraBonusFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldAuraBonusFocusGained
        jTextFieldAuraBonus.selectAll();
    }//GEN-LAST:event_jTextFieldAuraBonusFocusGained

    private void jRadioButtonNenhumItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonNenhumItemStateChanged
        if (jRadioButtonNenhum.isSelected()) {
            jTextFieldAuraBonus.setText("0");
            jTextFieldAuraBonus.setEnabled(false);
        }
    }//GEN-LAST:event_jRadioButtonNenhumItemStateChanged

    private void jRadioButtonManItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonManItemStateChanged
        if (jRadioButtonMan.isSelected()) {
            Ficha ficha = AlgoritmoPrincipalHabilidades.getFicha();
            int perMan = ficha.getPerMan();
//            double restricao = Double.parseDouble(jTextFieldRestricao.getText());
            double restricao = 1;
            
            jTextFieldAuraBonus.setText(String.valueOf((int) (restricao * perMan)));
            jTextFieldAuraBonus.setEnabled(true);
        }
    }//GEN-LAST:event_jRadioButtonManItemStateChanged

    private void jRadioButtonMatItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioButtonMatItemStateChanged
        if (jRadioButtonMat.isSelected()) {
            Ficha ficha = AlgoritmoPrincipalHabilidades.getFicha();
            int perMat = ficha.getPerMat();
//            double restricao = Double.parseDouble(jTextFieldRestricao.getText());
            double restricao = 1;
            
            jTextFieldAuraBonus.setText(String.valueOf((int) (restricao * perMat)));
            jTextFieldAuraBonus.setEnabled(true);
        }
    }//GEN-LAST:event_jRadioButtonMatItemStateChanged
    
    private void habilitarCampos() {
        // dados iniciais
        jTextFieldLvl.setEnabled(true);
        jTextFieldVol.setEnabled(true);
        jTextFieldQtd.setEnabled(true);
        jTextFieldDano.setEnabled(true);
        jTextFieldAcerto.setEnabled(true);
        
        jCheckBoxRestricao.setEnabled(true);
//        jCheckBoxTipoEms.setEnabled(true);
        
        // pericias
        jCheckBoxFor.setEnabled(true);
        jCheckBoxCon.setEnabled(true);
        jCheckBoxDex.setEnabled(true);
        jCheckBoxInt.setEnabled(true);
        jCheckBoxCar.setEnabled(true);
        jCheckBoxMen.setEnabled(true);
        
        // atributos nen
        jCheckBoxRef.setEnabled(true);
        jCheckBoxEms.setEnabled(true);
        jCheckBoxMan.setEnabled(true);
        jCheckBoxMat.setEnabled(true);
        jCheckBoxTrs.setEnabled(true);
        jCheckBoxEsp.setEnabled(true);
        
        // outros
        jCheckBoxEsq.setEnabled(true);
        jCheckBoxVel.setEnabled(true);
        jCheckBoxTen.setEnabled(true);
        jCheckBoxAop.setEnabled(true);
        jCheckBoxMop.setEnabled(true);
        jCheckBoxCdn.setEnabled(true);
        
        // armas
        jComboBoxArmas.setEnabled(true);
        jCheckBoxPerfurante.setEnabled(true);
        
        // proficiencia
        jComboBoxPro.setEnabled(true);
        
        // aura bonus
        jRadioButtonMan.setEnabled(true);
        jRadioButtonMat.setEnabled(true);
        
        // finalizar
        jButtonSalvar.setEnabled(true);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewPrincipalHabilidades.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new ViewPrincipalHabilidades().setVisible(true);
            } catch (IOException | ClassNotFoundException ex) {
                Logger.getLogger(ViewPrincipalHabilidades.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup auraBonus;
    private javax.swing.JButton jButtonComecar;
    private javax.swing.JButton jButtonNome;
    private javax.swing.JButton jButtonSalvar;
    private javax.swing.JCheckBox jCheckBoxAop;
    private javax.swing.JCheckBox jCheckBoxAtkPad;
    private javax.swing.JCheckBox jCheckBoxCar;
    private javax.swing.JCheckBox jCheckBoxCdn;
    private javax.swing.JCheckBox jCheckBoxCon;
    private javax.swing.JCheckBox jCheckBoxDanoRebote;
    private javax.swing.JCheckBox jCheckBoxDefPad;
    private javax.swing.JCheckBox jCheckBoxDex;
    private javax.swing.JCheckBox jCheckBoxEms;
    private javax.swing.JCheckBox jCheckBoxEsp;
    private javax.swing.JCheckBox jCheckBoxEsq;
    private javax.swing.JCheckBox jCheckBoxFor;
    private javax.swing.JCheckBox jCheckBoxGastaRyu;
    private javax.swing.JCheckBox jCheckBoxInt;
    private javax.swing.JCheckBox jCheckBoxMan;
    private javax.swing.JCheckBox jCheckBoxMat;
    private javax.swing.JCheckBox jCheckBoxMen;
    private javax.swing.JCheckBox jCheckBoxMop;
    private javax.swing.JCheckBox jCheckBoxPerfurante;
    private javax.swing.JCheckBox jCheckBoxRef;
    private javax.swing.JCheckBox jCheckBoxRestricao;
    private javax.swing.JCheckBox jCheckBoxTen;
    private javax.swing.JCheckBox jCheckBoxTipoEms;
    private javax.swing.JCheckBox jCheckBoxTrs;
    private javax.swing.JCheckBox jCheckBoxVel;
    private javax.swing.JComboBox<String> jComboBoxArmas;
    private javax.swing.JComboBox<String> jComboBoxElementos;
    private javax.swing.JComboBox<String> jComboBoxHabilidades;
    private javax.swing.JComboBox<String> jComboBoxNivelElemental;
    private javax.swing.JComboBox<String> jComboBoxPro;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelCrit;
    private javax.swing.JLabel jLabelDado;
    private javax.swing.JLabel jLabelDadoElemento;
    private javax.swing.JLabel jLabelDanoArma;
    private javax.swing.JLabel jLabelDanoElemental;
    private javax.swing.JLabel jLabelDanoFinal;
    private javax.swing.JLabel jLabelDanoPro;
    private javax.swing.JLabel jLabelElemento;
    private javax.swing.JLabel jLabelPerf;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JRadioButton jRadioButtonMan;
    private javax.swing.JRadioButton jRadioButtonMat;
    private javax.swing.JRadioButton jRadioButtonNenhum;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField jTextFieldAcerto;
    private javax.swing.JTextField jTextFieldAop;
    private javax.swing.JTextField jTextFieldAuraBonus;
    private javax.swing.JTextField jTextFieldCar;
    private javax.swing.JTextField jTextFieldCdn;
    private javax.swing.JTextField jTextFieldCon;
    private javax.swing.JTextField jTextFieldDano;
    private javax.swing.JTextField jTextFieldDex;
    private javax.swing.JTextField jTextFieldEms;
    private javax.swing.JTextField jTextFieldEsp;
    private javax.swing.JTextField jTextFieldEsq;
    private javax.swing.JTextField jTextFieldFor;
    private javax.swing.JTextField jTextFieldInt;
    private javax.swing.JTextField jTextFieldLvl;
    private javax.swing.JTextField jTextFieldMan;
    private javax.swing.JTextField jTextFieldMat;
    private javax.swing.JTextField jTextFieldMen;
    private javax.swing.JTextField jTextFieldMop;
    private javax.swing.JTextField jTextFieldNome;
    private javax.swing.JTextField jTextFieldNomeHabilidade;
    private javax.swing.JTextField jTextFieldQtd;
    private javax.swing.JTextField jTextFieldRef;
    private javax.swing.JTextField jTextFieldRestricao;
    private javax.swing.JTextField jTextFieldRyu;
    private javax.swing.JTextField jTextFieldTen;
    private javax.swing.JTextField jTextFieldTrs;
    private javax.swing.JTextField jTextFieldVel;
    private javax.swing.JTextField jTextFieldVol;
    // End of variables declaration//GEN-END:variables
}
