/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.batalhas;

import algoritmos.batalhas.AlgoritmoPrincipal;
//import com.sun.glass.events.KeyEvent;
import ficha_personagem.Iniciativa;
import java.awt.event.KeyEvent;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 422UR4H
 */
public class ViewIniciativa extends javax.swing.JFrame {

    /**
     * Creates new form ViewIniciativa
     */
    public ViewIniciativa() {
        initComponents();
        
        
        // MEU CODIGO
        
        Map<String, Iniciativa> iniciativa = AlgoritmoPrincipal.getIniciativa();
        if (iniciativa == null) {
            return;
        }
        
        for (int i = 0; i < iniciativa.size(); i++) {
            
        }
        
        // FIM DO MEU CODIGO
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jButtonAdd = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldNick = new javax.swing.JTextField();
        jButtonCloseOpen = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButtonClose = new javax.swing.JButton();
        jButtonRmv = new javax.swing.JButton();
        jTextFieldDado = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Iniciativa");

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));

        jPanel2.setBackground(new java.awt.Color(102, 102, 102));

        jButtonAdd.setBackground(new java.awt.Color(102, 102, 102));
        jButtonAdd.setText("Adicionar");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("Rolagem do dado:");

        jTextFieldNick.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldNick.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldNick.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldNick.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldNick.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldNick.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldNickFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldNickFocusLost(evt);
            }
        });

        jButtonCloseOpen.setBackground(new java.awt.Color(102, 102, 102));
        jButtonCloseOpen.setText("Fechar e Abrir");
        jButtonCloseOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseOpenActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(102, 102, 102));
        jLabel1.setText("Nome do personagem:");

        jButtonClose.setBackground(new java.awt.Color(102, 102, 102));
        jButtonClose.setText("Fechar");
        jButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });

        jButtonRmv.setBackground(new java.awt.Color(102, 102, 102));
        jButtonRmv.setText("Remover");
        jButtonRmv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRmvActionPerformed(evt);
            }
        });

        jTextFieldDado.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldDado.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldDado.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldDado.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldDado.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldDado.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldDadoFocusGained(evt);
            }
        });
        jTextFieldDado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldDadoKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jTextFieldDado, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonRmv, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonClose, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonCloseOpen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldNick, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldNick, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldDado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonAdd))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonRmv)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCloseOpen)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonClose)
                .addContainerGap())
        );

        jPanel4.setBackground(new java.awt.Color(51, 51, 51));

        jTable.setBackground(new java.awt.Color(51, 51, 51));
        jTable.setForeground(new java.awt.Color(0, 255, 0));
        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Num", "Nome", "Teste"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable.setSelectionBackground(new java.awt.Color(0, 255, 255));
        jTable.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jScrollPane2.setViewportView(jTable);
        if (jTable.getColumnModel().getColumnCount() > 0) {
            jTable.getColumnModel().getColumn(0).setPreferredWidth(40);
            jTable.getColumnModel().getColumn(1).setPreferredWidth(80);
            jTable.getColumnModel().getColumn(2).setPreferredWidth(50);
        }

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addGap(0, 0, 0))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTextFieldNickFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldNickFocusGained
        jTextFieldNick.selectAll();
    }//GEN-LAST:event_jTextFieldNickFocusGained

    private void jTextFieldNickFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldNickFocusLost
//        // testando se o personagem existe
//        String nomePer = jTextFieldNick.getText().toUpperCase();
//        // retorna true se for um nome valido
//        if (!AlgoritmoPrincipal.containsPersonagem(nomePer)) {
//            JOptionPane.showMessageDialog(null, "Não foi encontrado um personagem com esse nome",
//                    "Error!", JOptionPane.WARNING_MESSAGE);
//            jTextFieldNick.selectAll();
//        }
    }//GEN-LAST:event_jTextFieldNickFocusLost

    private void jTextFieldDadoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldDadoFocusGained
        jTextFieldDado.selectAll();
    }//GEN-LAST:event_jTextFieldDadoFocusGained
    
    /*private void ordenaTable() {
        DefaultTableModel dtm = (DefaultTableModel) jTable.getModel();
        
        for (int i = 0; i < jTable.getRowCount(); i++) {
            for (int j = i + 1; j < jTable.getRowCount(); j++) {
                Object[] temp = { dtm.getValueAt(i, 0), dtm.getValueAt(i, 1), dtm.getValueAt(i, 2) };
                Object[] maiorTeste = { dtm.getValueAt(j, 0), dtm.getValueAt(j, 1), dtm.getValueAt(j, 2) };
                
                if ((int) dtm.getValueAt(j, 2) > (int) dtm.getValueAt(i, 2)) {
                    
                    dtm.removeRow(i);
                    dtm.insertRow(i, maiorTeste);
                    dtm.removeRow(j);
                    dtm.insertRow(j, temp);
                
                } else if ((int) dtm.getValueAt(j, 2) == (int) dtm.getValueAt(i, 2)) {
                    
                    switch (JOptionPane.showConfirmDialog(null,
                            dtm.getValueAt(j, 1)+" joga antes de "+dtm.getValueAt(i, 1)+"?",
                            "Responda antes de continuar!", JOptionPane.YES_NO_OPTION)) {
                        
                        case 0:
                            dtm.removeRow(i);
                            dtm.insertRow(i, maiorTeste);
                            dtm.removeRow(j);
                            dtm.insertRow(j, temp);
                            break;
                    }
                }
            }
        }
    }*/
    
    private void atualizaPosicoes() {
        DefaultTableModel dtm = (DefaultTableModel) jTable.getModel();
        for (int i = 0; i < dtm.getRowCount(); i++) {
            if (dtm.getValueAt(i, 2) == null) {
                break;
            }
            dtm.setValueAt(i + 1, i, 0);
        }
    }
    
    private void ordenaTable(String nick, int teste) {
        DefaultTableModel dtm = (DefaultTableModel) jTable.getModel();
        int i;
        for (i = 0; i < jTable.getRowCount(); i++) {
            if (dtm.getValueAt(i, 2) == null) {
                break;
            }
            if (teste > (int) dtm.getValueAt(i, 2)) {

                Object[] vetor = { i + 1, nick, teste };
                dtm.insertRow(i, vetor);
                atualizaPosicoes();
                return;

            } else if (teste == (int) dtm.getValueAt(i, 2)) {

                Object[] vetor = new Object[3];
                switch (JOptionPane.showConfirmDialog(null,
                        nick+" joga antes de "+dtm.getValueAt(i, 1)+"?",
                        "Responda antes de continuar!", JOptionPane.YES_NO_OPTION)) {

                    case 0:
                        vetor[0] = i + 1;
                        vetor[1] = nick;
                        vetor[2] = teste;
                        dtm.insertRow(i, vetor);
                        atualizaPosicoes();
                        break;
                    case 1:
                        i++;
                        vetor[0] = i + 1;
                        vetor[1] = nick;
                        vetor[2] = teste;
                        dtm.insertRow(i, vetor);
                        atualizaPosicoes();
                        break;
                }
                return;
            }
        }
        Object[] vetor = { i + 1, nick, teste };
        dtm.insertRow(i, vetor);
    }
    
    private void setIniciativa() {
        Map<String, Iniciativa> iniciativa = new HashMap<>();
        DefaultTableModel dtm = (DefaultTableModel) jTable.getModel();
        
        // passando os valores da tabela para iniciativa
        for (int i = 0; i < dtm.getRowCount(); i++) {
            if (dtm.getValueAt(i, 0) == null || dtm.getValueAt(i, 2) == null) {
                break;
            }
            Iniciativa ini = new Iniciativa();
            ini.setPosicao((int) dtm.getValueAt(i, 0));
            ini.setTeste((int) dtm.getValueAt(i, 2));
            iniciativa.put(dtm.getValueAt(i, 1).toString(), ini);
        }
        
        // setando iniciativa em algoritmo principal
        AlgoritmoPrincipal.setIniciativa(iniciativa);
    }
    
    private boolean validarDado() {
        int dado;
        try {
            dado = Integer.parseInt(jTextFieldDado.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Entre com um numero inteito válido",
                    "Error!", JOptionPane.ERROR_MESSAGE);
            
            return false;
        }
        if (dado < 1 || dado > 20) {
            JOptionPane.showMessageDialog(null, "O valor do dado deve ser um inteiro entre 1 e 20!",
                    "Logic Error!", JOptionPane.ERROR_MESSAGE);
            
            return false;
        }
        return true;
    }
    
    private void adicionar() {
        // testando se o personagem existe
        String nomePer = jTextFieldNick.getText().toUpperCase();
        // retorna true se for um nome valido
        if (!AlgoritmoPrincipal.containsPersonagem(nomePer)) {
            JOptionPane.showMessageDialog(null, "Não foi encontrado um personagem com esse nome",
                    "Error!", JOptionPane.WARNING_MESSAGE);
            jTextFieldNick.selectAll();
            return;
        }
        // testando se o personagem ja esta setado
        for (int i = 0; i < jTable.getRowCount(); i++) {
            if (jTable.getValueAt(i, 1) == null) {
                break;
            }
            if (nomePer.equals(jTable.getValueAt(i, 1).toString())) {
                JOptionPane.showMessageDialog(null, "Personagem já setado!",
                        "Error!", JOptionPane.WARNING_MESSAGE);
                jTextFieldNick.selectAll();
                return;
            }
        }
        
        if (!validarDado()) {
            jTextFieldDado.selectAll();
            return;
        }
        int dado = Integer.parseInt(jTextFieldDado.getText());
        
        // começando
        int teste = dado + AlgoritmoPrincipal.getFicha(nomePer).getIni();
        
        ordenaTable(nomePer, teste);
        setIniciativa();
    }
        
    private void jTextFieldDadoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldDadoKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            adicionar();
        }
    }//GEN-LAST:event_jTextFieldDadoKeyPressed

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed
        adicionar();
    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jButtonRmvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRmvActionPerformed
        DefaultTableModel dtm = (DefaultTableModel) jTable.getModel();
        try {
            dtm.removeRow(jTable.getSelectedRow());
        } catch (NullPointerException | ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(null, "Selecione uma linha primeiro!",
                    "Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        // atualizando posicoes e salvando alteração em algoritmo principal
        atualizaPosicoes();
        setIniciativa();
    }//GEN-LAST:event_jButtonRmvActionPerformed

    private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButtonCloseActionPerformed

    private void jButtonCloseOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseOpenActionPerformed
        new ViewPosicoes().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButtonCloseOpenActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewIniciativa.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ViewIniciativa().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonClose;
    private javax.swing.JButton jButtonCloseOpen;
    private javax.swing.JButton jButtonRmv;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable;
    private javax.swing.JTextField jTextFieldDado;
    private javax.swing.JTextField jTextFieldNick;
    // End of variables declaration//GEN-END:variables
}
