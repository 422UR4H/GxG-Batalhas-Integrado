/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.gerador;

import algoritmos.gerador.AlgoritmoPrincipalGerador;
import algoritmos.batalhas.AlgoritmoPrincipal;
import ficha_personagem.Ficha;
import ficha_personagem.Habilidades;
import ficha_personagem.LvlBonus;
import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;

/**
 *
 * @author 422UR4H
 */
public class View_nomeFicha extends javax.swing.JDialog {

    /**
     * Creates new form View_nomeFicha
     * @param parent
     * @param modal
     */
    public View_nomeFicha(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldNome = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Replicar");
        setResizable(false);

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        jLabel1.setText("Nome da ficha réplica");

        jTextFieldNome.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldNome.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldNome.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldNome.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldNome.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldNome.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldNomeKeyPressed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(102, 102, 102));
        jButton1.setText("Salvar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldNome, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addGap(11, 11, 11))
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void salvar() {
        // testar se ja existe ficha com esse nome
        // controlando nomes repetidos
        String nomePer = jTextFieldNome.getText().toUpperCase();
        if (AlgoritmoPrincipal.containsFicha(nomePer)) {
            JOptionPane.showMessageDialog(null, "Já existe um personagem com esse nome!",
                    "Error!", JOptionPane.WARNING_MESSAGE);
            
            jTextFieldNome.selectAll();
            return;
        }
        if (nomePer.equals("NULL") || nomePer.equals("NOVO")) {
            JOptionPane.showMessageDialog(null, "Esse nome não é válido!",
                    "Error!", JOptionPane.WARNING_MESSAGE);
            
            jTextFieldNome.selectAll();
            return;
        }
        
        // duplicar ficha
        // instanciando uma nova ficha
        Ficha ficha2 = new Ficha();
        Ficha ficha = AlgoritmoPrincipalGerador.getFicha();
        
        ficha2.setNick(nomePer);
        ficha2.setNome(ficha.getNome());
        ficha2.setClasse(ficha.getClasse());
        ficha2.setNen(ficha.getNen());
        ficha2.setTendencia(ficha.getTendencia());
        ficha2.setHunter(ficha.getHunter());
        ficha2.setDias(ficha.getDias());
        ficha2.setIdade(ficha.getIdade());
        ficha2.setAltura(ficha.getAltura());
        ficha2.setPeso(ficha.getPeso());
        ficha2.setInventario(ficha.getInventario());
        ficha2.setDescricao(ficha.getDescricao());
        ficha2.setDescricaoBreve(ficha.getDescricaoBreve());
        
        ficha2.setIniFor(ficha.getIniFor());
        ficha2.setIniCon(ficha.getIniCon());
        ficha2.setIniDex(ficha.getIniDex());
        ficha2.setIniInt(ficha.getIniInt());
        ficha2.setIniCar(ficha.getIniCar());
        ficha2.setIniMen(ficha.getIniMen());
        
        ficha2.setValFor(ficha.getValFor());
        ficha2.setValCon(ficha.getValCon());
        ficha2.setValDex(ficha.getValDex());
        ficha2.setValInt(ficha.getValInt());
        ficha2.setValCar(ficha.getValCar());
        ficha2.setValMen(ficha.getValMen());
        
        ficha2.setModFor(ficha.getModFor());
        ficha2.setModCon(ficha.getModCon());
        ficha2.setModDex(ficha.getModDex());
        ficha2.setModInt(ficha.getModInt());
        ficha2.setModCar(ficha.getModCar());
        ficha2.setModMen(ficha.getModMen());
        
        ficha2.setbFor(ficha.getbFor());
        ficha2.setbCon(ficha.getbCon());
        ficha2.setbDex(ficha.getbDex());
        ficha2.setbInt(ficha.getbInt());
        ficha2.setbCar(ficha.getbCar());
        ficha2.setbMen(ficha.getbMen());
        
        ficha2.setPerFor(ficha.getPerFor());
        ficha2.setPerCon(ficha.getPerCon());
        ficha2.setPerDex(ficha.getPerDex());
        ficha2.setPerInt(ficha.getPerInt());
        ficha2.setPerCar(ficha.getPerCar());
        ficha2.setPerMen(ficha.getPerMen());
        
        
        ficha2.setAtrRef(ficha.getAtrRef());
        ficha2.setAtrEms(ficha.getAtrEms());
        ficha2.setAtrMan(ficha.getAtrMan());
        ficha2.setAtrMat(ficha.getAtrMat());
        ficha2.setAtrTrs(ficha.getAtrTrs());
        ficha2.setAtrEsp(ficha.getAtrEsp());
        
        ficha2.setAtrCdn(ficha.getAtrCdn());
        ficha2.setModCdn(ficha.getModCdn());
        
        ficha2.setTen(ficha.getTen());
        ficha2.setAop(ficha.getAop());
        ficha2.setMop(ficha.getMop());
        ficha2.setRyu(ficha.getRyu());
        ficha2.setZts(ficha.getZts());
        ficha2.setEn(ficha.getEn());
        
        
        ficha2.setCoefHp(ficha.getCoefHp());
        ficha2.setModClas(ficha.getModClas());
        ficha2.setbIntCdn(ficha.getbIntCdn());
        
        ficha2.setLvl(ficha.getLvl());
        ficha2.setExp(ficha.getExp());
        ficha2.setExpBonus(ficha.getExpBonus());
        
        ficha2.setLvlNen(ficha.getLvlNen());
        ficha2.setExpNen(ficha.getExpNen());
        ficha2.setExpBonusNen(ficha.getExpBonusNen());
        
        ficha2.setIni(ficha.getIni());
        ficha2.setEsq(ficha.getEsq());
        ficha2.setApr(ficha.getApr());
        ficha2.setCrt(ficha.getCrt());
        ficha2.setVel(ficha.getVel());
        
        ficha2.setSorteDiaria(ficha.getSorteDiaria());
        ficha2.setSortePorLvl(ficha.isSortePorLvl());
        ficha2.resetSortes();
        
        ficha2.setPersonagemDeJogador(ficha.isPersonagemDeJogador());
        ficha2.setCriaturaDoMestre(ficha.isCriaturaDoMestre());
        
        for (String nome : ficha.getPro().keySet()) {
            LvlBonus lvlBonus = new LvlBonus();
            lvlBonus.setBonus(ficha.getPro().get(nome).getBonus());
            lvlBonus.setLvj(ficha.getPro().get(nome).getLvj());
            lvlBonus.setLvl(ficha.getPro().get(nome).getLvl());
            
            ficha2.putPro(nome, lvlBonus);
        }
        
        for (String nome : ficha.getPer().keySet()) {
            LvlBonus lvlBonus = new LvlBonus();
            lvlBonus.setBonus(ficha.getPer().get(nome).getBonus());
            lvlBonus.setLvj(ficha.getPer().get(nome).getLvj());
            lvlBonus.setLvl(ficha.getPer().get(nome).getLvl());
            
            ficha2.putPer(nome, lvlBonus);
        }
        
        ficha2.setHp();
        ficha2.setMop(ficha.getMop());
        
        ficha2.setPontosHeroicos(ficha.getPontosHeroicos());
        ficha2.setPontosInspiracao(ficha.getPontosInspiracao());
        
        ficha2.setShu(0);
        ficha2.setStun(0);
        ficha2.setDesmaiado(false);
        
        for (String nome : ficha.getHabilidades().keySet()) {
            Habilidades habilidade = new Habilidades();
            
            habilidade.setNome(nome);
            
            habilidade.setArma(ficha.getHabilidade(nome).getArma());
            habilidade.setDados(ficha.getHabilidade(nome).getDados());
            habilidade.setProficiencia(ficha.getHabilidade(nome).getProficiencia());
            habilidade.setDescricao(ficha.getHabilidade(nome).getDescricao());
            habilidade.setDescricaoBreve(ficha.getHabilidade(nome).getDescricaoBreve());
            habilidade.setRestricao(ficha.getHabilidade(nome).getRestricao());
            
            habilidade.setDano(ficha.getHabilidade(nome).getDano());
            habilidade.setDanoPorSegundo(ficha.getHabilidade(nome).getDanoPorSegundo());
            habilidade.setAuraBonus(ficha.getHabilidade(nome).getAuraBonus());
            habilidade.setTurnoDps(ficha.getHabilidade(nome).getTurnoDps());
            habilidade.setDecrescimoDpsPorTurno(ficha.getHabilidade(nome).getDecrescimoDpsPorTurno());
            
            habilidade.setQtd(ficha.getHabilidade(nome).getQtd());
            habilidade.setVol(ficha.getHabilidade(nome).getVol());
            habilidade.setCrt(ficha.getHabilidade(nome).getCrt());
            habilidade.setDanoFixo(ficha.getHabilidade(nome).getDanoFixo());
            habilidade.setAcertoFixo(ficha.getHabilidade(nome).getAcertoFixo());
            
            habilidade.setLvl(ficha.getHabilidade(nome).getLvl());
            habilidade.setSubLvl(ficha.getHabilidade(nome).getSubLvl());
            habilidade.setBonus(ficha.getHabilidade(nome).getBonus());
            
            
            habilidade.setPerfurante(ficha.getHabilidade(nome).isPerfurante());
            habilidade.setGastaAura(ficha.getHabilidade(nome).isGastaAura());
            habilidade.setTrs(ficha.getHabilidade(nome).isTrs());
            habilidade.setMat(ficha.getHabilidade(nome).isMat());
            habilidade.setMan(ficha.getHabilidade(nome).isMan());
            habilidade.setDps(ficha.getHabilidade(nome).isDps());
            habilidade.setRebote(ficha.getHabilidade(nome).isRebote());
            
            habilidade.setSomarFor(ficha.getHabilidade(nome).isSomarFor());
            habilidade.setSomarCon(ficha.getHabilidade(nome).isSomarCon());
            habilidade.setSomarDex(ficha.getHabilidade(nome).isSomarDex());
            habilidade.setSomarInt(ficha.getHabilidade(nome).isSomarInt());
            habilidade.setSomarCar(ficha.getHabilidade(nome).isSomarCar());
            habilidade.setSomarMen(ficha.getHabilidade(nome).isSomarMen());
            
            habilidade.setSomarRef(ficha.getHabilidade(nome).isSomarRef());
            habilidade.setSomarEms(ficha.getHabilidade(nome).isSomarEms());
            habilidade.setSomarMan(ficha.getHabilidade(nome).isSomarMan());
            habilidade.setSomarMat(ficha.getHabilidade(nome).isSomarMat());
            habilidade.setSomarTrs(ficha.getHabilidade(nome).isSomarTrs());
            habilidade.setSomarEsp(ficha.getHabilidade(nome).isSomarEsp());
            
            habilidade.setSomarTen(ficha.getHabilidade(nome).isSomarFor());
            habilidade.setSomarAop(ficha.getHabilidade(nome).isSomarCon());
            habilidade.setSomarMop(ficha.getHabilidade(nome).isSomarDex());
            habilidade.setSomarCdn(ficha.getHabilidade(nome).isSomarInt());
            habilidade.setSomarVel(ficha.getHabilidade(nome).isSomarCar());
            habilidade.setSomarEsq(ficha.getHabilidade(nome).isSomarMen());
            
            
            habilidade.setQtdFor(ficha.getHabilidade(nome).getQtdFor());
            habilidade.setQtdCon(ficha.getHabilidade(nome).getQtdCon());
            habilidade.setQtdDex(ficha.getHabilidade(nome).getQtdDex());
            habilidade.setQtdInt(ficha.getHabilidade(nome).getQtdInt());
            habilidade.setQtdCar(ficha.getHabilidade(nome).getQtdCar());
            habilidade.setQtdMen(ficha.getHabilidade(nome).getQtdMen());
            
            habilidade.setQtdRef(ficha.getHabilidade(nome).getQtdRef());
            habilidade.setQtdEms(ficha.getHabilidade(nome).getQtdEms());
            habilidade.setQtdMan(ficha.getHabilidade(nome).getQtdMan());
            habilidade.setQtdMat(ficha.getHabilidade(nome).getQtdMat());
            habilidade.setQtdTrs(ficha.getHabilidade(nome).getQtdTrs());
            habilidade.setQtdEsp(ficha.getHabilidade(nome).getQtdEsp());
            
            habilidade.setQtdTen(ficha.getHabilidade(nome).getQtdTen());
            habilidade.setQtdAop(ficha.getHabilidade(nome).getQtdAop());
            habilidade.setQtdMop(ficha.getHabilidade(nome).getQtdMop());
            habilidade.setQtdCdn(ficha.getHabilidade(nome).getQtdCdn());
            habilidade.setQtdEsq(ficha.getHabilidade(nome).getQtdEsq());
            habilidade.setQtdVel(ficha.getHabilidade(nome).getQtdVel());
            
            ficha2.putHabilidade(nome, habilidade);
        }
        
        // inserindo ficha
        AlgoritmoPrincipal.putFicha(ficha2);
        
        // mensagem ao usuario
        JOptionPane.showMessageDialog(null, "Ficha duplicada com sucesso!\nBanco de dados salvo com sucesso!",
                "Success!", JOptionPane.INFORMATION_MESSAGE);
        
        // fechando
        this.dispose();
    }
    
    private void jTextFieldNomeKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldNomeKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            salvar();
        }
    }//GEN-LAST:event_jTextFieldNomeKeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        salvar();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(View_nomeFicha.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(() -> {
            View_nomeFicha dialog = new View_nomeFicha(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldNome;
    // End of variables declaration//GEN-END:variables
}
