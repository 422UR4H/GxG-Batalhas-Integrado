/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.batalhas;

import algoritmos.batalhas.AlgoritmoPrincipal;
import algoritmos.batalhas.Calculadora;
import algoritmos.dal.ModuloConexao;
import algoritmos.ficha.AlgoritmoPrincipalFicha;
import algoritmos.habilidades.CalculadoraHabilidades;
import ficha_personagem.Ficha;
import java.awt.event.KeyEvent;
import javax.swing.JOptionPane;
import ficha_personagem.Classes;
import ficha_personagem.Habilidades;
//import ficha_personagem.InfoPerson;
import ficha_personagem.InfoTurno;
//import ficha_personagem.SkillPadrao;
import ficha_personagem.TreinoPosBatalha;
import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;
import view.habilidades.ViewPrincipalHabilidades;
import view.trainer.ViewPrincipalTrainer;

import java.sql.*;
import view.ficha.ViewFicha;

/**
 *
 * @author 422UR4H
 */
public class ViewPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form ViewPrincipal
     * @throws java.io.IOException
     * @throws java.io.FileNotFoundException
     * @throws java.lang.ClassNotFoundException
     */
    public ViewPrincipal() throws IOException, FileNotFoundException, ClassNotFoundException,
                                  FileNotFoundException, ClassNotFoundException {
        
        initComponents();
        
        
        // MEU CODIGO AQUI
        
        // mudando a cor das jProgressBar
        // grande parte desse codigo foi escrito pelo NetBeans
        /*try {
            UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
        } catch (InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(ViewPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }*/
        
        /*// carregando personagens
        try {
            if (!AlgoritmoPrincipal.loadFichas()) {
                JOptionPane.showMessageDialog(null, "Banco de dados de Fichas não encontrado!",
                        "Error!", JOptionPane.ERROR_MESSAGE);
            }
        } catch (FileNotFoundException | ClassNotFoundException ex) {
            Logger.getLogger(ViewPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ViewPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }*/

        
        // carregando Classes
        Classes.init();
        
        // carregando fichas
//        File folder = new File(AlgoritmoPrincipal.getDIR_FICHAS());
//        if (!AlgoritmoPrincipal.loadFichas(folder)) {
        if (!AlgoritmoPrincipal.loadFichas()) {
            JOptionPane.showMessageDialog(null, "Banco de dados não encontrado!",
                    "Error!", JOptionPane.ERROR_MESSAGE);
            
            // o dispose não funciona
            this.dispose();
            return;
        }
        
        // CODIGO PARA ATUALIZAR VALORES
//        for (String nick : AlgoritmoPrincipal.getFichas().keySet()) {
//            // linha principal
//            AlgoritmoPrincipal.getFicha(nick).setHp();
//        }
//        AlgoritmoPrincipal.saveFichas(folder);
        
        
        // carregando ataque e defesa padrão
//        AlgoritmoPrincipal.loadAtkPad();
//        AlgoritmoPrincipal.loadDefPad();
        
        // carregando tabelas de exp
        AlgoritmoPrincipal.loadTabelasExp();
        
        // carregando HPs e MOPs
//        AlgoritmoPrincipal.loadHps();
//        AlgoritmoPrincipal.loadMops();
        if (!AlgoritmoPrincipal.loadInfo()) {
            System.out.println("Não foi possível carregar hps e mops");
        }
        
        // limpando info (inicializando InfoTurno e infoTurno de AlgoritmoPrincipal
        AlgoritmoPrincipal.salvarTurno();
        
        // desativando jTextFieldQtdCriticoDefensor
        jTextFieldQtdCriticoDefensor.setEnabled(false);
        jTableRyuAtacante.setEnabled(false);
        jTableRyuDefensor.setEnabled(false);
        
        
//        AlgoritmoPrincipal.saveFichas();
        
        
        // FIM DO MEU CODIGO AQUI
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabelAtk = new javax.swing.JLabel();
        jTextFieldAtacante = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldShuAtacante = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextFieldRyuAtacante = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextFieldQtdAtaqueAtacante = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jTextFieldQtdCriticoAtacante = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldAuraBonusAtacante = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jTextFieldQtdAcertoAtacante = new javax.swing.JTextField();
        jButtonEditaCorpoAtacante = new javax.swing.JButton();
        jLabelAtaque = new javax.swing.JLabel();
        jCheckBoxUsouRenAtacante = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabelDanoAtaqueAtacante = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabelVolumeAtaqueAtacante = new javax.swing.JLabel();
        jTextFieldDadoAtacante = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jLabelAuraBonusAtacante = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabelCorpoAtacante = new javax.swing.JLabel();
        jCheckBoxDanoCritico = new javax.swing.JCheckBox();
        jLabelAuraBonusCalculadaAtacante = new javax.swing.JLabel();
        jButtonOkAtacante = new javax.swing.JButton();
        jLabelAtacante = new javax.swing.JLabel();
        jCheckBoxGastouRyuAtacante = new javax.swing.JCheckBox();
        jComboBoxAtacante = new javax.swing.JComboBox<>();
        jComboBoxNenAtacante = new javax.swing.JComboBox<>();
        jButtonCurarAtacante = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jButtonCalcularAtaque = new javax.swing.JButton();
        jLabelImagemPerfilAtacante = new javax.swing.JLabel();
        jProgressBarHpAtacante = new javax.swing.JProgressBar();
        jProgressBarMopAtacante = new javax.swing.JProgressBar();
        jButtonDesfazer = new javax.swing.JButton();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabelDF = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabelAtacante2 = new javax.swing.JLabel();
        jButtonRenDeReflexoAtacante = new javax.swing.JButton();
        jButtonCurarHpAtacante1 = new javax.swing.JButton();
        jButtonCurarMopAtacante1 = new javax.swing.JButton();
        jButtonGastarMopAtacante = new javax.swing.JButton();
        jLabelNomePersonagemAtacante = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabelDefensor2 = new javax.swing.JLabel();
        jButtonRenDeReflexoDefensor = new javax.swing.JButton();
        jButtonCurarHpDefensor1 = new javax.swing.JButton();
        jButtonCurarMopDefensor1 = new javax.swing.JButton();
        jButtonGastarMopDefensor = new javax.swing.JButton();
        jButtonRodarTurno = new javax.swing.JButton();
        jButtonInverterJogadores = new javax.swing.JButton();
        jCheckBoxDanoPerfurante = new javax.swing.JCheckBox();
        jCheckBoxDanoRebote = new javax.swing.JCheckBox();
        jButtonInvestida = new javax.swing.JButton();
        jLabel31 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel83 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabelHpAtualAtacante = new javax.swing.JLabel();
        jLabelHpFinalAtacante = new javax.swing.JLabel();
        jLabelDanoFinal = new javax.swing.JLabel();
        jLabelInvestidaAtacante = new javax.swing.JLabel();
        jLabelInvestidaDefensor = new javax.swing.JLabel();
        jLabelInvestidaTotal = new javax.swing.JLabel();
        jLabelDefesaCalculada = new javax.swing.JLabel();
        jLabelDanoInicial = new javax.swing.JLabel();
        jLabelImagemPerfilDefensor = new javax.swing.JLabel();
        jProgressBarHpDefensor = new javax.swing.JProgressBar();
        jProgressBarMopDefensor = new javax.swing.JProgressBar();
        jLabelNomePersonagemDefensor = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabelHpFinalDefensor = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabelHpAtualDefensor = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jButtonRefazer = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jButtonMostrarExtensoes = new javax.swing.JButton();
        jButtonMostrarKens = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jButtonMostrarMops = new javax.swing.JButton();
        jButtonMostrarHps = new javax.swing.JButton();
        jButtonEditarMopAtacante = new javax.swing.JButton();
        jButtonOperarMopAtacante = new javax.swing.JButton();
        jButtonEditarHpAtacante = new javax.swing.JButton();
        jButtonOperarHpAtacante = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jButtonExecutarEditor = new javax.swing.JButton();
        jButtonSair = new javax.swing.JButton();
        jLabel39 = new javax.swing.JLabel();
        jButtonCurarHpsEMops = new javax.swing.JButton();
        jButtonSalvarHpsEMops = new javax.swing.JButton();
        jButtonExecutarEditor1 = new javax.swing.JButton();
        jButtonExecutarTrainer = new javax.swing.JButton();
        jButtonExecutarHabilidades = new javax.swing.JButton();
        jButtonEditarHpDefensor = new javax.swing.JButton();
        jButtonOperarHpDefensor = new javax.swing.JButton();
        jButtonOperarMopDefensor = new javax.swing.JButton();
        jButtonEditarMopDefensor = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jLabelDef = new javax.swing.JLabel();
        jTextFieldDefensor = new javax.swing.JTextField();
        jLabel51 = new javax.swing.JLabel();
        jTextFieldShuDefensor = new javax.swing.JTextField();
        jLabel52 = new javax.swing.JLabel();
        jTextFieldRyuDefensor = new javax.swing.JTextField();
        jLabel54 = new javax.swing.JLabel();
        jTextFieldQtdDefesaDefensor = new javax.swing.JTextField();
        jLabel55 = new javax.swing.JLabel();
        jTextFieldQtdCriticoDefensor = new javax.swing.JTextField();
        jLabel56 = new javax.swing.JLabel();
        jTextFieldAuraBonusDefensor = new javax.swing.JTextField();
        jLabel57 = new javax.swing.JLabel();
        jTextFieldQtdAcertoDefensor = new javax.swing.JTextField();
        jButtonEditaCorpoDefensor = new javax.swing.JButton();
        jComboBoxDefensor = new javax.swing.JComboBox<>();
        jLabelDefesa = new javax.swing.JLabel();
        jCheckBoxUsouRenDefensor = new javax.swing.JCheckBox();
        jLabel58 = new javax.swing.JLabel();
        jLabelDanoAtaqueDefensor = new javax.swing.JLabel();
        jLabel59 = new javax.swing.JLabel();
        jLabelVolumeAtaqueDefensor = new javax.swing.JLabel();
        jTextFieldDadoDefensor = new javax.swing.JTextField();
        jLabel60 = new javax.swing.JLabel();
        jLabelAuraBonusDefensor = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        jLabelCorpoDefensor = new javax.swing.JLabel();
        jCheckBoxDefendeu = new javax.swing.JCheckBox();
        jLabelAuraBonusCalculadaDefensor = new javax.swing.JLabel();
        jButtonOkDefensor = new javax.swing.JButton();
        jLabelDefensor = new javax.swing.JLabel();
        jCheckBoxGastouRyuDefensor = new javax.swing.JCheckBox();
        jComboBoxNenDefensor = new javax.swing.JComboBox<>();
        jButtonCurarDefensor = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabelVelMsAtacante = new javax.swing.JLabel();
        jLabelSrtAtacante = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableRyuAtacante = new javax.swing.JTable();
        jLabelStunAtacante = new javax.swing.JLabel();
        jLabelVelKmAtacante = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextPaneDescricaoBreveAtacante = new javax.swing.JTextPane();
        jLabel40 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabelIniAtacante = new javax.swing.JLabel();
        jLabelEsqAtacante = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabelCrtAtacante = new javax.swing.JLabel();
        jLabelEnAtacante = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabelZtsAtacante = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        jLabelEmsAtacante = new javax.swing.JLabel();
        jLabel65 = new javax.swing.JLabel();
        jLabel66 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTextPaneDescSkillAtacante = new javax.swing.JTextPane();
        jLabelDadoDanoAtacante = new javax.swing.JLabel();
        jLabelSkillQtdAtacante = new javax.swing.JLabel();
        jLabelVolAtacante = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        jLabelActAtacante = new javax.swing.JLabel();
        jLabelCrtSkillAtacante = new javax.swing.JLabel();
        jLabel85 = new javax.swing.JLabel();
        jLabelMenAtacante = new javax.swing.JLabel();
        jLabel86 = new javax.swing.JLabel();
        jLabelCarAtacante = new javax.swing.JLabel();
        jLabel67 = new javax.swing.JLabel();
        jLabelForAtacante = new javax.swing.JLabel();
        jLabelIntAtacante = new javax.swing.JLabel();
        jLabelDexAtacante = new javax.swing.JLabel();
        jLabel64 = new javax.swing.JLabel();
        jLabel68 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        jLabelConAtacante = new javax.swing.JLabel();
        jLabel91 = new javax.swing.JLabel();
        jLabelRyuAtacante = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTableRyuDefensor = new javax.swing.JTable();
        jLabel69 = new javax.swing.JLabel();
        jLabel70 = new javax.swing.JLabel();
        jLabel71 = new javax.swing.JLabel();
        jLabel72 = new javax.swing.JLabel();
        jLabel73 = new javax.swing.JLabel();
        jLabel74 = new javax.swing.JLabel();
        jLabelSkillQtdDefensor = new javax.swing.JLabel();
        jLabel75 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTextPaneDescSkillDefensor = new javax.swing.JTextPane();
        jLabel76 = new javax.swing.JLabel();
        jLabel77 = new javax.swing.JLabel();
        jLabelSrtDefensor = new javax.swing.JLabel();
        jLabel78 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabelStunDefensor = new javax.swing.JLabel();
        jLabelCrtSkillDefensor = new javax.swing.JLabel();
        jLabel79 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabelActDefensor = new javax.swing.JLabel();
        jLabel80 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabelVelKmDefensor = new javax.swing.JLabel();
        jLabelVolDefensor = new javax.swing.JLabel();
        jLabelCarDefensor = new javax.swing.JLabel();
        jLabel81 = new javax.swing.JLabel();
        jLabel82 = new javax.swing.JLabel();
        jLabelEmsDefensor = new javax.swing.JLabel();
        jLabelZtsDefensor = new javax.swing.JLabel();
        jLabel84 = new javax.swing.JLabel();
        jLabel87 = new javax.swing.JLabel();
        jLabelEnDefensor = new javax.swing.JLabel();
        jLabel88 = new javax.swing.JLabel();
        jScrollPane9 = new javax.swing.JScrollPane();
        jTextPaneDescricaoBreveDefensor = new javax.swing.JTextPane();
        jLabelDexDefensor = new javax.swing.JLabel();
        jLabelDadoDanoDefensor = new javax.swing.JLabel();
        jLabelForDefensor = new javax.swing.JLabel();
        jLabelIntDefensor = new javax.swing.JLabel();
        jLabelMenDefensor = new javax.swing.JLabel();
        jLabelEsqDefensor = new javax.swing.JLabel();
        jLabel89 = new javax.swing.JLabel();
        jLabelIniDefensor = new javax.swing.JLabel();
        jLabel90 = new javax.swing.JLabel();
        jLabelCrtDefensor = new javax.swing.JLabel();
        jLabelConDefensor = new javax.swing.JLabel();
        jLabelVelMsDefensor = new javax.swing.JLabel();
        jLabelRyuDefensor = new javax.swing.JLabel();
        jLabel110 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jCheckBoxMenuItemSalvamentoAutomatico = new javax.swing.JCheckBoxMenuItem();
        jMenuItemSalvarHpMop = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItemResetarFichas = new javax.swing.JMenuItem();
        jMenuItemAtualizarHabilidades = new javax.swing.JMenuItem();
        jMenuItemSair = new javax.swing.JMenuItem();
        jMenu15 = new javax.swing.JMenu();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem16 = new javax.swing.JMenuItem();
        jMenuItem17 = new javax.swing.JMenuItem();
        jMenuItem18 = new javax.swing.JMenuItem();
        jMenuItem19 = new javax.swing.JMenuItem();
        jMenu10 = new javax.swing.JMenu();
        jMenuItemInventarioAtacante = new javax.swing.JMenuItem();
        jMenuItemInventarioDefensor = new javax.swing.JMenuItem();
        jMenuItemDescricaoAtacante = new javax.swing.JMenuItem();
        jMenuItemDescricaoDefensor = new javax.swing.JMenuItem();
        jMenuItemFichaAtacante = new javax.swing.JMenuItem();
        jMenuItemFichaDefensor = new javax.swing.JMenuItem();
        jMenuItemFichaSimplesAtacante = new javax.swing.JMenuItem();
        jMenuItemFichaSimplesDefensor = new javax.swing.JMenuItem();
        jMenuItem21 = new javax.swing.JMenuItem();
        jMenuItem22 = new javax.swing.JMenuItem();
        jMenuItemMobs = new javax.swing.JMenuItem();
        jMenuItem20 = new javax.swing.JMenuItem();
        jMenu13 = new javax.swing.JMenu();
        jCheckBoxMenuItemIniciativaAutomatica = new javax.swing.JCheckBoxMenuItem();
        jMenuItemRolarDados = new javax.swing.JMenuItem();
        jMenuItemVerIniciativas = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItemVisualizarNen = new javax.swing.JMenuItem();
        jMenuItemRodarTurnos = new javax.swing.JMenuItem();
        jMenuItemAdicionarCorpos = new javax.swing.JMenuItem();
        jMenuItemZerarCorpoAtacante = new javax.swing.JMenuItem();
        jMenuItemZerarCorpoDefensor = new javax.swing.JMenuItem();
        jMenuItemZerarTodosCorpos = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItemZerarTodosShus = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuItemMostrarKens = new javax.swing.JMenuItem();
        jMenuItemPersons = new javax.swing.JMenuItem();
        jMenuItemDeterminacaoPenalidade = new javax.swing.JMenuItem();
        jMenu9 = new javax.swing.JMenu();
        jMenuItemMostrarHps = new javax.swing.JMenuItem();
        jMenuItemEditarHpAtacante = new javax.swing.JMenuItem();
        jMenuItemEditarHpDefensor = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItemCurarAtacante = new javax.swing.JMenuItem();
        jMenuItemCurarDefensor = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        jMenuItemMostrarMops = new javax.swing.JMenuItem();
        jMenuItemEditarMopAtacante = new javax.swing.JMenuItem();
        jMenuItemEditarMopDefensor = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItemCurarMopAtacante = new javax.swing.JMenuItem();
        jMenuItemCurarMopDefensor = new javax.swing.JMenuItem();
        jMenu8 = new javax.swing.JMenu();
        jMenuItemDanoEmArea = new javax.swing.JMenuItem();
        jMenuItemDps = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItemStunEmArea = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu11 = new javax.swing.JMenu();
        jMenuItemResetarSortes = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenuItem15 = new javax.swing.JMenuItem();
        jMenu12 = new javax.swing.JMenu();
        jMenuItemRodarDias = new javax.swing.JMenuItem();
        jMenu14 = new javax.swing.JMenu();
        jMenuItemFinalizarBatalha = new javax.swing.JMenuItem();
        jMenuItemZerarDados = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItemMobsHps = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GxG Batalhas 3.0");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));

        jPanel2.setBackground(new java.awt.Color(102, 102, 102));

        jLabelAtk.setBackground(new java.awt.Color(102, 102, 102));
        jLabelAtk.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelAtk.setText("Atacante");

        jTextFieldAtacante.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldAtacante.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldAtacante.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldAtacante.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldAtacante.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldAtacante.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldAtacanteFocusGained(evt);
            }
        });
        jTextFieldAtacante.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldAtacanteKeyPressed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(102, 102, 102));
        jLabel2.setText("Shu");

        jTextFieldShuAtacante.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldShuAtacante.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldShuAtacante.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldShuAtacante.setEnabled(false);
        jTextFieldShuAtacante.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldShuAtacante.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldShuAtacante.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldShuAtacanteFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldShuAtacanteFocusLost(evt);
            }
        });

        jLabel3.setBackground(new java.awt.Color(102, 102, 102));
        jLabel3.setText("Ryu");

        jTextFieldRyuAtacante.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldRyuAtacante.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldRyuAtacante.setText("50");
        jTextFieldRyuAtacante.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldRyuAtacante.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldRyuAtacante.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldRyuAtacante.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldRyuAtacanteFocusGained(evt);
            }
        });

        jLabel5.setBackground(new java.awt.Color(102, 102, 102));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Quantidade de Ataque");

        jTextFieldQtdAtaqueAtacante.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldQtdAtaqueAtacante.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldQtdAtaqueAtacante.setText("1");
        jTextFieldQtdAtaqueAtacante.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldQtdAtaqueAtacante.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldQtdAtaqueAtacante.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldQtdAtaqueAtacante.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldQtdAtaqueAtacanteFocusGained(evt);
            }
        });

        jLabel6.setBackground(new java.awt.Color(102, 102, 102));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Quantidade de Critico");

        jTextFieldQtdCriticoAtacante.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldQtdCriticoAtacante.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldQtdCriticoAtacante.setText("0");
        jTextFieldQtdCriticoAtacante.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldQtdCriticoAtacante.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldQtdCriticoAtacante.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldQtdCriticoAtacante.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldQtdCriticoAtacanteFocusGained(evt);
            }
        });

        jLabel7.setBackground(new java.awt.Color(102, 102, 102));
        jLabel7.setText("Dado \\ Bonus");

        jTextFieldAuraBonusAtacante.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldAuraBonusAtacante.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldAuraBonusAtacante.setText("0");
        jTextFieldAuraBonusAtacante.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldAuraBonusAtacante.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldAuraBonusAtacante.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldAuraBonusAtacante.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldAuraBonusAtacanteFocusGained(evt);
            }
        });

        jLabel10.setBackground(new java.awt.Color(102, 102, 102));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Quantidade de Acerto");

        jTextFieldQtdAcertoAtacante.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldQtdAcertoAtacante.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldQtdAcertoAtacante.setText("1");
        jTextFieldQtdAcertoAtacante.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldQtdAcertoAtacante.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldQtdAcertoAtacante.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldQtdAcertoAtacante.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldQtdAcertoAtacanteFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldQtdAcertoAtacanteFocusLost(evt);
            }
        });

        jButtonEditaCorpoAtacante.setBackground(new java.awt.Color(102, 102, 102));
        jButtonEditaCorpoAtacante.setText("Editar Corpo");
        jButtonEditaCorpoAtacante.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jButtonEditaCorpoAtacanteFocusGained(evt);
            }
        });
        jButtonEditaCorpoAtacante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditaCorpoAtacanteActionPerformed(evt);
            }
        });

        jLabelAtaque.setBackground(new java.awt.Color(102, 102, 102));
        jLabelAtaque.setText("Ataque");

        jCheckBoxUsouRenAtacante.setBackground(new java.awt.Color(102, 102, 102));
        jCheckBoxUsouRenAtacante.setText("Usou REN");
        jCheckBoxUsouRenAtacante.setEnabled(false);
        jCheckBoxUsouRenAtacante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxUsouRenAtacanteActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(102, 102, 102));
        jLabel1.setText("Dano");

        jLabelDanoAtaqueAtacante.setBackground(new java.awt.Color(102, 102, 102));
        jLabelDanoAtaqueAtacante.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabelDanoAtaqueAtacanteMouseEntered(evt);
            }
        });

        jLabel24.setBackground(new java.awt.Color(102, 102, 102));
        jLabel24.setText("Volume");

        jLabelVolumeAtaqueAtacante.setBackground(new java.awt.Color(102, 102, 102));
        jLabelVolumeAtaqueAtacante.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jTextFieldDadoAtacante.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldDadoAtacante.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldDadoAtacante.setText("0");
        jTextFieldDadoAtacante.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldDadoAtacante.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldDadoAtacante.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldDadoAtacante.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldDadoAtacanteFocusGained(evt);
            }
        });

        jLabel23.setBackground(new java.awt.Color(102, 102, 102));
        jLabel23.setText("Aura Bonus");

        jLabelAuraBonusAtacante.setBackground(new java.awt.Color(102, 102, 102));
        jLabelAuraBonusAtacante.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelAuraBonusAtacante.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabelAuraBonusAtacanteMouseEntered(evt);
            }
        });

        jLabel29.setBackground(new java.awt.Color(102, 102, 102));
        jLabel29.setText("Corpo");

        jLabelCorpoAtacante.setBackground(new java.awt.Color(102, 102, 102));
        jLabelCorpoAtacante.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        jCheckBoxDanoCritico.setBackground(new java.awt.Color(102, 102, 102));
        jCheckBoxDanoCritico.setText("Dano Critico");

        jLabelAuraBonusCalculadaAtacante.setBackground(new java.awt.Color(102, 102, 102));
        jLabelAuraBonusCalculadaAtacante.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelAuraBonusCalculadaAtacante.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabelAuraBonusCalculadaAtacanteMouseEntered(evt);
            }
        });

        jButtonOkAtacante.setBackground(new java.awt.Color(102, 102, 102));
        jButtonOkAtacante.setText("OK");
        jButtonOkAtacante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOkAtacanteActionPerformed(evt);
            }
        });

        jLabelAtacante.setBackground(new java.awt.Color(102, 102, 102));

        jCheckBoxGastouRyuAtacante.setBackground(new java.awt.Color(102, 102, 102));
        jCheckBoxGastouRyuAtacante.setText("Consome Aura");

        jComboBoxAtacante.setBackground(new java.awt.Color(102, 102, 102));
        jComboBoxAtacante.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jComboBoxAtacanteMouseEntered(evt);
            }
        });
        jComboBoxAtacante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxAtacanteActionPerformed(evt);
            }
        });

        jComboBoxNenAtacante.setBackground(new java.awt.Color(102, 102, 102));
        jComboBoxNenAtacante.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Reforco", "Emissao", "Transformacao", "Materializacao", "Manipulacao", "Especialista" }));
        jComboBoxNenAtacante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxNenAtacanteActionPerformed(evt);
            }
        });

        jButtonCurarAtacante.setBackground(new java.awt.Color(102, 102, 102));
        jButtonCurarAtacante.setText("Curar");
        jButtonCurarAtacante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCurarAtacanteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonCurarAtacante, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonEditaCorpoAtacante, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelCorpoAtacante, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldDadoAtacante, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelDanoAtaqueAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelVolumeAtaqueAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel23, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelAuraBonusAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldRyuAtacante)
                            .addComponent(jTextFieldShuAtacante)))
                    .addComponent(jTextFieldAtacante, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldQtdAtaqueAtacante, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextFieldQtdCriticoAtacante, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldQtdAcertoAtacante, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBoxDanoCritico, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxGastouRyuAtacante, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxUsouRenAtacante, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelAtaque, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonOkAtacante, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelAtk, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBoxNenAtacante, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jTextFieldAuraBonusAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelAuraBonusCalculadaAtacante, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabelAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jComboBoxAtacante, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabelAtk, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(jLabelAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonOkAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelAtaque)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel24))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelDanoAtaqueAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabelVolumeAtaqueAtacante, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextFieldShuAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextFieldRyuAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(jLabel7)
                .addGap(6, 6, 6)
                .addComponent(jTextFieldDadoAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelAuraBonusAtacante, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldAuraBonusAtacante)
                    .addComponent(jLabelAuraBonusCalculadaAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldQtdAtaqueAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldQtdCriticoAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldQtdAcertoAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxDanoCritico)
                .addGap(0, 0, 0)
                .addComponent(jCheckBoxGastouRyuAtacante)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxUsouRenAtacante)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxNenAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonCurarAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelCorpoAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonEditaCorpoAtacante)
                .addContainerGap())
        );

        jPanel4.setBackground(new java.awt.Color(102, 102, 102));

        jButtonCalcularAtaque.setBackground(new java.awt.Color(102, 102, 102));
        jButtonCalcularAtaque.setText("Calcular Ataque");
        jButtonCalcularAtaque.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jButtonCalcularAtaqueFocusGained(evt);
            }
        });
        jButtonCalcularAtaque.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCalcularAtaqueActionPerformed(evt);
            }
        });

        jLabelImagemPerfilAtacante.setBackground(new java.awt.Color(102, 102, 102));

        jProgressBarHpAtacante.setBackground(new java.awt.Color(102, 102, 102));
        jProgressBarHpAtacante.setForeground(new java.awt.Color(255, 0, 0));
        jProgressBarHpAtacante.setStringPainted(true);
        jProgressBarHpAtacante.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jProgressBarHpAtacanteMouseEntered(evt);
            }
        });

        jProgressBarMopAtacante.setBackground(new java.awt.Color(102, 102, 102));
        jProgressBarMopAtacante.setStringPainted(true);
        jProgressBarMopAtacante.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jProgressBarMopAtacanteMouseEntered(evt);
            }
        });

        jButtonDesfazer.setBackground(new java.awt.Color(102, 102, 102));
        jButtonDesfazer.setText("Desfazer");
        jButtonDesfazer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButtonDesfazerMouseEntered(evt);
            }
        });
        jButtonDesfazer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDesfazerActionPerformed(evt);
            }
        });

        jLabel34.setBackground(new java.awt.Color(102, 102, 102));
        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel34.setText("Defesa");

        jLabel35.setBackground(new java.awt.Color(102, 102, 102));
        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel35.setText("Dano Inicial");

        jLabelDF.setBackground(new java.awt.Color(102, 102, 102));
        jLabelDF.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelDF.setText("Dano Final");

        jPanel5.setBackground(new java.awt.Color(102, 102, 102));

        jLabelAtacante2.setBackground(new java.awt.Color(102, 102, 102));
        jLabelAtacante2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelAtacante2.setText("Atacante");

        jButtonRenDeReflexoAtacante.setBackground(new java.awt.Color(102, 102, 102));
        jButtonRenDeReflexoAtacante.setText("Ren de Reflexo");
        jButtonRenDeReflexoAtacante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRenDeReflexoAtacanteActionPerformed(evt);
            }
        });

        jButtonCurarHpAtacante1.setBackground(new java.awt.Color(102, 102, 102));
        jButtonCurarHpAtacante1.setText("Curar Hp");
        jButtonCurarHpAtacante1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jButtonCurarHpAtacante1FocusGained(evt);
            }
        });
        jButtonCurarHpAtacante1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCurarHpAtacante1ActionPerformed(evt);
            }
        });

        jButtonCurarMopAtacante1.setBackground(new java.awt.Color(102, 102, 102));
        jButtonCurarMopAtacante1.setText("Curar MOP");
        jButtonCurarMopAtacante1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jButtonCurarMopAtacante1FocusGained(evt);
            }
        });
        jButtonCurarMopAtacante1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCurarMopAtacante1ActionPerformed(evt);
            }
        });

        jButtonGastarMopAtacante.setBackground(new java.awt.Color(102, 102, 102));
        jButtonGastarMopAtacante.setText("Gastar MOP");
        jButtonGastarMopAtacante.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jButtonGastarMopAtacanteFocusGained(evt);
            }
        });
        jButtonGastarMopAtacante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGastarMopAtacanteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelAtacante2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonRenDeReflexoAtacante, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonCurarHpAtacante1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonCurarMopAtacante1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonGastarMopAtacante, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabelAtacante2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonRenDeReflexoAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCurarHpAtacante1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCurarMopAtacante1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonGastarMopAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabelNomePersonagemAtacante.setBackground(new java.awt.Color(102, 102, 102));
        jLabelNomePersonagemAtacante.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jPanel7.setBackground(new java.awt.Color(102, 102, 102));

        jLabelDefensor2.setBackground(new java.awt.Color(102, 102, 102));
        jLabelDefensor2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelDefensor2.setText("Defensor");

        jButtonRenDeReflexoDefensor.setBackground(new java.awt.Color(102, 102, 102));
        jButtonRenDeReflexoDefensor.setText("Ren de Reflexo");
        jButtonRenDeReflexoDefensor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRenDeReflexoDefensorActionPerformed(evt);
            }
        });

        jButtonCurarHpDefensor1.setBackground(new java.awt.Color(102, 102, 102));
        jButtonCurarHpDefensor1.setText("Curar Hp");
        jButtonCurarHpDefensor1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jButtonCurarHpDefensor1FocusGained(evt);
            }
        });
        jButtonCurarHpDefensor1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCurarHpDefensor1ActionPerformed(evt);
            }
        });

        jButtonCurarMopDefensor1.setBackground(new java.awt.Color(102, 102, 102));
        jButtonCurarMopDefensor1.setText("Curar MOP");
        jButtonCurarMopDefensor1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jButtonCurarMopDefensor1FocusGained(evt);
            }
        });
        jButtonCurarMopDefensor1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCurarMopDefensor1ActionPerformed(evt);
            }
        });

        jButtonGastarMopDefensor.setBackground(new java.awt.Color(102, 102, 102));
        jButtonGastarMopDefensor.setText("Gastar MOP");
        jButtonGastarMopDefensor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jButtonGastarMopDefensorFocusGained(evt);
            }
        });
        jButtonGastarMopDefensor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGastarMopDefensorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelDefensor2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButtonRenDeReflexoDefensor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonCurarHpDefensor1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonCurarMopDefensor1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonGastarMopDefensor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(jLabelDefensor2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonRenDeReflexoDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCurarHpDefensor1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCurarMopDefensor1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonGastarMopDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jButtonRodarTurno.setBackground(new java.awt.Color(102, 102, 102));
        jButtonRodarTurno.setText("Rodar Turno");
        jButtonRodarTurno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRodarTurnoActionPerformed(evt);
            }
        });

        jButtonInverterJogadores.setBackground(new java.awt.Color(102, 102, 102));
        jButtonInverterJogadores.setText("Inverter Jogadores");
        jButtonInverterJogadores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInverterJogadoresActionPerformed(evt);
            }
        });

        jCheckBoxDanoPerfurante.setBackground(new java.awt.Color(102, 102, 102));
        jCheckBoxDanoPerfurante.setText("Dano Perfurante");
        jCheckBoxDanoPerfurante.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jCheckBoxDanoRebote.setBackground(new java.awt.Color(102, 102, 102));
        jCheckBoxDanoRebote.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jCheckBoxDanoRebote.setForeground(new java.awt.Color(0, 255, 0));
        jCheckBoxDanoRebote.setSelected(true);
        jCheckBoxDanoRebote.setText("Dano de Rebote");

        jButtonInvestida.setBackground(new java.awt.Color(102, 102, 102));
        jButtonInvestida.setText("Investida");
        jButtonInvestida.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jButtonInvestidaFocusGained(evt);
            }
        });
        jButtonInvestida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInvestidaActionPerformed(evt);
            }
        });

        jLabel31.setBackground(new java.awt.Color(102, 102, 102));
        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel31.setText("HP Atual");
        jLabel31.setPreferredSize(new java.awt.Dimension(50, 16));

        jLabel4.setBackground(new java.awt.Color(102, 102, 102));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Vel Atacante");

        jLabel83.setBackground(new java.awt.Color(102, 102, 102));
        jLabel83.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel83.setText("Investida");

        jLabel27.setBackground(new java.awt.Color(102, 102, 102));
        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel27.setText("Vel Defensor");

        jLabel28.setBackground(new java.awt.Color(102, 102, 102));
        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel28.setText("HP Final");

        jLabelHpAtualAtacante.setBackground(new java.awt.Color(102, 102, 102));
        jLabelHpAtualAtacante.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabelHpFinalAtacante.setBackground(new java.awt.Color(102, 102, 102));
        jLabelHpFinalAtacante.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabelDanoFinal.setBackground(new java.awt.Color(102, 102, 102));
        jLabelDanoFinal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabelInvestidaAtacante.setBackground(new java.awt.Color(102, 102, 102));
        jLabelInvestidaAtacante.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabelInvestidaDefensor.setBackground(new java.awt.Color(102, 102, 102));
        jLabelInvestidaDefensor.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabelInvestidaTotal.setBackground(new java.awt.Color(102, 102, 102));
        jLabelInvestidaTotal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelInvestidaTotal.setToolTipText("");

        jLabelDefesaCalculada.setBackground(new java.awt.Color(102, 102, 102));
        jLabelDefesaCalculada.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabelDanoInicial.setBackground(new java.awt.Color(102, 102, 102));
        jLabelDanoInicial.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabelImagemPerfilDefensor.setBackground(new java.awt.Color(102, 102, 102));

        jProgressBarHpDefensor.setBackground(new java.awt.Color(102, 102, 102));
        jProgressBarHpDefensor.setForeground(new java.awt.Color(255, 0, 0));
        jProgressBarHpDefensor.setStringPainted(true);
        jProgressBarHpDefensor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jProgressBarHpDefensorMouseEntered(evt);
            }
        });

        jProgressBarMopDefensor.setBackground(new java.awt.Color(102, 102, 102));
        jProgressBarMopDefensor.setStringPainted(true);
        jProgressBarMopDefensor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jProgressBarMopDefensorMouseEntered(evt);
            }
        });

        jLabelNomePersonagemDefensor.setBackground(new java.awt.Color(102, 102, 102));
        jLabelNomePersonagemDefensor.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel30.setBackground(new java.awt.Color(102, 102, 102));
        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel30.setText("HP Final");

        jLabelHpFinalDefensor.setBackground(new java.awt.Color(102, 102, 102));
        jLabelHpFinalDefensor.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel36.setBackground(new java.awt.Color(102, 102, 102));
        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel36.setText("HP Atual");

        jLabelHpAtualDefensor.setBackground(new java.awt.Color(102, 102, 102));
        jLabelHpAtualDefensor.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("Dano Rebote");

        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jButtonRefazer.setBackground(new java.awt.Color(102, 102, 102));
        jButtonRefazer.setText("Refazer");
        jButtonRefazer.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButtonRefazerMouseEntered(evt);
            }
        });
        jButtonRefazer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefazerActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(184, 184, 184))
                            .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jProgressBarHpAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabelHpFinalAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jProgressBarMopAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel31, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabelHpAtualAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabelImagemPerfilAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelNomePersonagemAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelHpAtualDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelImagemPerfilDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabelNomePersonagemDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jProgressBarMopDefensor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jProgressBarHpDefensor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel4Layout.createSequentialGroup()
                                    .addComponent(jCheckBoxDanoRebote)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jCheckBoxDanoPerfurante, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel4Layout.createSequentialGroup()
                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jButtonRodarTurno, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jButtonInvestida, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel4Layout.createSequentialGroup()
                                            .addComponent(jButtonDesfazer, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jButtonRefazer, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jButtonInverterJogadores, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(0, 0, Short.MAX_VALUE))
                                .addComponent(jButtonCalcularAtaque, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabelHpFinalDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(10, 10, 10))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel35, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelInvestidaAtacante, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelDanoInicial, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel34, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel83, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelInvestidaTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelDefesaCalculada, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabelDF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel27, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelDanoFinal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelInvestidaDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelNomePersonagemAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelNomePersonagemDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelImagemPerfilDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelImagemPerfilAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jProgressBarHpAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jProgressBarMopAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jProgressBarHpDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jProgressBarMopDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelHpAtualAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelHpAtualDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelHpFinalAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelHpFinalDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelDefesaCalculada, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jLabel83, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabelInvestidaTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelDF, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelDanoFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelDanoInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabelInvestidaAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelInvestidaDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBoxDanoPerfurante)
                    .addComponent(jCheckBoxDanoRebote))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDesfazer, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonRodarTurno, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonRefazer, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonInvestida, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonInverterJogadores, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCalcularAtaque, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel8.setBackground(new java.awt.Color(102, 102, 102));

        jLabel8.setBackground(new java.awt.Color(102, 102, 102));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Funções Adicionais");

        jButtonMostrarExtensoes.setBackground(new java.awt.Color(102, 102, 102));
        jButtonMostrarExtensoes.setText("Mostrar Extensoes");
        jButtonMostrarExtensoes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMostrarExtensoesActionPerformed(evt);
            }
        });

        jButtonMostrarKens.setBackground(new java.awt.Color(102, 102, 102));
        jButtonMostrarKens.setText("Mostrar Kens");
        jButtonMostrarKens.setMaximumSize(new java.awt.Dimension(153, 32));
        jButtonMostrarKens.setMinimumSize(new java.awt.Dimension(153, 32));
        jButtonMostrarKens.setPreferredSize(new java.awt.Dimension(153, 32));
        jButtonMostrarKens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMostrarKensActionPerformed(evt);
            }
        });

        jLabel9.setBackground(new java.awt.Color(102, 102, 102));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Funções de MOP");

        jButtonMostrarMops.setBackground(new java.awt.Color(102, 102, 102));
        jButtonMostrarMops.setText("Mostrar MOPs");
        jButtonMostrarMops.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMostrarMopsActionPerformed(evt);
            }
        });

        jButtonMostrarHps.setBackground(new java.awt.Color(102, 102, 102));
        jButtonMostrarHps.setText("Mostrar HPs");
        jButtonMostrarHps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMostrarHpsActionPerformed(evt);
            }
        });

        jButtonEditarMopAtacante.setBackground(new java.awt.Color(102, 102, 102));
        jButtonEditarMopAtacante.setText("Editar MOP Atacante");
        jButtonEditarMopAtacante.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jButtonEditarMopAtacanteFocusGained(evt);
            }
        });
        jButtonEditarMopAtacante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditarMopAtacanteActionPerformed(evt);
            }
        });

        jButtonOperarMopAtacante.setBackground(new java.awt.Color(102, 102, 102));
        jButtonOperarMopAtacante.setText("Operar MOP Atacante");
        jButtonOperarMopAtacante.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jButtonOperarMopAtacanteFocusGained(evt);
            }
        });
        jButtonOperarMopAtacante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOperarMopAtacanteActionPerformed(evt);
            }
        });

        jButtonEditarHpAtacante.setBackground(new java.awt.Color(102, 102, 102));
        jButtonEditarHpAtacante.setText("Editar HP Atacante");
        jButtonEditarHpAtacante.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jButtonEditarHpAtacanteFocusGained(evt);
            }
        });
        jButtonEditarHpAtacante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditarHpAtacanteActionPerformed(evt);
            }
        });

        jButtonOperarHpAtacante.setBackground(new java.awt.Color(102, 102, 102));
        jButtonOperarHpAtacante.setText("Operar Hp Atacante");
        jButtonOperarHpAtacante.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jButtonOperarHpAtacanteFocusGained(evt);
            }
        });
        jButtonOperarHpAtacante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOperarHpAtacanteActionPerformed(evt);
            }
        });

        jLabel11.setBackground(new java.awt.Color(102, 102, 102));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Funções de HP");

        jButtonExecutarEditor.setBackground(new java.awt.Color(102, 102, 102));
        jButtonExecutarEditor.setText("Executar Editor 2.0");
        jButtonExecutarEditor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExecutarEditorActionPerformed(evt);
            }
        });

        jButtonSair.setBackground(new java.awt.Color(102, 102, 102));
        jButtonSair.setText("Sair");
        jButtonSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSairActionPerformed(evt);
            }
        });

        jLabel39.setBackground(new java.awt.Color(102, 102, 102));
        jLabel39.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel39.setText("Funções de Configuração");

        jButtonCurarHpsEMops.setBackground(new java.awt.Color(102, 102, 102));
        jButtonCurarHpsEMops.setText("Curar MOPs e HPs");
        jButtonCurarHpsEMops.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCurarHpsEMopsActionPerformed(evt);
            }
        });

        jButtonSalvarHpsEMops.setBackground(new java.awt.Color(102, 102, 102));
        jButtonSalvarHpsEMops.setText("Salvar HPs e MOPs");
        jButtonSalvarHpsEMops.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalvarHpsEMopsActionPerformed(evt);
            }
        });

        jButtonExecutarEditor1.setBackground(new java.awt.Color(102, 102, 102));
        jButtonExecutarEditor1.setText("Executar Gerador 1.0");
        jButtonExecutarEditor1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExecutarEditor1ActionPerformed(evt);
            }
        });

        jButtonExecutarTrainer.setBackground(new java.awt.Color(102, 102, 102));
        jButtonExecutarTrainer.setText("Executar Trainer 1.0");
        jButtonExecutarTrainer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExecutarTrainerActionPerformed(evt);
            }
        });

        jButtonExecutarHabilidades.setBackground(new java.awt.Color(102, 102, 102));
        jButtonExecutarHabilidades.setText("Executar Habilidades 1.0");
        jButtonExecutarHabilidades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExecutarHabilidadesActionPerformed(evt);
            }
        });

        jButtonEditarHpDefensor.setBackground(new java.awt.Color(102, 102, 102));
        jButtonEditarHpDefensor.setText("Editar HP Defensor");
        jButtonEditarHpDefensor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jButtonEditarHpDefensorFocusGained(evt);
            }
        });
        jButtonEditarHpDefensor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditarHpDefensorActionPerformed(evt);
            }
        });

        jButtonOperarHpDefensor.setBackground(new java.awt.Color(102, 102, 102));
        jButtonOperarHpDefensor.setText("Operar Hp Defensor");
        jButtonOperarHpDefensor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jButtonOperarHpDefensorFocusGained(evt);
            }
        });
        jButtonOperarHpDefensor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOperarHpDefensorActionPerformed(evt);
            }
        });

        jButtonOperarMopDefensor.setBackground(new java.awt.Color(102, 102, 102));
        jButtonOperarMopDefensor.setText("Operar MOP Defensor");
        jButtonOperarMopDefensor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jButtonOperarMopDefensorFocusGained(evt);
            }
        });
        jButtonOperarMopDefensor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOperarMopDefensorActionPerformed(evt);
            }
        });

        jButtonEditarMopDefensor.setBackground(new java.awt.Color(102, 102, 102));
        jButtonEditarMopDefensor.setText("Editar MOP Defensor");
        jButtonEditarMopDefensor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jButtonEditarMopDefensorFocusGained(evt);
            }
        });
        jButtonEditarMopDefensor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditarMopDefensorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonCurarHpsEMops, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonSalvarHpsEMops, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonMostrarMops, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonEditarMopAtacante, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonEditarMopDefensor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonExecutarEditor1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonExecutarTrainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonExecutarHabilidades, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonExecutarEditor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel39, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonEditarHpDefensor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonEditarHpAtacante, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonMostrarHps, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonOperarHpAtacante, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonOperarHpDefensor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonOperarMopAtacante, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonOperarMopDefensor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonMostrarKens, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonMostrarExtensoes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonSair, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonMostrarExtensoes, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonMostrarKens, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonCurarHpsEMops, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonSalvarHpsEMops, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonMostrarMops, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonEditarMopAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonEditarMopDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonOperarMopAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonOperarMopDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonMostrarHps, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonEditarHpAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonEditarHpDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonOperarHpAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonOperarHpDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel39)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonExecutarEditor, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonExecutarEditor1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonExecutarTrainer, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonExecutarHabilidades, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonSair, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel10.setBackground(new java.awt.Color(102, 102, 102));

        jLabelDef.setBackground(new java.awt.Color(102, 102, 102));
        jLabelDef.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelDef.setText("Defensor");

        jTextFieldDefensor.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldDefensor.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldDefensor.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldDefensor.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldDefensor.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldDefensor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldDefensorFocusGained(evt);
            }
        });
        jTextFieldDefensor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextFieldDefensorKeyPressed(evt);
            }
        });

        jLabel51.setBackground(new java.awt.Color(102, 102, 102));
        jLabel51.setText("Shu");

        jTextFieldShuDefensor.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldShuDefensor.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldShuDefensor.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldShuDefensor.setEnabled(false);
        jTextFieldShuDefensor.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldShuDefensor.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldShuDefensor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldShuDefensorFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldShuDefensorFocusLost(evt);
            }
        });

        jLabel52.setBackground(new java.awt.Color(102, 102, 102));
        jLabel52.setText("Ryu");

        jTextFieldRyuDefensor.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldRyuDefensor.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldRyuDefensor.setText("50");
        jTextFieldRyuDefensor.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldRyuDefensor.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldRyuDefensor.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldRyuDefensor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldRyuDefensorFocusGained(evt);
            }
        });

        jLabel54.setBackground(new java.awt.Color(102, 102, 102));
        jLabel54.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel54.setText("Quantidade de Defesa");

        jTextFieldQtdDefesaDefensor.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldQtdDefesaDefensor.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldQtdDefesaDefensor.setText("0");
        jTextFieldQtdDefesaDefensor.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldQtdDefesaDefensor.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldQtdDefesaDefensor.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldQtdDefesaDefensor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldQtdDefesaDefensorFocusGained(evt);
            }
        });

        jLabel55.setBackground(new java.awt.Color(102, 102, 102));
        jLabel55.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel55.setText("Quantidade de Critico");

        jTextFieldQtdCriticoDefensor.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldQtdCriticoDefensor.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldQtdCriticoDefensor.setText("0");
        jTextFieldQtdCriticoDefensor.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldQtdCriticoDefensor.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldQtdCriticoDefensor.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldQtdCriticoDefensor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldQtdCriticoDefensorFocusGained(evt);
            }
        });

        jLabel56.setBackground(new java.awt.Color(102, 102, 102));
        jLabel56.setText("Dado \\ Bonus");

        jTextFieldAuraBonusDefensor.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldAuraBonusDefensor.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldAuraBonusDefensor.setText("0");
        jTextFieldAuraBonusDefensor.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldAuraBonusDefensor.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldAuraBonusDefensor.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldAuraBonusDefensor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldAuraBonusDefensorFocusGained(evt);
            }
        });

        jLabel57.setBackground(new java.awt.Color(102, 102, 102));
        jLabel57.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel57.setText("Quantidade de Acerto");

        jTextFieldQtdAcertoDefensor.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldQtdAcertoDefensor.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldQtdAcertoDefensor.setText("0");
        jTextFieldQtdAcertoDefensor.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldQtdAcertoDefensor.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldQtdAcertoDefensor.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldQtdAcertoDefensor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldQtdAcertoDefensorFocusGained(evt);
            }
        });

        jButtonEditaCorpoDefensor.setBackground(new java.awt.Color(102, 102, 102));
        jButtonEditaCorpoDefensor.setText("Editar Corpo");
        jButtonEditaCorpoDefensor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jButtonEditaCorpoDefensorFocusGained(evt);
            }
        });
        jButtonEditaCorpoDefensor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditaCorpoDefensorActionPerformed(evt);
            }
        });

        jComboBoxDefensor.setBackground(new java.awt.Color(102, 102, 102));
        jComboBoxDefensor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jComboBoxDefensorMouseEntered(evt);
            }
        });
        jComboBoxDefensor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxDefensorActionPerformed(evt);
            }
        });

        jLabelDefesa.setBackground(new java.awt.Color(102, 102, 102));
        jLabelDefesa.setText("Defesa");

        jCheckBoxUsouRenDefensor.setBackground(new java.awt.Color(102, 102, 102));
        jCheckBoxUsouRenDefensor.setText("Usou REN");
        jCheckBoxUsouRenDefensor.setEnabled(false);

        jLabel58.setBackground(new java.awt.Color(102, 102, 102));
        jLabel58.setText("Dano");

        jLabelDanoAtaqueDefensor.setBackground(new java.awt.Color(102, 102, 102));
        jLabelDanoAtaqueDefensor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabelDanoAtaqueDefensorMouseEntered(evt);
            }
        });

        jLabel59.setBackground(new java.awt.Color(102, 102, 102));
        jLabel59.setText("Volume");

        jLabelVolumeAtaqueDefensor.setBackground(new java.awt.Color(102, 102, 102));
        jLabelVolumeAtaqueDefensor.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jTextFieldDadoDefensor.setBackground(new java.awt.Color(51, 51, 51));
        jTextFieldDadoDefensor.setForeground(new java.awt.Color(0, 255, 0));
        jTextFieldDadoDefensor.setText("0");
        jTextFieldDadoDefensor.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextFieldDadoDefensor.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextFieldDadoDefensor.setSelectionColor(new java.awt.Color(0, 255, 255));
        jTextFieldDadoDefensor.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextFieldDadoDefensorFocusGained(evt);
            }
        });

        jLabel60.setBackground(new java.awt.Color(102, 102, 102));
        jLabel60.setText("Aura Bonus");

        jLabelAuraBonusDefensor.setBackground(new java.awt.Color(102, 102, 102));
        jLabelAuraBonusDefensor.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelAuraBonusDefensor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabelAuraBonusDefensorMouseEntered(evt);
            }
        });

        jLabel61.setBackground(new java.awt.Color(102, 102, 102));
        jLabel61.setText("Corpo");

        jLabelCorpoDefensor.setBackground(new java.awt.Color(102, 102, 102));
        jLabelCorpoDefensor.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        jCheckBoxDefendeu.setBackground(new java.awt.Color(102, 102, 102));
        jCheckBoxDefendeu.setText("Defendeu");

        jLabelAuraBonusCalculadaDefensor.setBackground(new java.awt.Color(102, 102, 102));
        jLabelAuraBonusCalculadaDefensor.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabelAuraBonusCalculadaDefensor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabelAuraBonusCalculadaDefensorMouseEntered(evt);
            }
        });

        jButtonOkDefensor.setBackground(new java.awt.Color(102, 102, 102));
        jButtonOkDefensor.setText("OK");
        jButtonOkDefensor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOkDefensorActionPerformed(evt);
            }
        });

        jLabelDefensor.setBackground(new java.awt.Color(102, 102, 102));

        jCheckBoxGastouRyuDefensor.setBackground(new java.awt.Color(102, 102, 102));
        jCheckBoxGastouRyuDefensor.setText("Consome Aura");

        jComboBoxNenDefensor.setBackground(new java.awt.Color(102, 102, 102));
        jComboBoxNenDefensor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Reforco", "Emissao", "Transformacao", "Materializacao", "Manipulacao", "Especialista" }));
        jComboBoxNenDefensor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxNenDefensorActionPerformed(evt);
            }
        });

        jButtonCurarDefensor.setBackground(new java.awt.Color(102, 102, 102));
        jButtonCurarDefensor.setText("Curar");
        jButtonCurarDefensor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCurarDefensorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jComboBoxDefensor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonCurarDefensor, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelDefensor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel57, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel55, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel54, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldQtdCriticoDefensor)
                    .addComponent(jTextFieldQtdAcertoDefensor)
                    .addComponent(jTextFieldDadoDefensor)
                    .addComponent(jLabel56, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel51)
                            .addComponent(jLabel52))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextFieldRyuDefensor)
                            .addComponent(jTextFieldShuDefensor)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel58, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelDanoAtaqueDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel59, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabelVolumeAtaqueDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jCheckBoxGastouRyuDefensor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxDefendeu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jCheckBoxUsouRenDefensor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldQtdDefesaDefensor)
                    .addComponent(jButtonEditaCorpoDefensor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel61, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelCorpoDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabelDef, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextFieldDefensor)
                    .addComponent(jButtonOkDefensor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBoxNenDefensor, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jTextFieldAuraBonusDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelAuraBonusCalculadaDefensor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel10Layout.createSequentialGroup()
                                .addComponent(jLabel60)
                                .addGap(18, 18, 18)
                                .addComponent(jLabelAuraBonusDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabelDefesa, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelDef, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonOkDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(jLabelDefesa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel58)
                            .addComponent(jLabel59))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelDanoAtaqueDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabelVolumeAtaqueDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel51)
                    .addComponent(jTextFieldShuDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel52)
                    .addComponent(jTextFieldRyuDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(jLabel56)
                .addGap(6, 6, 6)
                .addComponent(jTextFieldDadoDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelAuraBonusDefensor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel60, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextFieldAuraBonusDefensor)
                    .addComponent(jLabelAuraBonusCalculadaDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addComponent(jLabel54)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldQtdDefesaDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel55)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldQtdCriticoDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel57)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextFieldQtdAcertoDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxDefendeu)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxGastouRyuDefensor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxUsouRenDefensor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBoxNenDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonCurarDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel61, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelCorpoDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonEditaCorpoDefensor)
                .addContainerGap())
        );

        jScrollPane2.setBackground(new java.awt.Color(51, 51, 51));

        jPanel3.setBackground(new java.awt.Color(51, 51, 51));

        jLabel17.setForeground(new java.awt.Color(0, 255, 0));
        jLabel17.setText("Atordoado: ");

        jLabel20.setForeground(new java.awt.Color(0, 255, 0));
        jLabel20.setText("Inv:");

        jLabel21.setForeground(new java.awt.Color(0, 255, 0));
        jLabel21.setText("Ms:");

        jLabelVelMsAtacante.setForeground(new java.awt.Color(0, 255, 0));

        jLabelSrtAtacante.setForeground(new java.awt.Color(0, 255, 0));

        jTableRyuAtacante.setBackground(new java.awt.Color(51, 51, 51));
        jTableRyuAtacante.setForeground(new java.awt.Color(0, 255, 0));
        jTableRyuAtacante.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "RYU", "Valor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableRyuAtacante.setSelectionBackground(new java.awt.Color(0, 255, 255));
        jTableRyuAtacante.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jScrollPane3.setViewportView(jTableRyuAtacante);
        if (jTableRyuAtacante.getColumnModel().getColumnCount() > 0) {
            jTableRyuAtacante.getColumnModel().getColumn(0).setResizable(false);
            jTableRyuAtacante.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabelStunAtacante.setForeground(new java.awt.Color(0, 255, 0));

        jLabelVelKmAtacante.setForeground(new java.awt.Color(0, 255, 0));

        jTextPaneDescricaoBreveAtacante.setEditable(false);
        jTextPaneDescricaoBreveAtacante.setBackground(new java.awt.Color(51, 51, 51));
        jTextPaneDescricaoBreveAtacante.setForeground(new java.awt.Color(0, 255, 0));
        jTextPaneDescricaoBreveAtacante.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextPaneDescricaoBreveAtacante.setMaximumSize(new java.awt.Dimension(6, 6));
        jTextPaneDescricaoBreveAtacante.setMinimumSize(new java.awt.Dimension(6, 121));
        jTextPaneDescricaoBreveAtacante.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextPaneDescricaoBreveAtacante.setSelectionColor(new java.awt.Color(0, 255, 255));
        jScrollPane4.setViewportView(jTextPaneDescricaoBreveAtacante);

        jLabel40.setForeground(new java.awt.Color(0, 255, 0));
        jLabel40.setText("Km:");

        jLabel41.setForeground(new java.awt.Color(0, 255, 255));
        jLabel41.setText("Ini: ");

        jLabel43.setForeground(new java.awt.Color(0, 255, 255));
        jLabel43.setText("Esq:");

        jLabelIniAtacante.setBackground(new java.awt.Color(51, 51, 51));
        jLabelIniAtacante.setForeground(new java.awt.Color(0, 255, 255));

        jLabelEsqAtacante.setBackground(new java.awt.Color(51, 51, 51));
        jLabelEsqAtacante.setForeground(new java.awt.Color(0, 255, 255));

        jLabel45.setForeground(new java.awt.Color(0, 255, 0));
        jLabel45.setText("Crt:");

        jLabel44.setForeground(new java.awt.Color(0, 255, 0));
        jLabel44.setText("Srt:");

        jLabelCrtAtacante.setBackground(new java.awt.Color(51, 51, 51));
        jLabelCrtAtacante.setForeground(new java.awt.Color(0, 255, 0));

        jLabelEnAtacante.setBackground(new java.awt.Color(51, 51, 51));
        jLabelEnAtacante.setForeground(new java.awt.Color(0, 255, 0));

        jLabel47.setForeground(new java.awt.Color(0, 255, 0));
        jLabel47.setText("Zts:");

        jLabelZtsAtacante.setBackground(new java.awt.Color(51, 51, 51));
        jLabelZtsAtacante.setForeground(new java.awt.Color(0, 255, 0));
        jLabelZtsAtacante.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabelZtsAtacanteMouseEntered(evt);
            }
        });

        jLabel48.setForeground(new java.awt.Color(0, 255, 0));
        jLabel48.setText("En:");

        jLabelEmsAtacante.setBackground(new java.awt.Color(51, 51, 51));
        jLabelEmsAtacante.setForeground(new java.awt.Color(0, 255, 0));

        jLabel65.setForeground(new java.awt.Color(0, 255, 0));
        jLabel65.setText("Ems: ");

        jLabel66.setForeground(new java.awt.Color(0, 255, 255));
        jLabel66.setText("Skill:");

        jTextPaneDescSkillAtacante.setEditable(false);
        jTextPaneDescSkillAtacante.setBackground(new java.awt.Color(51, 51, 51));
        jTextPaneDescSkillAtacante.setForeground(new java.awt.Color(0, 255, 0));
        jTextPaneDescSkillAtacante.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextPaneDescSkillAtacante.setMaximumSize(new java.awt.Dimension(6, 20));
        jTextPaneDescSkillAtacante.setMinimumSize(new java.awt.Dimension(6, 121));
        jTextPaneDescSkillAtacante.setPreferredSize(new java.awt.Dimension(6, 121));
        jTextPaneDescSkillAtacante.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextPaneDescSkillAtacante.setSelectionColor(new java.awt.Color(0, 255, 255));
        jScrollPane5.setViewportView(jTextPaneDescSkillAtacante);

        jLabelDadoDanoAtacante.setBackground(new java.awt.Color(51, 51, 51));
        jLabelDadoDanoAtacante.setForeground(new java.awt.Color(0, 255, 255));
        jLabelDadoDanoAtacante.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabelDadoDanoAtacanteMouseEntered(evt);
            }
        });

        jLabelSkillQtdAtacante.setForeground(new java.awt.Color(0, 255, 0));

        jLabelVolAtacante.setBackground(new java.awt.Color(51, 51, 51));
        jLabelVolAtacante.setForeground(new java.awt.Color(0, 255, 255));

        jLabel49.setForeground(new java.awt.Color(0, 255, 0));
        jLabel49.setText("Qtd:");

        jLabel42.setForeground(new java.awt.Color(0, 255, 255));
        jLabel42.setText("Act:");

        jLabel46.setForeground(new java.awt.Color(0, 255, 0));
        jLabel46.setText("Crt:");

        jLabel50.setForeground(new java.awt.Color(0, 255, 255));
        jLabel50.setText("Vol:");

        jLabelActAtacante.setBackground(new java.awt.Color(51, 51, 51));
        jLabelActAtacante.setForeground(new java.awt.Color(0, 255, 255));

        jLabelCrtSkillAtacante.setBackground(new java.awt.Color(51, 51, 51));
        jLabelCrtSkillAtacante.setForeground(new java.awt.Color(0, 255, 0));

        jLabel85.setForeground(new java.awt.Color(0, 255, 0));
        jLabel85.setText("Men:");

        jLabelMenAtacante.setBackground(new java.awt.Color(51, 51, 51));
        jLabelMenAtacante.setForeground(new java.awt.Color(0, 255, 0));

        jLabel86.setForeground(new java.awt.Color(0, 255, 255));
        jLabel86.setText("Con:");

        jLabelCarAtacante.setForeground(new java.awt.Color(0, 255, 0));

        jLabel67.setForeground(new java.awt.Color(0, 255, 0));
        jLabel67.setText("Int:");

        jLabelForAtacante.setBackground(new java.awt.Color(51, 51, 51));
        jLabelForAtacante.setForeground(new java.awt.Color(0, 255, 255));

        jLabelIntAtacante.setBackground(new java.awt.Color(51, 51, 51));
        jLabelIntAtacante.setForeground(new java.awt.Color(0, 255, 0));

        jLabelDexAtacante.setBackground(new java.awt.Color(51, 51, 51));
        jLabelDexAtacante.setForeground(new java.awt.Color(0, 255, 255));

        jLabel64.setForeground(new java.awt.Color(0, 255, 0));
        jLabel64.setText("Car:");

        jLabel68.setForeground(new java.awt.Color(0, 255, 255));
        jLabel68.setText("For:");

        jLabel53.setForeground(new java.awt.Color(0, 255, 255));
        jLabel53.setText("Dex:");

        jLabelConAtacante.setBackground(new java.awt.Color(51, 51, 51));
        jLabelConAtacante.setForeground(new java.awt.Color(0, 255, 255));

        jLabel91.setForeground(new java.awt.Color(0, 255, 0));
        jLabel91.setText("Ryu: ");

        jLabelRyuAtacante.setBackground(new java.awt.Color(51, 51, 51));
        jLabelRyuAtacante.setForeground(new java.awt.Color(0, 255, 0));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel21)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabelVelMsAtacante, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jLabelStunAtacante, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel65)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelEmsAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel91)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelRyuAtacante, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel66)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelDadoDanoAtacante, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel46, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelCrtSkillAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel49, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelSkillQtdAtacante, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel41, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(jLabel40)
                                                .addGap(6, 6, 6)
                                                .addComponent(jLabelVelKmAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(jLabelIniAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel43, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabelEsqAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel45, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabelCrtAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel44, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabelSrtAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel47, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabelZtsAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel48, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabelEnAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabelActAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel50, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabelVolAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel68, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabelForAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel67, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabelIntAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel53, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabelDexAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel64, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabelCarAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(jLabel86)
                                        .addGap(5, 5, 5)
                                        .addComponent(jLabelConAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel85, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabelMenAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(12, 12, 12))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelStunAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabelVelKmAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelVelMsAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel41, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelIniAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel43, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelEsqAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel45, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelCrtAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel44, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSrtAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel47, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelZtsAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel48, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelEnAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelEmsAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel65, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel91, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelRyuAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel68, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelForAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel67, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelIntAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel53, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelDexAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel64, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelCarAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel86, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelConAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel85, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelMenAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel66, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDadoDanoAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelActAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel50, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelVolAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel46, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelCrtSkillAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel49, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSkillQtdAtacante, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jScrollPane2.setViewportView(jPanel3);

        jScrollPane7.setBackground(new java.awt.Color(51, 51, 51));

        jPanel9.setBackground(new java.awt.Color(51, 51, 51));
        jPanel9.setPreferredSize(new java.awt.Dimension(146, 699));

        jTableRyuDefensor.setBackground(new java.awt.Color(51, 51, 51));
        jTableRyuDefensor.setForeground(new java.awt.Color(0, 255, 0));
        jTableRyuDefensor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "RYU", "Valor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableRyuDefensor.setSelectionBackground(new java.awt.Color(0, 255, 255));
        jTableRyuDefensor.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jScrollPane8.setViewportView(jTableRyuDefensor);
        if (jTableRyuDefensor.getColumnModel().getColumnCount() > 0) {
            jTableRyuDefensor.getColumnModel().getColumn(0).setResizable(false);
            jTableRyuDefensor.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabel69.setForeground(new java.awt.Color(0, 255, 0));
        jLabel69.setText("Crt:");

        jLabel70.setForeground(new java.awt.Color(0, 255, 0));
        jLabel70.setText("Srt:");

        jLabel71.setForeground(new java.awt.Color(0, 255, 255));
        jLabel71.setText("Act:");

        jLabel72.setForeground(new java.awt.Color(0, 255, 0));
        jLabel72.setText("Car:");

        jLabel73.setForeground(new java.awt.Color(0, 255, 255));
        jLabel73.setText("Vol:");

        jLabel74.setForeground(new java.awt.Color(0, 255, 255));
        jLabel74.setText("Dex:");

        jLabelSkillQtdDefensor.setForeground(new java.awt.Color(0, 255, 0));

        jLabel75.setForeground(new java.awt.Color(0, 255, 0));
        jLabel75.setText("Qtd:");

        jTextPaneDescSkillDefensor.setEditable(false);
        jTextPaneDescSkillDefensor.setBackground(new java.awt.Color(51, 51, 51));
        jTextPaneDescSkillDefensor.setForeground(new java.awt.Color(0, 255, 0));
        jTextPaneDescSkillDefensor.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextPaneDescSkillDefensor.setMaximumSize(new java.awt.Dimension(6, 6));
        jTextPaneDescSkillDefensor.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextPaneDescSkillDefensor.setSelectionColor(new java.awt.Color(0, 255, 255));
        jScrollPane6.setViewportView(jTextPaneDescSkillDefensor);

        jLabel76.setForeground(new java.awt.Color(0, 255, 0));
        jLabel76.setText("Crt:");

        jLabel77.setForeground(new java.awt.Color(0, 255, 255));
        jLabel77.setText("Skill:");

        jLabelSrtDefensor.setForeground(new java.awt.Color(0, 255, 0));

        jLabel78.setForeground(new java.awt.Color(0, 255, 255));
        jLabel78.setText("Esq:");

        jLabel18.setForeground(new java.awt.Color(0, 255, 0));
        jLabel18.setText("Atordoado: ");

        jLabelStunDefensor.setForeground(new java.awt.Color(0, 255, 0));

        jLabelCrtSkillDefensor.setBackground(new java.awt.Color(51, 51, 51));
        jLabelCrtSkillDefensor.setForeground(new java.awt.Color(0, 255, 0));

        jLabel79.setForeground(new java.awt.Color(0, 255, 255));
        jLabel79.setText("For:");

        jLabel25.setForeground(new java.awt.Color(0, 255, 0));
        jLabel25.setText("Inv:");

        jLabelActDefensor.setBackground(new java.awt.Color(51, 51, 51));
        jLabelActDefensor.setForeground(new java.awt.Color(0, 255, 255));

        jLabel80.setForeground(new java.awt.Color(0, 255, 0));
        jLabel80.setText("Int:");

        jLabel26.setForeground(new java.awt.Color(0, 255, 0));
        jLabel26.setText("Ms:");

        jLabelVelKmDefensor.setForeground(new java.awt.Color(0, 255, 0));

        jLabelVolDefensor.setBackground(new java.awt.Color(51, 51, 51));
        jLabelVolDefensor.setForeground(new java.awt.Color(0, 255, 255));

        jLabelCarDefensor.setForeground(new java.awt.Color(0, 255, 0));

        jLabel81.setForeground(new java.awt.Color(0, 255, 255));
        jLabel81.setText("Ini: ");

        jLabel82.setForeground(new java.awt.Color(0, 255, 0));
        jLabel82.setText("Ems: ");

        jLabelEmsDefensor.setBackground(new java.awt.Color(51, 51, 51));
        jLabelEmsDefensor.setForeground(new java.awt.Color(0, 255, 0));

        jLabelZtsDefensor.setBackground(new java.awt.Color(51, 51, 51));
        jLabelZtsDefensor.setForeground(new java.awt.Color(0, 255, 0));

        jLabel84.setForeground(new java.awt.Color(0, 255, 0));
        jLabel84.setText("En:");

        jLabel87.setForeground(new java.awt.Color(0, 255, 0));
        jLabel87.setText("Zts:");

        jLabelEnDefensor.setBackground(new java.awt.Color(51, 51, 51));
        jLabelEnDefensor.setForeground(new java.awt.Color(0, 255, 0));

        jLabel88.setForeground(new java.awt.Color(0, 255, 0));
        jLabel88.setText("Km:");

        jTextPaneDescricaoBreveDefensor.setEditable(false);
        jTextPaneDescricaoBreveDefensor.setBackground(new java.awt.Color(51, 51, 51));
        jTextPaneDescricaoBreveDefensor.setForeground(new java.awt.Color(0, 255, 0));
        jTextPaneDescricaoBreveDefensor.setCaretColor(new java.awt.Color(0, 255, 0));
        jTextPaneDescricaoBreveDefensor.setMaximumSize(new java.awt.Dimension(6, 6));
        jTextPaneDescricaoBreveDefensor.setSelectedTextColor(new java.awt.Color(0, 0, 0));
        jTextPaneDescricaoBreveDefensor.setSelectionColor(new java.awt.Color(0, 255, 255));
        jScrollPane9.setViewportView(jTextPaneDescricaoBreveDefensor);

        jLabelDexDefensor.setBackground(new java.awt.Color(51, 51, 51));
        jLabelDexDefensor.setForeground(new java.awt.Color(0, 255, 255));

        jLabelDadoDanoDefensor.setBackground(new java.awt.Color(51, 51, 51));
        jLabelDadoDanoDefensor.setForeground(new java.awt.Color(0, 255, 255));
        jLabelDadoDanoDefensor.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabelDadoDanoDefensorMouseEntered(evt);
            }
        });

        jLabelForDefensor.setBackground(new java.awt.Color(51, 51, 51));
        jLabelForDefensor.setForeground(new java.awt.Color(0, 255, 255));

        jLabelIntDefensor.setBackground(new java.awt.Color(51, 51, 51));
        jLabelIntDefensor.setForeground(new java.awt.Color(0, 255, 0));

        jLabelMenDefensor.setBackground(new java.awt.Color(51, 51, 51));
        jLabelMenDefensor.setForeground(new java.awt.Color(0, 255, 0));

        jLabelEsqDefensor.setBackground(new java.awt.Color(51, 51, 51));
        jLabelEsqDefensor.setForeground(new java.awt.Color(0, 255, 255));

        jLabel89.setForeground(new java.awt.Color(0, 255, 255));
        jLabel89.setText("Con:");

        jLabelIniDefensor.setBackground(new java.awt.Color(51, 51, 51));
        jLabelIniDefensor.setForeground(new java.awt.Color(0, 255, 255));

        jLabel90.setForeground(new java.awt.Color(0, 255, 0));
        jLabel90.setText("Men:");

        jLabelCrtDefensor.setBackground(new java.awt.Color(51, 51, 51));
        jLabelCrtDefensor.setForeground(new java.awt.Color(0, 255, 0));

        jLabelConDefensor.setBackground(new java.awt.Color(51, 51, 51));
        jLabelConDefensor.setForeground(new java.awt.Color(0, 255, 255));

        jLabelVelMsDefensor.setForeground(new java.awt.Color(0, 255, 0));

        jLabelRyuDefensor.setBackground(new java.awt.Color(51, 51, 51));
        jLabelRyuDefensor.setForeground(new java.awt.Color(0, 255, 0));

        jLabel110.setForeground(new java.awt.Color(0, 255, 0));
        jLabel110.setText("Ryu: ");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel9Layout.createSequentialGroup()
                                        .addComponent(jLabel26)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabelVelMsDefensor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jLabelStunDefensor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel9Layout.createSequentialGroup()
                                        .addComponent(jLabel82)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabelEmsDefensor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel9Layout.createSequentialGroup()
                                        .addComponent(jLabel79, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabelForDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel9Layout.createSequentialGroup()
                                        .addComponent(jLabel80, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabelIntDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel9Layout.createSequentialGroup()
                                        .addComponent(jLabel110)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabelRyuDefensor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel9Layout.createSequentialGroup()
                                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel81, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel9Layout.createSequentialGroup()
                                                .addComponent(jLabel88)
                                                .addGap(6, 6, 6)
                                                .addComponent(jLabelVelKmDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jPanel9Layout.createSequentialGroup()
                                                .addComponent(jLabelIniDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabel78, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jLabelEsqDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGroup(jPanel9Layout.createSequentialGroup()
                                        .addComponent(jLabel69, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabelCrtDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel70, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabelSrtDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel9Layout.createSequentialGroup()
                                        .addComponent(jLabel87, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabelZtsDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel84, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabelEnDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel9Layout.createSequentialGroup()
                                        .addComponent(jLabel71, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabelActDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel73, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabelVolDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel9Layout.createSequentialGroup()
                                        .addComponent(jLabel74, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabelDexDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel72, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabelCarDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel9Layout.createSequentialGroup()
                                        .addComponent(jLabel89)
                                        .addGap(5, 5, 5)
                                        .addComponent(jLabelConDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel90, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabelMenDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel9Layout.createSequentialGroup()
                                        .addComponent(jLabel77)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabelDadoDanoDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel9Layout.createSequentialGroup()
                                            .addComponent(jLabel76, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jLabelCrtSkillDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jLabel75, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(jLabelSkillQtdDefensor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(12, 12, 12))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelStunDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel88, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabelVelKmDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelVelMsDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel81, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelIniDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel78, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelEsqDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel69, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelCrtDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel70, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSrtDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel87, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelZtsDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel84, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelEnDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabelEmsDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel82, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel110, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelRyuDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel79, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelForDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel80, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelIntDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel74, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelDexDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel72, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelCarDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel89, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelConDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel90, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelMenDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel77, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelDadoDanoDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel71, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelActDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel73, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelVolDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel76, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabelCrtSkillDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel75, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelSkillQtdDefensor, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(65, Short.MAX_VALUE))
        );

        jScrollPane7.setViewportView(jPanel9);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane7)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)))
        );

        jScrollPane1.setViewportView(jPanel1);

        jMenu1.setText("Arquivo");

        jCheckBoxMenuItemSalvamentoAutomatico.setText("Salvamento Automático");
        jCheckBoxMenuItemSalvamentoAutomatico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemSalvamentoAutomaticoActionPerformed(evt);
            }
        });
        jMenu1.add(jCheckBoxMenuItemSalvamentoAutomatico);

        jMenuItemSalvarHpMop.setText("Salvar HPs e MOPs");
        jMenuItemSalvarHpMop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSalvarHpMopActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemSalvarHpMop);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem2.setText("Desfazer");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.SHIFT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItem3.setText("Refazer");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItemResetarFichas.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemResetarFichas.setText("Resetar Dados dos Personagens");
        jMenuItemResetarFichas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemResetarFichasActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemResetarFichas);

        jMenuItemAtualizarHabilidades.setText("Atualizar Habilidades");
        jMenuItemAtualizarHabilidades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAtualizarHabilidadesActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemAtualizarHabilidades);

        jMenuItemSair.setText("Sair");
        jMenuItemSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSairActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemSair);

        jMenuBar1.add(jMenu1);

        jMenu15.setText("Editar");

        jMenuItem10.setText("Adicionar Inspiração Atacante");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu15.add(jMenuItem10);

        jMenuItem11.setText("Adicionar Inspiração Defensor");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu15.add(jMenuItem11);

        jMenuItem12.setText("Adicionar Pt Heróico Atacante");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu15.add(jMenuItem12);

        jMenuItem13.setText("Adicionar Pt Heróico Defensor");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu15.add(jMenuItem13);

        jMenuItem16.setText("Gastar Inspiração Atacante");
        jMenuItem16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem16ActionPerformed(evt);
            }
        });
        jMenu15.add(jMenuItem16);

        jMenuItem17.setText("Gastar Inspiração Defensor");
        jMenuItem17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem17ActionPerformed(evt);
            }
        });
        jMenu15.add(jMenuItem17);

        jMenuItem18.setText("Gastar Pt Heróico Atacante");
        jMenuItem18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem18ActionPerformed(evt);
            }
        });
        jMenu15.add(jMenuItem18);

        jMenuItem19.setText("Gastar Pt Heróico Defensor");
        jMenuItem19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem19ActionPerformed(evt);
            }
        });
        jMenu15.add(jMenuItem19);

        jMenuBar1.add(jMenu15);

        jMenu10.setText("Abrir");

        jMenuItemInventarioAtacante.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, 0));
        jMenuItemInventarioAtacante.setText("Inventário Atacante");
        jMenuItemInventarioAtacante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemInventarioAtacanteActionPerformed(evt);
            }
        });
        jMenu10.add(jMenuItemInventarioAtacante);

        jMenuItemInventarioDefensor.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F6, 0));
        jMenuItemInventarioDefensor.setText("Inventário Defensor");
        jMenuItemInventarioDefensor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemInventarioDefensorActionPerformed(evt);
            }
        });
        jMenu10.add(jMenuItemInventarioDefensor);

        jMenuItemDescricaoAtacante.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_DOWN_MASK));
        jMenuItemDescricaoAtacante.setText("Descrição Atacante");
        jMenuItemDescricaoAtacante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDescricaoAtacanteActionPerformed(evt);
            }
        });
        jMenu10.add(jMenuItemDescricaoAtacante);

        jMenuItemDescricaoDefensor.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.ALT_DOWN_MASK));
        jMenuItemDescricaoDefensor.setText("Descrição Defensor");
        jMenuItemDescricaoDefensor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDescricaoDefensorActionPerformed(evt);
            }
        });
        jMenu10.add(jMenuItemDescricaoDefensor);

        jMenuItemFichaAtacante.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemFichaAtacante.setText("Ficha Atacante");
        jMenuItemFichaAtacante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFichaAtacanteActionPerformed(evt);
            }
        });
        jMenu10.add(jMenuItemFichaAtacante);

        jMenuItemFichaDefensor.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemFichaDefensor.setText("Ficha Defensor");
        jMenuItemFichaDefensor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFichaDefensorActionPerformed(evt);
            }
        });
        jMenu10.add(jMenuItemFichaDefensor);

        jMenuItemFichaSimplesAtacante.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemFichaSimplesAtacante.setText("Ficha Simples Atacante");
        jMenuItemFichaSimplesAtacante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFichaSimplesAtacanteActionPerformed(evt);
            }
        });
        jMenu10.add(jMenuItemFichaSimplesAtacante);

        jMenuItemFichaSimplesDefensor.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.ALT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemFichaSimplesDefensor.setText("Ficha Simples Defensor");
        jMenuItemFichaSimplesDefensor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFichaSimplesDefensorActionPerformed(evt);
            }
        });
        jMenu10.add(jMenuItemFichaSimplesDefensor);

        jMenuItem21.setText("Ficha Padrão Atacante");
        jMenuItem21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem21ActionPerformed(evt);
            }
        });
        jMenu10.add(jMenuItem21);

        jMenuItem22.setText("Ficha Padrão Defensor");
        jMenuItem22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem22ActionPerformed(evt);
            }
        });
        jMenu10.add(jMenuItem22);

        jMenuItemMobs.setText("MOBs");
        jMenuItemMobs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemMobsActionPerformed(evt);
            }
        });
        jMenu10.add(jMenuItemMobs);

        jMenuItem20.setText("Mostrar Lvl e Lvl Nen");
        jMenuItem20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem20ActionPerformed(evt);
            }
        });
        jMenu10.add(jMenuItem20);

        jMenuBar1.add(jMenu10);

        jMenu13.setText("Iniciativa");

        jCheckBoxMenuItemIniciativaAutomatica.setText("Iniciativa Automática");
        jCheckBoxMenuItemIniciativaAutomatica.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxMenuItemIniciativaAutomaticaActionPerformed(evt);
            }
        });
        jMenu13.add(jCheckBoxMenuItemIniciativaAutomatica);

        jMenuItemRolarDados.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        jMenuItemRolarDados.setText("Rolar Dados");
        jMenuItemRolarDados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRolarDadosActionPerformed(evt);
            }
        });
        jMenu13.add(jMenuItemRolarDados);

        jMenuItemVerIniciativas.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, java.awt.event.InputEvent.ALT_DOWN_MASK));
        jMenuItemVerIniciativas.setText("Ver Iniciativas");
        jMenuItemVerIniciativas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemVerIniciativasActionPerformed(evt);
            }
        });
        jMenu13.add(jMenuItemVerIniciativas);

        jMenuBar1.add(jMenu13);

        jMenu4.setText("Corpo");

        jMenuItemVisualizarNen.setText("Visualizar Nen");
        jMenuItemVisualizarNen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemVisualizarNenActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItemVisualizarNen);

        jMenuItemRodarTurnos.setText("Rodar Vários Turnos");
        jMenuItemRodarTurnos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRodarTurnosActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItemRodarTurnos);

        jMenuItemAdicionarCorpos.setText("Adicionar Corpos");
        jMenuItemAdicionarCorpos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAdicionarCorposActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItemAdicionarCorpos);

        jMenuItemZerarCorpoAtacante.setText("Zerar Corpo Atacante");
        jMenuItemZerarCorpoAtacante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemZerarCorpoAtacanteActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItemZerarCorpoAtacante);

        jMenuItemZerarCorpoDefensor.setText("Zerar Corpo Defensor");
        jMenuItemZerarCorpoDefensor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemZerarCorpoDefensorActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItemZerarCorpoDefensor);

        jMenuItemZerarTodosCorpos.setText("Zerar Todos Corpos");
        jMenuItemZerarTodosCorpos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemZerarTodosCorposActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItemZerarTodosCorpos);

        jMenuBar1.add(jMenu4);

        jMenu3.setText("Shu");

        jMenuItemZerarTodosShus.setText("Zerar Todos Shus");
        jMenuItemZerarTodosShus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemZerarTodosShusActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItemZerarTodosShus);

        jMenuBar1.add(jMenu3);

        jMenu6.setText("Nen");

        jMenuItemMostrarKens.setText("Mostrar Kens");
        jMenuItemMostrarKens.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemMostrarKensActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItemMostrarKens);

        jMenuItemPersons.setText("Mostrar Personagens por Categoria");
        jMenuItemPersons.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemPersonsActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItemPersons);

        jMenuItemDeterminacaoPenalidade.setText("Determinação/Penalidade");
        jMenuItemDeterminacaoPenalidade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDeterminacaoPenalidadeActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItemDeterminacaoPenalidade);

        jMenuBar1.add(jMenu6);

        jMenu9.setText("HPs");

        jMenuItemMostrarHps.setText("Mostrar Todos HPs");
        jMenuItemMostrarHps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemMostrarHpsActionPerformed(evt);
            }
        });
        jMenu9.add(jMenuItemMostrarHps);

        jMenuItemEditarHpAtacante.setText("Editar HP Atacante");
        jMenuItemEditarHpAtacante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEditarHpAtacanteActionPerformed(evt);
            }
        });
        jMenu9.add(jMenuItemEditarHpAtacante);

        jMenuItemEditarHpDefensor.setText("Editar HP Defensor");
        jMenuItemEditarHpDefensor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEditarHpDefensorActionPerformed(evt);
            }
        });
        jMenu9.add(jMenuItemEditarHpDefensor);

        jMenuItem4.setText("Operar HP Atacante");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu9.add(jMenuItem4);

        jMenuItem5.setText("Operar HP Defensor");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu9.add(jMenuItem5);

        jMenuItemCurarAtacante.setText("Curar Atacante");
        jMenuItemCurarAtacante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCurarAtacanteActionPerformed(evt);
            }
        });
        jMenu9.add(jMenuItemCurarAtacante);

        jMenuItemCurarDefensor.setText("Curar Defensor");
        jMenuItemCurarDefensor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCurarDefensorActionPerformed(evt);
            }
        });
        jMenu9.add(jMenuItemCurarDefensor);

        jMenuBar1.add(jMenu9);

        jMenu7.setText("MOPs");

        jMenuItemMostrarMops.setText("Mostrar Todos MOPs");
        jMenuItemMostrarMops.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemMostrarMopsActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItemMostrarMops);

        jMenuItemEditarMopAtacante.setText("Editar MOP Atacante");
        jMenuItemEditarMopAtacante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEditarMopAtacanteActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItemEditarMopAtacante);

        jMenuItemEditarMopDefensor.setText("Editar MOP Defensor");
        jMenuItemEditarMopDefensor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEditarMopDefensorActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItemEditarMopDefensor);

        jMenuItem6.setText("Operar MOP Atacante");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem6);

        jMenuItem7.setText("Operar MOP Defensor");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem7);

        jMenuItemCurarMopAtacante.setText("Curar MOP Atacante");
        jMenuItemCurarMopAtacante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCurarMopAtacanteActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItemCurarMopAtacante);

        jMenuItemCurarMopDefensor.setText("Curar MOP Defensor");
        jMenuItemCurarMopDefensor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCurarMopDefensorActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItemCurarMopDefensor);

        jMenuBar1.add(jMenu7);

        jMenu8.setText("Dano");

        jMenuItemDanoEmArea.setText("Dano em Área");
        jMenuItemDanoEmArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDanoEmAreaActionPerformed(evt);
            }
        });
        jMenu8.add(jMenuItemDanoEmArea);

        jMenuItemDps.setText("Dano por Segundo");
        jMenuItemDps.setEnabled(false);
        jMenuItemDps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemDpsActionPerformed(evt);
            }
        });
        jMenu8.add(jMenuItemDps);

        jMenuBar1.add(jMenu8);

        jMenu2.setText("Stun");

        jMenuItemStunEmArea.setText("Stun em Área");
        jMenuItemStunEmArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemStunEmAreaActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemStunEmArea);

        jMenuItem8.setText("Zerar Stun Atacante");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem8);

        jMenuItem9.setText("Zerar Stun Defensor");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem9);

        jMenuItem1.setText("Zerar Stuns");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        jMenu11.setText("Sorte");

        jMenuItemResetarSortes.setText("Resetar Sortes");
        jMenuItemResetarSortes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemResetarSortesActionPerformed(evt);
            }
        });
        jMenu11.add(jMenuItemResetarSortes);

        jMenuItem14.setText("Gastar Sorte Atacante");
        jMenuItem14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem14ActionPerformed(evt);
            }
        });
        jMenu11.add(jMenuItem14);

        jMenuItem15.setText("Gastar Sorte Defensor");
        jMenuItem15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem15ActionPerformed(evt);
            }
        });
        jMenu11.add(jMenuItem15);

        jMenuBar1.add(jMenu11);

        jMenu12.setText("Dias");

        jMenuItemRodarDias.setText("Rodar Dias");
        jMenuItemRodarDias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRodarDiasActionPerformed(evt);
            }
        });
        jMenu12.add(jMenuItemRodarDias);

        jMenuBar1.add(jMenu12);

        jMenu14.setText("Treino");

        jMenuItemFinalizarBatalha.setText("Finalizar Batalha");
        jMenuItemFinalizarBatalha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemFinalizarBatalhaActionPerformed(evt);
            }
        });
        jMenu14.add(jMenuItemFinalizarBatalha);

        jMenuItemZerarDados.setText("Zerar Dados");
        jMenuItemZerarDados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemZerarDadosActionPerformed(evt);
            }
        });
        jMenu14.add(jMenuItemZerarDados);

        jMenuBar1.add(jMenu14);

        jMenu5.setText("MOBs");

        jMenuItemMobsHps.setText("Mostrar HPs");
        jMenuItemMobsHps.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemMobsHpsActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItemMobsHps);

        jMenuBar1.add(jMenu5);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void initTableRyuAtacante(Ficha atacante) {
        DefaultTableModel dtm = (DefaultTableModel) jTableRyuAtacante.getModel();
        
        for (int i = 1; i < 21; i++) {
            int ryu = 5 * i;
            int valor = Calculadora.getRen(atacante, ryu, jComboBoxNenAtacante.getSelectedItem().toString());
            String linha;
            switch (ryu) {
                case 5:
                    linha = "0" + ryu + "%";
                    break;
                case 10:
                    linha = "TEN";
                    break;
                case 50:
                    linha = "KEN";
                    break;
                case 100:
                    linha = "KOU";
                    break;
                default:
                    linha = ryu + "%";
                    break;
            }
            Object[] vetor = {linha, valor};
            dtm.removeRow(i - 1);
            dtm.insertRow(i - 1, vetor);
        }
    }
    
    private void initTableRyuDefensor(Ficha defensor) {
        DefaultTableModel dtm = (DefaultTableModel) jTableRyuDefensor.getModel();
        
        for (int i = 1; i < 21; i++) {
            int ryu = 5 * i;
            int valor = Calculadora.getRen(defensor, ryu, jComboBoxNenDefensor.getSelectedItem().toString());
            String linha;
            switch (ryu) {
                case 5:
                    linha = "0" + ryu + "%";
                    break;
                case 10:
                    linha = "TEN";
                    break;
                case 50:
                    linha = "KEN";
                    break;
                case 100:
                    linha = "KOU";
                    break;
                default:
                    linha = ryu + "%";
                    break;
            }
            Object[] vetor = {linha, valor};
            dtm.removeRow(i - 1);
            dtm.insertRow(i - 1, vetor);
        }
    }
    
    private void initInfoAtacante(Ficha atacante) {
        jTextPaneDescricaoBreveAtacante.setText(atacante.getDescricaoBreve());
        jLabelStunAtacante.setText(String.valueOf(atacante.getStun()));
        
        jLabelVelKmAtacante.setText(String.valueOf(atacante.getVel()));
        jLabelVelMsAtacante.setText(String.valueOf(atacante.getVelMs()));
        
        jLabelIniAtacante.setText(String.valueOf(atacante.getIni()));
        jLabelEsqAtacante.setText(String.valueOf(atacante.getEsq()));
        jLabelCrtAtacante.setText(String.valueOf(20 - atacante.getCrt()));
        jLabelSrtAtacante.setText(String.valueOf(atacante.getSorte()) + "/" + String.valueOf(atacante.getSorteDiaria()));
        jLabelZtsAtacante.setText(String.valueOf(atacante.getPerZts()));
        jLabelEnAtacante.setText(String.valueOf(atacante.getEn()));
        
        jLabelEmsAtacante.setText(String.valueOf(atacante.getModEms()));
        jLabelRyuAtacante.setText(String.valueOf(atacante.getRyu()));
        
        jLabelForAtacante.setText(String.valueOf(atacante.getPerFor()));
        jLabelConAtacante.setText(String.valueOf(atacante.getPerCon()));
        jLabelDexAtacante.setText(String.valueOf(atacante.getPerDex()));
        jLabelIntAtacante.setText(String.valueOf(atacante.getPerInt()));
        jLabelCarAtacante.setText(String.valueOf(atacante.getPerCar()));
        jLabelMenAtacante.setText(String.valueOf(atacante.getPerMen()));
    }

    private void initInfoDefensor(Ficha defensor) {
        jTextPaneDescricaoBreveDefensor.setText(defensor.getDescricaoBreve());
        jLabelStunDefensor.setText(String.valueOf(defensor.getStun()));
        
        jLabelVelKmDefensor.setText(String.valueOf(defensor.getVel()));
        jLabelVelMsDefensor.setText(String.valueOf(defensor.getVelMs()));
        
        jLabelIniDefensor.setText(String.valueOf(defensor.getIni()));
        jLabelEsqDefensor.setText(String.valueOf(defensor.getEsq()));
        jLabelCrtDefensor.setText(String.valueOf(20 - defensor.getCrt()));
        jLabelSrtDefensor.setText(String.valueOf(defensor.getSorte()) + "/" + String.valueOf(defensor.getSorteDiaria()));
        jLabelZtsDefensor.setText(String.valueOf(defensor.getPerZts()));
        jLabelEnDefensor.setText(String.valueOf(defensor.getEn()));
        
        jLabelEmsDefensor.setText(String.valueOf(defensor.getModEms()));
        jLabelRyuDefensor.setText(String.valueOf(defensor.getRyu()));
        
        jLabelForDefensor.setText(String.valueOf(defensor.getPerFor()));
        jLabelConDefensor.setText(String.valueOf(defensor.getPerCon()));
        jLabelDexDefensor.setText(String.valueOf(defensor.getPerDex()));
        jLabelIntDefensor.setText(String.valueOf(defensor.getPerInt()));
        jLabelCarDefensor.setText(String.valueOf(defensor.getPerCar()));
        jLabelMenDefensor.setText(String.valueOf(defensor.getPerMen()));
    }
    
    private void jButtonEditaCorpoAtacanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditaCorpoAtacanteActionPerformed
        if (!validaAtacante()) {
            return;
        }
        AlgoritmoPrincipal.setFicha(AlgoritmoPrincipal.getAtacante());
        
//        new ViewEditarCorpo().setVisible(true);
        new View_corpo(null, true).setVisible(true);
    }//GEN-LAST:event_jButtonEditaCorpoAtacanteActionPerformed

    private void jButtonEditaCorpoDefensorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditaCorpoDefensorActionPerformed
        if (!validaDefensor()) {
            return;
        }
        AlgoritmoPrincipal.setFicha(AlgoritmoPrincipal.getDefensor());
        
//        new ViewEditarCorpo().setVisible(true);
        new View_corpo(null, true).setVisible(true);
    }//GEN-LAST:event_jButtonEditaCorpoDefensorActionPerformed

    private void jComboBoxDefensorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxDefensorActionPerformed
        
        if (jComboBoxDefensor.getSelectedItem() == null ||
            jComboBoxDefensor.getSelectedItem().toString().equals("SEM DEFESA")) {
            
            // limpando informações de habilidade
            jLabelDanoAtaqueDefensor.setText("");
            jLabelVolumeAtaqueDefensor.setText("");
            
            // limpando informações de habilidade
            jLabelDadoDanoDefensor.setText("");
            jTextPaneDescSkillDefensor.setText("");
            jLabelActDefensor.setText("");
            jLabelVolDefensor.setText("");
            jLabelCrtSkillDefensor.setText("");
            jLabelSkillQtdDefensor.setText("");
            
            jLabelDanoAtaqueDefensor.setText(String.valueOf(AlgoritmoPrincipal.getDefensor().getPerFor()));
            jLabelVolumeAtaqueDefensor.setText("0");
            jTextFieldAuraBonusDefensor.setText("0");
            jLabelAuraBonusCalculadaDefensor.setText("0");
            return;
        }

        Ficha defensor = AlgoritmoPrincipal.getDefensor();
        String nomeHabilidade = jComboBoxDefensor.getSelectedItem().toString();
        Habilidades habilidade = defensor.getHabilidade(nomeHabilidade);
        double pop = Calculadora.getPop(defensor.getAtrRef(), jComboBoxNenDefensor.getSelectedItem().toString());
        int auraBonus;
        
        if (habilidade.isMan()) {
            auraBonus = (int) (/*habilidade.getRestricao() **/ defensor.getPerMan());
        } else if (habilidade.isMat()) {
            auraBonus = (int) (/*habilidade.getRestricao() **/ defensor.getPerMat());
        } else {
            auraBonus = 0;
        }
        jTextFieldAuraBonusDefensor.setText(String.valueOf(auraBonus));
        
        int ren = (int) Calculadora.getRyu(50, 100, pop * auraBonus);
        jLabelAuraBonusDefensor.setText(String.valueOf((int) (habilidade.getRestricao() * ren)));
        jLabelAuraBonusCalculadaDefensor.setText(jTextFieldAuraBonusDefensor.getText());
        
        jLabelDanoAtaqueDefensor.setText(habilidade.getDados()+" +"+String.valueOf(habilidade.getDano()));
        jLabelVolumeAtaqueDefensor.setText(String.valueOf(habilidade.getVol()));
        jTextFieldQtdDefesaDefensor.setText(String.valueOf(habilidade.getQtd()));
        jTextFieldQtdAcertoDefensor.setText(String.valueOf(habilidade.getQtd()));
        
        AlgoritmoPrincipal.setFicha(defensor);
        AlgoritmoPrincipal.setLinha(jComboBoxDefensor.getSelectedItem().toString());
        try {
            AlgoritmoPrincipal.setValor(Integer.parseInt(jTextFieldQtdDefesaDefensor.getText()));
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Valor de \"Quantidade de Defesa\" inválido!",
                                          e.toString(), JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (nomeHabilidade.equals("SEM DEFESA")) {
            return;
        }
        if (defensor.getHabilidade(nomeHabilidade).isMat()) {
            AlgoritmoPrincipal.setLinha(nomeHabilidade);
            new View_conjurada(null, true).setVisible(true);
//            if (defensor.getMopAtual() != AlgoritmoPrincipal.getValor()) {
//                jLabelMopFinalDefensor.setText(String.valueOf(defensor.getMopAtual()));
//            }
            jProgressBarMopDefensor.setValue(defensor.getMopAtual());
        }
        
        // setando valores padrao
        jTextFieldRyuDefensor.setText(String.valueOf(defensor.getHabilidade(nomeHabilidade).getRyu()));
        jCheckBoxGastouRyuDefensor.setSelected(defensor.getHabilidade(nomeHabilidade).isGastaRyu());
        
        // desmarcando as checkbox
        jCheckBoxDefendeu.setSelected(false);
        jCheckBoxGastouRyuDefensor.setSelected(false);
        jCheckBoxGastouRyuDefensor.setSelected(defensor.getHabilidade(nomeHabilidade).isGastaRyu());
        
        // setando mesma quantidade de defesa que acerto de ataques, por padrão
        atualizaDefMult();
        
        initInfoDefensorHabilidade(defensor, defensor.getHabilidade(nomeHabilidade));
    }//GEN-LAST:event_jComboBoxDefensorActionPerformed

    private void setTreinosPosBatalha(Ficha personagem, Habilidades habilidade) {
        int ryu = Integer.parseInt(jTextFieldRyuAtacante.getText());
        TreinoPosBatalha tpb;
        if (AlgoritmoPrincipal.containsTpb(personagem.getNick())) {
            tpb = AlgoritmoPrincipal.getTpb(personagem.getNick());
        } else {
            tpb = new TreinoPosBatalha();
            tpb.setNick(personagem.getNick());
            // inserindo no algoritmo principal
            AlgoritmoPrincipal.putTpb(tpb.getNick(), tpb);
        }
        
        if (ryu >= 50) {
            tpb.addAop();
        }
        if (ryu > 50) {
            tpb.addRyu();
        }
        if (personagem.getMopAtual() < 1000) {
            tpb.addMop();
        }
        
        if (habilidade == null) {
            return;
        }
        
        if (habilidade.isSomarRef()) {
            tpb.addRef();
        }
        if (habilidade.isSomarEms() || habilidade.isTrs()) {
            tpb.addEms();
        }
        if (habilidade.isSomarMan() || habilidade.isMan()) {
            tpb.addMan();
        }
        if (habilidade.isSomarMat() || habilidade.isMat()) {
            tpb.addMat();
        }
        if (habilidade.isSomarTrs()) {
            tpb.addTrs();
        }
        if (habilidade.isSomarEsp()) {
            tpb.addEsp();
        }
        if (habilidade.isSomarCdn()) {
            tpb.addCdn();
        }
        // ten é dificil mesmo
        if (habilidade.isSomarTen()) {
            tpb.addTen();
        }
        if (!tpb.contaisHab(habilidade.getNome())) {
            tpb.addHab(habilidade.getNome());
        }
        if (!tpb.contaisPro(habilidade.getNome())) {
            tpb.addPro(habilidade.getNome());
        }
    }
    
    private boolean atribuirValoresPadrao(Ficha atacante, Ficha defensor) {
        // testando em atacante
        try {
            Integer.parseInt(jTextFieldRyuAtacante.getText());
        } catch (NumberFormatException e) {
            jTextFieldRyuAtacante.setText("50");
        }
        
        try {
            Integer.parseInt(jTextFieldDadoAtacante.getText());
        } catch (NumberFormatException e) {
            jTextFieldDadoAtacante.setText("0");
        }
        
        try {
            Integer.parseInt(jTextFieldAuraBonusAtacante.getText());
        } catch (NumberFormatException e) {
            jTextFieldAuraBonusAtacante.setText("0");
        }

        try {
            Integer.parseInt(jTextFieldQtdAtaqueAtacante.getText());
        } catch (NumberFormatException e) {
            jTextFieldQtdAtaqueAtacante.setText("1");
        }

        try {
            Integer.parseInt(jTextFieldQtdCriticoAtacante.getText());
        } catch (NumberFormatException e) {
            jTextFieldQtdCriticoAtacante.setText("0");
        }

        try {
            Integer.parseInt(jTextFieldQtdAcertoAtacante.getText());
        } catch (NumberFormatException e) {
            jTextFieldQtdAcertoAtacante.setText("1");
        }

        try {
            atacante.setShu(Integer.parseInt(jTextFieldShuAtacante.getText()));
        } catch (NumberFormatException e) {
            jTextFieldShuAtacante.setText(String.valueOf(atacante.getShu()));
        }
        
        // como controlamos o erros acima, nao havera NumberFormatException aqui
        if (Integer.parseInt(jTextFieldQtdAtaqueAtacante.getText()) <
            Integer.parseInt(jTextFieldQtdCriticoAtacante.getText())) {
            
            JOptionPane.showMessageDialog(null, "Qtd Ataque menor que Qtd Critico",
                                          "Erro de lógica", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (Integer.parseInt(jTextFieldQtdAtaqueAtacante.getText()) <
            Integer.parseInt(jTextFieldQtdAcertoAtacante.getText())) {
            
            JOptionPane.showMessageDialog(null, "Qtd Ataque menor que Qtd Acerto", "Erro de lógica",
                                          JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        // testanto em defensor
        try {
            Integer.parseInt(jTextFieldRyuDefensor.getText());
        } catch (NumberFormatException e) {
            jTextFieldRyuDefensor.setText("50");
        }

        try {
            Integer.parseInt(jTextFieldDadoDefensor.getText());
        } catch (NumberFormatException e) {
            jTextFieldDadoDefensor.setText("0");
        }

        try {
            Integer.parseInt(jTextFieldAuraBonusDefensor.getText());
        } catch (NumberFormatException e) {
            jTextFieldAuraBonusDefensor.setText("0");
        }

        try {
            Integer.parseInt(jTextFieldQtdDefesaDefensor.getText());
        } catch (NumberFormatException e) {
            jTextFieldQtdDefesaDefensor.setText("0");
        }

        try {
            Integer.parseInt(jTextFieldQtdCriticoDefensor.getText());
        } catch (NumberFormatException e) {
            jTextFieldQtdCriticoDefensor.setText("0");
        }

        try {
            Integer.parseInt(jTextFieldQtdAcertoDefensor.getText());
        } catch (NumberFormatException e) {
            jTextFieldQtdAcertoDefensor.setText("0");
        }

        try {
            defensor.setShu(Integer.parseInt(jTextFieldShuDefensor.getText()));
        } catch (NumberFormatException e) {
            jTextFieldShuDefensor.setText(String.valueOf(defensor.getShu()));
        }

        // como controlamos o erros acima, nao havera NumberFormatException aqui
        if (Integer.parseInt(jTextFieldQtdDefesaDefensor.getText()) <
            Integer.parseInt(jTextFieldQtdCriticoDefensor.getText())) {
            
            JOptionPane.showMessageDialog(null, "Qtd Defesa menor que Qtd Critico",
                    "Erro de lógica", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (Integer.parseInt(jTextFieldQtdDefesaDefensor.getText()) <
            Integer.parseInt(jTextFieldQtdAcertoDefensor.getText())) {
            
            JOptionPane.showMessageDialog(null, "Qtd Defesa menor que Qtd Acerto",
                    "Erro de lógica", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        
        return true;
    }
    
    private void atualizarJProgressBars(Ficha atacante, Ficha defensor) {
        jProgressBarHpAtacante.setMaximum(atacante.getHpMax());
        jProgressBarHpDefensor.setMaximum(defensor.getHpMax());
        jProgressBarHpAtacante.setMinimum(-atacante.getHpNegMax());
        jProgressBarHpDefensor.setMinimum(-defensor.getHpNegMax());
        jProgressBarMopAtacante.setMaximum(atacante.getMopMax());
        jProgressBarMopDefensor.setMaximum(defensor.getMopMax());
        jProgressBarHpAtacante.setValue(atacante.getHpAtual());
        jProgressBarHpDefensor.setValue(defensor.getHpAtual());
        jProgressBarMopAtacante.setValue(atacante.getMopAtual());
        jProgressBarMopDefensor.setValue(defensor.getMopAtual());
    }
    
    private boolean podeAtacar(Ficha atacante) {
        if (atacante.getStun() > 0) {
            JOptionPane.showMessageDialog(null, "O atacante esta stunado!", "Erro!",
                                          JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (atacante.isDesmaiado()) {
            JOptionPane.showMessageDialog(null, "O atacante esta desmaiado!", "Erro!",
                                          JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }
    
    private boolean habilidadesSelecionadas() {
        if (jComboBoxAtacante.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "Escolha um Ataque!", "Error!", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (jComboBoxDefensor.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(null, "Escolha uma Defesa!", "Error!", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }
    
    private void jButtonCalcularAtaqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCalcularAtaqueActionPerformed
        /*if (!AlgoritmoPrincipal.setAtacante(jTextFieldAtacante.getText().toUpperCase()) ||
            !AlgoritmoPrincipal.setDefensor(jTextFieldDefensor.getText().toUpperCase())) {
            
            JOptionPane.showMessageDialog(null, "Atacante e/ou Defensor Incorreto", "Erro",
                                          JOptionPane.ERROR_MESSAGE);
            return;
        }*/
        
        if (AlgoritmoPrincipal.getAtacante() == null ||
            AlgoritmoPrincipal.getDefensor() == null) {
            
            JOptionPane.showMessageDialog(null, "Atacante e/ou Defensor Incorreto", "Erro",
                                          JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        // declaracao de atacante e defensor
        Ficha atacante = AlgoritmoPrincipal.getAtacante();
        Ficha defensor = AlgoritmoPrincipal.getDefensor();
        
        // testando capacidade do atacante de atacar
        if (!podeAtacar(atacante)) {
            return;
        }
        
        // atribuindo valores default para entradas nulas
        if (!atribuirValoresPadrao(atacante, defensor)) {
            return;
        }
        
        
        // SETANDO VALORES INICIAIS
        
        // setando valores na jProgressBarHp e jProgressBarMop
        //atualizarJProgressBars(atacante, defensor);
        // setando cor das progressBars
        //atualizarCorJProgressBarsHp();
        
        // setando valores nas labels de informacoes
        jLabelHpAtualAtacante.setText(String.valueOf(atacante.getHpAtual()));
        jLabelHpAtualDefensor.setText(String.valueOf(defensor.getHpAtual()));
        
        
        // INICIALIZANDO
        
        Calculadora.init();
        
        if (!habilidadesSelecionadas()) {
            return;
        }
        // lendo habilidades
        String habilidadeAtacante = jComboBoxAtacante.getSelectedItem().toString();
        String habilidadeDefensor = jComboBoxDefensor.getSelectedItem().toString();
        
        
        // setando personagens emBatalha se ja não estiverem emBatalha
        if (!AlgoritmoPrincipal.containsEmBatalha(atacante.getNick())) {
            AlgoritmoPrincipal.addEmBatalha(atacante.getNick());
        }
        if (!AlgoritmoPrincipal.containsEmBatalha(defensor.getNick())) {
            AlgoritmoPrincipal.addEmBatalha(defensor.getNick());
        }
        
        
        // PREPARANDO TREINO POS BATALHA
        if (!atacante.isCriaturaDoMestre()) {
            setTreinosPosBatalha(atacante, atacante.getHabilidade(habilidadeAtacante));
        }
        if (!defensor.isCriaturaDoMestre()) {
            setTreinosPosBatalha(defensor, defensor.getHabilidade(habilidadeDefensor));
        }
        
        
        // INICIO DA CALCULADORA AQUI
        
        // setando atacante e defensor na calculadora
        Calculadora.setAtacante(atacante);
        Calculadora.setDefensor(defensor);
        
        
        // calculando dano
        int dano = Calculadora.getDano(habilidadeAtacante,
                                       jComboBoxNenAtacante.getSelectedItem().toString(),
                                       Integer.parseInt(jTextFieldRyuAtacante.getText()),
                                       Integer.parseInt(jTextFieldDadoAtacante.getText()),
                                       Integer.parseInt(jTextFieldAuraBonusAtacante.getText()),
                                       jCheckBoxGastouRyuAtacante.isSelected());
        Calculadora.setDano(dano);
        
        // calculando defesa
        int defesa = Calculadora.getDefesa(habilidadeDefensor,
                                       jComboBoxNenDefensor.getSelectedItem().toString(),
                                       jCheckBoxDefendeu.isSelected(),
                                       Integer.parseInt(jTextFieldRyuDefensor.getText()),
                                       Integer.parseInt(jTextFieldDadoDefensor.getText()),
                                       Integer.parseInt(jTextFieldAuraBonusDefensor.getText()),
                                       jCheckBoxGastouRyuDefensor.isSelected());
        Calculadora.setDefesa(defesa);
        
        // calculando defesa passiva
        int defesaPassiva = Calculadora.getDefesaPassiva(
                                        jComboBoxNenDefensor.getSelectedItem().toString(),
                                        jCheckBoxDefendeu.isSelected(),
                                        Integer.parseInt(jTextFieldRyuDefensor.getText()));
        Calculadora.setDefesaPassiva(defesaPassiva);
        
        // dano final
        int danoFinal = Calculadora.calculaDanoFinal(dano,
                                        atacante.getHabilidade(habilidadeAtacante).isTrs(),
                                        jCheckBoxDanoPerfurante.isSelected());
        Calculadora.setDanoFinal(danoFinal);
        
        // calculando dano passivo
        int danoFinalPassivo = Calculadora.calculaDanoFinalPassivo(dano,
                                        atacante.getHabilidade(habilidadeAtacante).isTrs(),
                                        jCheckBoxDanoPerfurante.isSelected());
        Calculadora.setDanoFinalPassivo(danoFinalPassivo);
        
        
        // causando dano
        int qtdCritico = Integer.parseInt(jTextFieldQtdCriticoAtacante.getText());
        int qtdAcerto = Integer.parseInt(jTextFieldQtdAcertoAtacante.getText());
        int qtdDefesa = Integer.parseInt(jTextFieldQtdAcertoDefensor.getText());
        
        if (qtdCritico == 0 && jCheckBoxDanoCritico.isSelected()) {
            qtdCritico = 1;
        }

        // aplicando dano no defensor
        Calculadora.aplicaDano(qtdAcerto, qtdCritico, qtdDefesa, Calculadora.getDefensor());
        
        // invocando teste de desmaio
        if (defensor.getHpAtual() < -defensor.getPerCon() && qtdAcerto > 0 && AlgoritmoPrincipal.getValor() > 0) {
            AlgoritmoPrincipal.setFicha(defensor);
            new View_testeCon(null, true).setVisible(true);
        }
        
        // setando dano final na label
        jLabelDanoFinal.setText(String.valueOf(Calculadora.getDanoFinal()));
        
        
        // calcula dano de rebote
        int danoRebote = Calculadora.getDanoRebote(jCheckBoxDanoRebote.isSelected(), atacante.getPerCon());
        Calculadora.setDano(danoRebote);
        Calculadora.setDanoFinal(danoRebote);
        
        // setando novos valores de defesa
        Calculadora.setDefesa(Calculadora.getDefesa());
        Calculadora.setDefesaPassiva(Calculadora.getDefesa());
        
        // calculando dano passivo
        int danoReboteFinalPassivo = Calculadora.calculaDanoFinalPassivo(danoRebote,
                                                 atacante.getHabilidade(habilidadeAtacante).isTrs(),
                                                 jCheckBoxDanoPerfurante.isSelected());
        if (danoReboteFinalPassivo > 0) {
            Calculadora.setDanoFinalPassivo(danoReboteFinalPassivo);
        } else { // danoReboteFinalPassivo <= 0
            Calculadora.setDanoFinalPassivo(0);
        }

        
        // aplicando possivel dano no atacante
        if (danoRebote > 0) {
            Calculadora.aplicaDano(qtdAcerto, 0, qtdDefesa, Calculadora.getAtacante());
        }
        // invocando teste de desmaio
        if (atacante.getHpAtual() < -atacante.getPerCon() && qtdAcerto > 0 && AlgoritmoPrincipal.getValor() > 0) {
            AlgoritmoPrincipal.setFicha(atacante);
            new View_testeCon(null, true).setVisible(true);
        }
        // invocando Estatisticas
        if (qtdAcerto > 1 && danoReboteFinalPassivo > 0) {
            AlgoritmoPrincipal.setFicha(atacante);
            new ViewEstatisticas().setVisible(true);
        }
        
        
        // CALCULANDO OS GASTOS
        
        // Atacante
        int mop = atacante.getMopAtual();
        int ryu = Integer.parseInt(jTextFieldRyuAtacante.getText());
        int qtdAtaque = Integer.parseInt(jTextFieldQtdAtaqueAtacante.getText());
        int volume = atacante.getHabilidade(habilidadeAtacante).getVol();
        
        // reduzindo aura do ataque, se gastouRyu estiver selecionado
        if (jCheckBoxGastouRyuAtacante.isSelected()) {
            // reduz o ryu gasto
            mop -= Calculadora.calculaGastoRyu(ryu, atacante.getAop(), qtdAtaque, volume,
                    Integer.parseInt(jTextFieldAuraBonusAtacante.getText()));
        }
        
        // reduz mop da alteração no ryu de ataque
        if (ryu > 50) {
            mop -= Calculadora.gastoRyuExcedente(ryu, atacante.getNivelCdn());
        }
        
        // reduz mop da alteração no ryu de investida
        ryu = Calculadora.getRyuInvestidaAtacante();
        if (ryu > 50) {
            mop -= Calculadora.gastoRyuExcedente(ryu, atacante.getNivelCdn());
        }
        
        // reduz mop se usou ren
        if (jCheckBoxUsouRenAtacante.isSelected()) {
            mop -= Calculadora.calculaGastoRen(atacante.getAop());
        }
        
        // setando novo valor de mop
        if (atacante.setMopAtual(mop) != 0) {
            JOptionPane.showMessageDialog(null, "O personagem " + atacante.getNick() + " teve seu MOP zerado!\n" +
                    "E entrou em estado de zetsu.", "Success!", JOptionPane.INFORMATION_MESSAGE);
        }
        
        // Defensor
        mop = defensor.getMopAtual();
        ryu = Integer.parseInt(jTextFieldRyuDefensor.getText());
        // se for SEM DEFESA, lança NullPointerException
        try {
            volume = defensor.getHabilidade(habilidadeDefensor).getVol();
        } catch (NullPointerException e) {
            volume = 0;
        }
        
        // reduzindo aura do ataque, se gastouAura estiver selecionado
        if (jCheckBoxGastouRyuDefensor.isSelected()) {
            // reduz o ryu gasto
            mop -= Calculadora.calculaGastoRyu(ryu, defensor.getAop(), qtdDefesa, volume,
                    Integer.parseInt(jTextFieldAuraBonusAtacante.getText()));
        }
        
        // reduz mop da alteração no ryu de defesa
        if (ryu > 50) {
            mop -= Calculadora.gastoRyuExcedente(ryu, defensor.getNivelCdn());
        }
        
        // reduz mop da alteração no ryu de investida
        ryu = Calculadora.getRyuInvestidaDefensor();
        if (ryu > 50) {
            mop -= Calculadora.gastoRyuExcedente(ryu, defensor.getNivelCdn());
        }
        
        // reduz mop se usou ren
        if (jCheckBoxUsouRenDefensor.isSelected()) {
            mop -= Calculadora.calculaGastoRen(defensor.getAop());
        }
        
        // setando novo valor de mop
        if (defensor.setMopAtual(mop) != 0) {
            JOptionPane.showMessageDialog(null, "O personagem " + defensor.getNick() + " teve seu MOP zerado!\n" +
                    "E entrou em estado de zetsu.", "Success!", JOptionPane.INFORMATION_MESSAGE);
        }
        
        // avisando se o personagem morreu
        if (defensor.getHpAtual() <= -defensor.getHpNegMax()) {
            JOptionPane.showMessageDialog(null, "O personagem " + defensor.getNick() + " morreu em batalha...\n",
//                    + "E seus status como Hp e MOP foram resetados!",
                    "Detah!", JOptionPane.INFORMATION_MESSAGE);
//            resetarStatus(defensor);
        }
        
        if (atacante.getHpAtual() <= -atacante.getHpNegMax()) {
            JOptionPane.showMessageDialog(null, "O personagem " + atacante.getNick() + " morreu em batalha...\n",
//                    + "E seus status como Hp e MOP foram resetados!",
                    "Detah!", JOptionPane.INFORMATION_MESSAGE);
//            resetarStatus(atacante);
        }
        
        
        // FIM DA CALCULADORA AQUI
        
        
        // setando valores defalut em atacante
        //jTextFieldQtdAtaqueAtacante.setText("1");
        //jTextFieldQtdAcertoAtacante.setText("1");
        jTextFieldQtdCriticoAtacante.setText("0");
        jCheckBoxDanoCritico.setSelected(false);
        jCheckBoxUsouRenAtacante.setSelected(false);
        
        // setando valores defalut em defensor
//        jTextFieldQtdDefesaDefensor.setText("0");
//        jTextFieldQtdAcertoDefensor.setText("0");
//        jTextFieldQtdCriticoDefensor.setText("0");
        //jCheckBoxDefendeu.setSelected(false);
        jCheckBoxUsouRenDefensor.setSelected(false);
        
        // setando valores default em informacoes
        jLabelNomePersonagemAtacante.setText(atacante.getNick());
        // setando imagem do atacante
        jProgressBarHpAtacante.setMaximum(atacante.getHpMax());
        jProgressBarHpAtacante.setMinimum(-atacante.getHpNegMax());
        jProgressBarHpAtacante.setValue(atacante.getHpAtual());
        jProgressBarMopAtacante.setMaximum(atacante.getMopMax());
        jProgressBarMopAtacante.setValue(atacante.getMopAtual());
        jLabelHpFinalAtacante.setText(String.valueOf(atacante.getHpAtual()));
        // setando imagem do defensor
        jProgressBarHpDefensor.setMaximum(defensor.getHpMax());
        jProgressBarHpDefensor.setMinimum(-defensor.getHpNegMax());
        jProgressBarHpDefensor.setValue(defensor.getHpAtual());
        jProgressBarMopDefensor.setMaximum(defensor.getMopMax());
        jProgressBarMopDefensor.setValue(defensor.getMopAtual());
        jLabelHpFinalDefensor.setText(String.valueOf(defensor.getHpAtual()));
        jLabelDanoInicial.setText(String.valueOf(dano));
        jLabelDefesaCalculada.setText(String.valueOf(defesa));
        // pegando o valor de estatistica de batalha salvo em valor
        jLabelInvestidaAtacante.setText(String.valueOf(Calculadora.getInvestidaAtacante()));
        jLabelInvestidaDefensor.setText(String.valueOf(Calculadora.getInvestidaDefensor()));
        jLabelInvestidaTotal.setText(String.valueOf(Calculadora.getInvestida()));
        jLabelAtacante2.setText("Atacante");
        jLabelDefensor2.setText("Defensor");
        //jCheckBoxDanoPerfurante.setSelected(false);
        //jCheckBoxDanoRebote.setSelected(true);
        // setando cor das progressBars
        atualizarCorJProgressBarsHp();
        
        // liberando checkBoxs desativadas
        jCheckBoxDanoCritico.setEnabled(true);
        
        // setando valores nas telas de informacoes dos personagens
        jLabelStunAtacante.setText(String.valueOf(atacante.getStun()));
        //jLabelStunDefensor.setText(String.valueOf(defensor.getStun()));
        
        
        Calculadora.finish();
        
        // salvando turno
        AlgoritmoPrincipal.salvarTurno();
        
        // salvamento automático
        if (jCheckBoxMenuItemSalvamentoAutomatico.isSelected()) {
            salvarHpsEMops();
        }
        
        // iniciativa automática
        if (jCheckBoxMenuItemIniciativaAutomatica.isSelected()) {
            int posicao = 0;
            String ultimo = new String();
            // procurando pelo ultimo personagem
            try {
                for (String nick : AlgoritmoPrincipal.getIniciativa().keySet()) {
                    if (AlgoritmoPrincipal.getIniciativa().get(nick).getPosicao() > posicao) {
                        posicao = AlgoritmoPrincipal.getIniciativa().get(nick).getPosicao();
                        ultimo = nick;
                    }
                }
            } catch (NullPointerException e) {
                // nao faz nada
            }
            // testando se o ultimo personagem acabou de atacar
            try {
                if (atacante.getNick().equals(ultimo)) {
                    rodarTurno();
                }
            } catch (NullPointerException e) {
                // nao faz nada
            }
        }
        
        // fim do codigo aqui
        
    }//GEN-LAST:event_jButtonCalcularAtaqueActionPerformed

    private void resetarStatus(Ficha personagem) {
        personagem.setHpAtual(personagem.getHpMax());
        personagem.setHpNegAtual(0);
        //zerar corpo aqui
        personagem.setStun(0);
        personagem.setDesmaiado(false);
    }
    
    private void atualizarCorJProgressBarsHp() {
        try {
            jProgressBarHpAtacante.setValue(AlgoritmoPrincipal.getAtacante().getHpAtual());
        } catch (NullPointerException e) {
            // nao faz nada
        }
        try {
            jProgressBarHpDefensor.setValue(AlgoritmoPrincipal.getDefensor().getHpAtual());
        } catch (NullPointerException e) {
            // nao faz nada
        }
        
        if (jProgressBarHpAtacante.getValue() < 0) {
            Color cor = new Color(94, 4, 140);
            jProgressBarHpAtacante.setForeground(cor);
        } else {
            Color cor = new Color(255, 0, 0);
            jProgressBarHpAtacante.setForeground(cor);
        }
        
        if (jProgressBarHpDefensor.getValue() < 0) {
            Color cor = new Color(94, 4, 140);
            jProgressBarHpDefensor.setForeground(cor);
        } else {
            Color cor = new Color(255, 0, 0);
            jProgressBarHpDefensor.setForeground(cor);
        }
    }
    
    private void jButtonMostrarExtensoesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMostrarExtensoesActionPerformed
        AlgoritmoPrincipal.setLinha(AlgoritmoPrincipal.getEXT());
        new ViewInfos().setVisible(true);
    }//GEN-LAST:event_jButtonMostrarExtensoesActionPerformed

    private void jButtonMostrarKensActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMostrarKensActionPerformed
        new ViewKens().setVisible(true);
    }//GEN-LAST:event_jButtonMostrarKensActionPerformed

    private void jButtonMostrarHpsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMostrarHpsActionPerformed
        AlgoritmoPrincipal.setLinha(AlgoritmoPrincipal.getHP());
        new ViewInfos().setVisible(true);
    }//GEN-LAST:event_jButtonMostrarHpsActionPerformed

    private void editHpAtacante() {
        if (!validaAtacante()) {
            return;
        }
        
        AlgoritmoPrincipal.setFicha(AlgoritmoPrincipal.getAtacante());
        AlgoritmoPrincipal.setLinha(AlgoritmoPrincipal.getHP());
        new View_editarValor(null, true).setVisible(true);
        
        AlgoritmoPrincipal.salvarTurno();
    }
    
    private void jButtonEditarHpAtacanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditarHpAtacanteActionPerformed
        editHpAtacante();
    }//GEN-LAST:event_jButtonEditarHpAtacanteActionPerformed

    private boolean atacanteStunado() {
        if (AlgoritmoPrincipal.getAtacante().isStunado()) {
            
            // mensagem ao usuario
            JOptionPane.showMessageDialog(null, "O personagem esta stunado",
                    "Erro!", JOptionPane.ERROR_MESSAGE);
            
            AlgoritmoPrincipal.setLinha(AlgoritmoPrincipal.getSTUN());
            new View_editarValor(null, true).setVisible(true);
            
            // testando novamente se o personagem esta stunado
            if (AlgoritmoPrincipal.getAtacante().isStunado()) {
                return true;
            }
        }
        return false;
    }
    
    private void jButtonInverterJogadoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInverterJogadoresActionPerformed
        if (!validaAtacante()) {
            return;
        }
        if (!validaDefensor()) {
            return;
        }
        // setando defensor no atacante e atacante no defensor
        AlgoritmoPrincipal.setAtacante(jLabelDefensor.getText());
        AlgoritmoPrincipal.setDefensor(jLabelAtacante.getText());
        // variaveis Personagem - DEVE FICAR DEPOIS DO SET ACIMA
        Ficha atacante = AlgoritmoPrincipal.getAtacante();
        Ficha defensor = AlgoritmoPrincipal.getDefensor();
        // variaveis auxiliares
        String temp;
        
        // testando se o atacante esta stunado
        if (atacanteStunado()) {
            return;
        }
        
        // setando em calculadora
        Calculadora.setAtacante(atacante);
        Calculadora.setDefensor(defensor);

        // REALIZANDO AS TROCAS:
        
        // nome atacante
        temp = jTextFieldAtacante.getText();
        jTextFieldAtacante.setText(jTextFieldDefensor.getText());
        jTextFieldDefensor.setText(temp);
        
        // setando personagens
        setarAtacante();
        setarDefensor();
        
        
        // FIM DA REALIZACAO DAS TROCAS
        
        // desmarcando as checkBox próprias de atacante e defensor
        jCheckBoxDefendeu.setSelected(false);
        jCheckBoxDanoCritico.setSelected(false);
        
        // mensagem chata pra caralho
//        JOptionPane.showMessageDialog(null, "As checkBox \"Defendeu\" e \"Dano Critico\" foram desmarcadas",
//                "Success!", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButtonInverterJogadoresActionPerformed
    
    private boolean validaAtacante() {
        if (AlgoritmoPrincipal.getAtacante() == null) {
            // mensagem ao usuario
            JOptionPane.showMessageDialog(null, "Atacante Inválido!", "Error!", JOptionPane.ERROR_MESSAGE);
            return false;
        } else {
            return true;
        }
    }
    
    private boolean validaDefensor() {
        if (AlgoritmoPrincipal.getDefensor() == null) {
            // mensagem ao usuario
            JOptionPane.showMessageDialog(null, "Defensor Inválido!", "Error!", JOptionPane.ERROR_MESSAGE);
            return false;
        } else {
            return true;
        }
    }
    
    private void setarAtacante() {
        // setando atacante
        if (!AlgoritmoPrincipal.setAtacante(jTextFieldAtacante.getText().toUpperCase())) {
            JOptionPane.showMessageDialog(null, "Nome Inválido!", "Invalid Name",
                                          JOptionPane.ERROR_MESSAGE);   
            return;
        }
        Ficha atacante = AlgoritmoPrincipal.getAtacante();
        AlgoritmoPrincipal.setFicha(atacante);
        
        // caso de personagem stunado
        if (atacante.getStun() > 0) {
            JOptionPane.showMessageDialog(null, "O personagem esta stunado", "Erro!",
                                          JOptionPane.ERROR_MESSAGE);
            
            AlgoritmoPrincipal.setLinha(AlgoritmoPrincipal.getSTUN());
            new View_editarValor(null, true).setVisible(true);
            
            if (atacante.getStun() > 0) {
                return;
            }
        }
        // caso de personagem desmaiado
        if (atacante.isDesmaiado()) {
            switch (JOptionPane.showConfirmDialog(null, "O personagem está desmaiado!\nDeseja acordá-lo?",
                    "Fainted", JOptionPane.YES_NO_OPTION)) {
                case 0:
                    atacante.setDesmaiado(false);
                    break;
                case 1:
                    return;
            }
        }
        
        // escrevendo valores na tela de informacoes
        initInfoAtacante(atacante);
        
        jCheckBoxDanoPerfurante.setSelected(false);
        jCheckBoxDanoRebote.setSelected(true);

        // limpando e setando o nome das habilidades na comboBoxAtaque
        jComboBoxAtacante.removeAllItems();
//        jComboBoxAtacante.addItem(null);
        if (!atacante.isCriaturaDoMestre()) {
            jComboBoxAtacante.addItem("FISICO");
        }
        for (String nome : atacante.getHabilidades().keySet()) {
            jComboBoxAtacante.addItem(nome);
        }

        // setando valores nas labels
        jLabelAtacante.setText(atacante.getNick());
        jLabelCorpoAtacante.setText(String.valueOf(atacante.getCorpo().getValor()));
        jLabelAuraBonusAtacante.setText("");

        // setando valores na tela de informacoes
        jLabelNomePersonagemAtacante.setText(atacante.getNick());
        jLabelAtacante2.setText(atacante.getNick());
        jLabelHpAtualAtacante.setText(String.valueOf(atacante.getHpAtual()));
        jLabelHpFinalAtacante.setText("");
        jLabelDanoInicial.setText("");
        jLabelDefesaCalculada.setText("");
        jLabelDanoFinal.setText("");
        jLabelInvestidaAtacante.setText("");
        jLabelInvestidaDefensor.setText("");
        jLabelInvestidaTotal.setText("");

        // setando valor do jProgressBarHp e jProgressBarMop
        jProgressBarHpAtacante.setMinimum(-atacante.getHpNegMax());
        jProgressBarHpAtacante.setMaximum(atacante.getHpMax());
        jProgressBarHpAtacante.setValue(atacante.getHpAtual());
        jProgressBarMopAtacante.setMaximum(atacante.getMopMax());
        jProgressBarMopAtacante.setValue(atacante.getMopAtual());
        // setando cor das progressBarsHp
        atualizarCorJProgressBarsHp();

        // setando valores nas textField
        jTextFieldShuAtacante.setText(String.valueOf(atacante.getShu()));
        jTextFieldRyuAtacante.setText("50");
        jTextFieldDadoAtacante.setText("0");
        jTextFieldAuraBonusAtacante.setText("0");
        jTextFieldQtdAtaqueAtacante.setText("1");
        jTextFieldQtdAcertoAtacante.setText("1");
        jTextFieldQtdCriticoAtacante.setText("0");

        // setando valores nas checkBox
        jCheckBoxDanoCritico.setSelected(false);
        jCheckBoxUsouRenAtacante.setSelected(false);
        
        // setando atributo de nen
        jComboBoxNenAtacante.setSelectedItem(atacante.getNen());
        
        // setando icone
        try {
            String dir;
            if (atacante.isCriaturaDoMestre()) {
                dir = "/images/mobs/";
            } else { // personagem
                dir = "/images/personagens/";
            }
            dir += atacante.getNick() + ".png";
            ImageIcon icone = criarImageIcon(dir, "null");
            icone.setImage(icone.getImage().getScaledInstance(
                    jLabelImagemPerfilAtacante.getWidth(),
                    jLabelImagemPerfilAtacante.getHeight(),
                    1));
            jLabelImagemPerfilAtacante.setIcon(icone);
        } catch (NullPointerException e) {
            try {
                if (atacante.isCriaturaDoMestre()) {
                    String dir = "/images/mobs/";
                    String newNick = atacante.getNick().substring(0, atacante.getNick().length() - 1);
                    dir += newNick + ".png";
                    ImageIcon icone = criarImageIcon(dir, "null");
                    
                    icone.setImage(icone.getImage().getScaledInstance(
                            jLabelImagemPerfilAtacante.getWidth(),
                            jLabelImagemPerfilAtacante.getHeight(),
                            1));
                    jLabelImagemPerfilAtacante.setIcon(icone);
                } else {
                    jLabelImagemPerfilAtacante.setIcon(null);
                }
            } catch (NullPointerException f) {
                jLabelImagemPerfilAtacante.setIcon(null);
            }
        }
        
        // desbloqueando calculadora
        AlgoritmoPrincipal.setCalculadoraBloqueadaPorAtacante(false);
        
        
        // setando ataque padrão
        ataquePadrao();
    }
    
    private void ataquePadrao() {
        Ficha atacante = AlgoritmoPrincipal.getAtacante();
        Habilidades atkPad = atacante.getHabilidade(atacante.getAtkPad());
        
        if (atkPad == null) {
            jComboBoxAtacante.setSelectedItem("FISICO");
            return;
        }

        jComboBoxAtacante.setSelectedItem(atkPad.getNome());
        
        if (atkPad.isMan() || atkPad.isMat()) {
            double pop = Calculadora.getPop(atacante.getAtrRef(), jComboBoxNenAtacante.getSelectedItem().toString());
            int aopBonus = atkPad.getAuraBonus();
            int ren = (int) Calculadora.getRyu(50, atacante.getCorpo().getValor(), pop * aopBonus);
            
            jLabelAuraBonusAtacante.setText(String.valueOf(ren));
            
            jTextFieldAuraBonusAtacante.setText(String.valueOf(atkPad.getAuraBonus()));
            jLabelAuraBonusCalculadaAtacante.setText(String.valueOf(atkPad.getAuraBonus()));
        }
        
        jTextFieldRyuAtacante.setText(String.valueOf(atkPad.getRyu()));
        jTextFieldQtdAtaqueAtacante.setText(String.valueOf(atkPad.getQtd()));
        jTextFieldQtdAcertoAtacante.setText(String.valueOf(atkPad.getQtd()));
        jCheckBoxGastouRyuAtacante.setSelected(atkPad.isGastaRyu());
        jCheckBoxDanoRebote.setSelected(atkPad.isDanoRebote());
    }
    
    private void defesaPadrao() {
        Ficha defensor = AlgoritmoPrincipal.getDefensor();
        Habilidades defPad = defensor.getHabilidade(defensor.getDefPad());
        
        if (defPad == null) {
            jComboBoxDefensor.setSelectedItem("SEM DEFESA");
            return;
        }
        
        jComboBoxDefensor.setSelectedItem(defPad.getNome());
        
        if (defPad.isMan() || defPad.isMat()) {
            double pop = Calculadora.getPop(defensor.getAtrRef(), jComboBoxNenDefensor.getSelectedItem().toString());
            int aopBonus = defPad.getAuraBonus();
            int ren = (int) Calculadora.getRyu(50, defensor.getCorpo().getValor(), pop * aopBonus);
            
            jLabelAuraBonusDefensor.setText(String.valueOf(ren));
            
            jTextFieldAuraBonusDefensor.setText(String.valueOf(defPad.getAuraBonus()));
            jLabelAuraBonusCalculadaDefensor.setText(String.valueOf(defPad.getAuraBonus()));
        }
        
        jTextFieldRyuDefensor.setText(String.valueOf(defPad.getRyu()));
        jTextFieldQtdDefesaDefensor.setText(String.valueOf(defPad.getQtd()));
        jTextFieldQtdAcertoDefensor.setText(String.valueOf(defPad.getQtd()));
        jCheckBoxGastouRyuDefensor.setSelected(defPad.isGastaRyu());
    }
    
    private void jButtonOkAtacanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOkAtacanteActionPerformed
        setarAtacante();
    }//GEN-LAST:event_jButtonOkAtacanteActionPerformed

    
    public ImageIcon criarImageIcon(String caminho, String descricao) {
        java.net.URL imgURL = getClass().getResource(caminho);
        if (imgURL != null) {
            return new ImageIcon(imgURL, descricao);
        } else {
//            System.err.println("Não foi possível carregar o arquivo de imagem: " + caminho);
            return null;
        }
    }
    
    private void setarDefensor() {
        // setando defensor
        if (!AlgoritmoPrincipal.setDefensor(jTextFieldDefensor.getText().toUpperCase())) {
            JOptionPane.showMessageDialog(null, "Nome Inválido!", "Invalid Name",
                                          JOptionPane.ERROR_MESSAGE);   
            return;
        }
        Ficha defensor = AlgoritmoPrincipal.getDefensor();
        AlgoritmoPrincipal.setFicha(defensor);

        // escrevendo valores na tela de informacoes
        initInfoDefensor(defensor);
        
        // limpando e setando o nome das habilidades na comboBoxAtaque
        jComboBoxDefensor.removeAllItems();
//        jComboBoxDefensor.addItem(null);
//        if (!defensor.isCriaturaDoMestre()) {
            jComboBoxDefensor.addItem("SEM DEFESA");
//        }
        for (String nome : defensor.getHabilidades().keySet()) {
            jComboBoxDefensor.addItem(nome);
        }

        // setando valores nas labels
        jLabelDefensor.setText(defensor.getNick());
        jLabelDefensor2.setText(defensor.getNick());
        jLabelCorpoDefensor.setText(String.valueOf(defensor.getCorpo().getValor()));
        jLabelAuraBonusDefensor.setText("");

        // setando valores na tela de informacoes
        jLabelNomePersonagemDefensor.setText(defensor.getNick());
        jLabelHpAtualDefensor.setText(String.valueOf(defensor.getHpAtual()));
        jLabelHpFinalDefensor.setText("");
        jLabelDanoInicial.setText("");
        jLabelDefesaCalculada.setText("");
        jLabelDanoFinal.setText("");

        // setando valor do jProgressBarHp e jProgressBarMop
        jProgressBarHpDefensor.setMinimum(-defensor.getHpNegMax());
        jProgressBarHpDefensor.setMaximum(defensor.getHpMax());
        jProgressBarHpDefensor.setValue(defensor.getHpAtual());
        jProgressBarMopDefensor.setMaximum(defensor.getMopMax());
        jProgressBarMopDefensor.setValue(defensor.getMopAtual());
        // setando cor das progressBarsHp
        atualizarCorJProgressBarsHp();

        // setando valores nas textField
        jTextFieldShuDefensor.setText(String.valueOf(defensor.getShu()));
        jTextFieldRyuDefensor.setText("50");
        jTextFieldDadoDefensor.setText("0");
        jTextFieldAuraBonusDefensor.setText("0");
        jTextFieldQtdDefesaDefensor.setText("0");
        jTextFieldQtdAcertoDefensor.setText("0");
        jTextFieldQtdCriticoDefensor.setText("0");

        // setando valores nas checkBox
        jCheckBoxDefendeu.setSelected(false);
        jCheckBoxUsouRenDefensor.setSelected(false);
        
        // setando atributo de nen
        jComboBoxNenDefensor.setSelectedItem(defensor.getNen());
        
        try {
            String dir;
            if (defensor.isCriaturaDoMestre()) {
                dir = "/images/mobs/";
            } else {
                dir = "/images/personagens/";
            }
            dir += defensor.getNick() + ".png";
            ImageIcon icone = criarImageIcon(dir, "null");
            icone.setImage(icone.getImage().getScaledInstance(
                    jLabelImagemPerfilDefensor.getWidth(),
                    jLabelImagemPerfilDefensor.getHeight(),
                    1));
            jLabelImagemPerfilDefensor.setIcon(icone);
        } catch (NullPointerException e) {
            try {
                if (defensor.isCriaturaDoMestre()) {
                    String dir = "/images/mobs/";
                    String newNick = defensor.getNick().substring(0, defensor.getNick().length() - 1);
                    dir += newNick + ".png";
                    ImageIcon icone = criarImageIcon(dir, "null");

                    icone.setImage(icone.getImage().getScaledInstance(
                            jLabelImagemPerfilDefensor.getWidth(),
                            jLabelImagemPerfilDefensor.getHeight(),
                            1));
                    jLabelImagemPerfilDefensor.setIcon(icone);
                } else {
                    jLabelImagemPerfilDefensor.setIcon(null);
                }
            } catch (NullPointerException f) {
                jLabelImagemPerfilDefensor.setIcon(null);
            }
        }

        
        // desbloqueando calculadora
        AlgoritmoPrincipal.setCalculadoraBloqueadaPorDefensor(false);
        
        
        // setando defesa padrao
        defesaPadrao();
        
        // setando qtdDefesa e qtdAcerto igual à qtdAcerto do oponente como padrão
        try {
            int qtdAcerto = Integer.parseInt(jTextFieldQtdAcertoAtacante.getText());
            jTextFieldQtdDefesaDefensor.setText(String.valueOf(qtdAcerto));
            jTextFieldQtdAcertoDefensor.setText(String.valueOf(qtdAcerto));
        } catch (NumberFormatException e) {
            // não faz nada
        }
    }
    
    private void jButtonOkDefensorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOkDefensorActionPerformed
        setarDefensor();
    }//GEN-LAST:event_jButtonOkDefensorActionPerformed

    private void jTextFieldDefensorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldDefensorKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER ||
            evt.getKeyCode() == KeyEvent.VK_TAB) {

            // setando defensor
            setarDefensor();

        }
    }//GEN-LAST:event_jTextFieldDefensorKeyPressed

    private void jTextFieldAtacanteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextFieldAtacanteKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER ||
            evt.getKeyCode() == KeyEvent.VK_TAB) {

            // setando atacante
            setarAtacante();
            
        }
    }//GEN-LAST:event_jTextFieldAtacanteKeyPressed

    private void jButtonInvestidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInvestidaActionPerformed
        if (AlgoritmoPrincipal.isCalculadoraBloqueadaPorAtacante() ||
            AlgoritmoPrincipal.isCalculadoraBloqueadaPorDefensor()) {
            
            JOptionPane.showMessageDialog(null, "Atacante e/ou Defensor Incorreto", "Erro",
                                          JOptionPane.ERROR_MESSAGE);
            return;
        }
        Calculadora.setAtacante(AlgoritmoPrincipal.getAtacante());
        Calculadora.setDefensor(AlgoritmoPrincipal.getDefensor());
        new ViewInvestida().setVisible(true);
    }//GEN-LAST:event_jButtonInvestidaActionPerformed
    
    private void rodarTurno() {
        Map<String, Ficha> pers = AlgoritmoPrincipal.getFichas();
        
        // inicializando calculadora
        Calculadora.init();
        
        // calculando gastos de MOP
        for (String nick : pers.keySet()) {
            Ficha personagem = pers.get(nick);
            // se o personagem estiver emBatalha e seu cdn nao for 5+, seu mop é gasto
            if (AlgoritmoPrincipal.containsEmBatalha(nick)) {
                int mop;
                int temp;
                // algoritmo - MOP
                if ((temp = 5 - Calculadora.getLvlCdn(personagem.getPerCdn())) > 0) {
                    mop = personagem.getMopAtual();
                    mop -= ((personagem.getCorpo().getValor() - 100) / 20 + 1) * temp;
                    personagem.setMopAtual(mop);
                }
            }
            
            // se o personagem tiver stunado, pedimos um teste
            if (personagem.getStun() > 0) {
                //Calculadora.setDefensor(personagem);
                AlgoritmoPrincipal.setFicha(personagem);
                new View_stun(null, true).setVisible(true);
            }
        }
        
        // salvando turno
        AlgoritmoPrincipal.salvarTurno();
        
        // atualizando jProgressBarsMop
        atualizarJProgressBarsMop();
        
        new ViewTurno().setVisible(true);
    }
    
    private void jButtonRodarTurnoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRodarTurnoActionPerformed
        rodarTurno();
    }//GEN-LAST:event_jButtonRodarTurnoActionPerformed

    private void sair() {
        switch (JOptionPane.showConfirmDialog(null, "Nao se esqueça de salvar!\nDeseja mesmo sair?", "Saindo...", JOptionPane.YES_NO_OPTION)) {
            case 0:
                this.dispose();
                break;
        }
    }
    
    private void jButtonSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSairActionPerformed
        sair();
    }//GEN-LAST:event_jButtonSairActionPerformed

    private void jButtonExecutarEditorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExecutarEditorActionPerformed
        try {
            new view.editor.ViewPrincipalEditor().setVisible(true);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ViewPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonExecutarEditorActionPerformed

//    private void salvarHpsEMops() {
//        Map<String, InfoPerson> info = new HashMap<>();
//        
//        for (String nome : AlgoritmoPrincipal.getFichas().keySet()) {
//            InfoPerson infoPerson = new InfoPerson();
//            infoPerson.setNome(nome);
//            infoPerson.setHp(AlgoritmoPrincipal.getPerson(nome).getHpAtual());
//            infoPerson.setMop(AlgoritmoPrincipal.getPerson(nome).getMopAtual());
//            info.put(nome, infoPerson);
//        }
//        
//        // salvando os valores
//        if (AlgoritmoPrincipal.saveInfo(info)) {
//            // mensagem só é impressa quando salvamento automatico nao estiver selecionado
//            if (!jCheckBoxMenuItemSalvamentoAutomatico.isSelected()) {
//                JOptionPane.showMessageDialog(null, "Personagens Salvos!", "Success!", JOptionPane.INFORMATION_MESSAGE);
//            }
//        }
//    }
    
    private void salvarHpsEMops() {
//        AlgoritmoPrincipal.saveHps();
//        AlgoritmoPrincipal.saveMops();
        AlgoritmoPrincipal.saveInfo();
    }
    
    private void jButtonSalvarHpsEMopsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalvarHpsEMopsActionPerformed
        //salvarHpsEMops();
        if(!AlgoritmoPrincipal.saveInfo()) {
            System.out.println("Erro ao salvar HPs e MOPs");
        } else {
            JOptionPane.showMessageDialog(null, "HPs e MOPs salvos!", "Saved!", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButtonSalvarHpsEMopsActionPerformed

    private int getPerHabilidade(Ficha ficha, Habilidades habilidade) {
        if (habilidade.isSomarEms() && habilidade.isSomarMan()) {
            int maior = ficha.getPerDex();
            if (ficha.getPerEms() > maior) {
                maior = ficha.getPerEms();
            } else if (ficha.getPerMan() > maior) {
                maior = ficha.getPerMan();
            }
            return maior;
        } else if (habilidade.isSomarEms()) {
            if (ficha.getPerEms() > ficha.getPerDex()) {
                return ficha.getPerEms();
            }
            return ficha.getPerDex();
        } else if (habilidade.isSomarMan()) {
            if (ficha.getPerMan() > ficha.getPerDex()) {
                return ficha.getPerMan();
            }
            return ficha.getPerDex();
        } else {
            return ficha.getPerDex();
        }
    }
    
    private void initInfoAtacanteHabilidade(Ficha atacante, Habilidades habilidade) {
        jLabelDadoDanoAtacante.setText(habilidade.getDados()+" +"+String.valueOf(habilidade.getDano()));
        jTextPaneDescSkillAtacante.setText(habilidade.getDescricaoBreve());
        jLabelVolAtacante.setText(String.valueOf(habilidade.getVol()));
        jLabelCrtSkillAtacante.setText("x"+String.valueOf(habilidade.getCrt()));
        jLabelSkillQtdAtacante.setText(String.valueOf(habilidade.getQtd()));
        jLabelActAtacante.setText(String.valueOf(
                atacante.getPro().get(habilidade.getNome()).getLvl() +
                getPerHabilidade(atacante, habilidade) +
                habilidade.getAcertoFixo()
        ));
    }

    private void initInfoDefensorHabilidade(Ficha defensor, Habilidades habilidade) {
        jLabelDadoDanoDefensor.setText(habilidade.getDados()+" +"+String.valueOf(habilidade.getDano()));
        jTextPaneDescSkillDefensor.setText(habilidade.getDescricaoBreve());
        jLabelVolDefensor.setText(String.valueOf(habilidade.getVol()));
        jLabelCrtSkillDefensor.setText("x"+String.valueOf(habilidade.getCrt()));
        jLabelSkillQtdDefensor.setText(String.valueOf(habilidade.getQtd()));
        jLabelActDefensor.setText(String.valueOf(
                defensor.getPro().get(habilidade.getNome()).getLvl() +
                getPerHabilidade(defensor, habilidade) +
                habilidade.getAcertoFixo()
        ));
    }
    
    private void jTextFieldAtacanteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldAtacanteFocusGained
        jTextFieldAtacante.selectAll();
    }//GEN-LAST:event_jTextFieldAtacanteFocusGained

    private void jTextFieldShuAtacanteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldShuAtacanteFocusGained
        jTextFieldShuAtacante.selectAll();
    }//GEN-LAST:event_jTextFieldShuAtacanteFocusGained

    private void jTextFieldRyuAtacanteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldRyuAtacanteFocusGained
        jTextFieldRyuAtacante.selectAll();
    }//GEN-LAST:event_jTextFieldRyuAtacanteFocusGained

    private void jTextFieldDadoAtacanteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldDadoAtacanteFocusGained
        jTextFieldDadoAtacante.selectAll();
    }//GEN-LAST:event_jTextFieldDadoAtacanteFocusGained

    private void jTextFieldAuraBonusAtacanteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldAuraBonusAtacanteFocusGained
        jTextFieldAuraBonusAtacante.selectAll();
    }//GEN-LAST:event_jTextFieldAuraBonusAtacanteFocusGained

    private void jTextFieldQtdAtaqueAtacanteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldQtdAtaqueAtacanteFocusGained
        jTextFieldQtdAtaqueAtacante.selectAll();
    }//GEN-LAST:event_jTextFieldQtdAtaqueAtacanteFocusGained

    private void jTextFieldQtdCriticoAtacanteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldQtdCriticoAtacanteFocusGained
        jTextFieldQtdCriticoAtacante.selectAll();
    }//GEN-LAST:event_jTextFieldQtdCriticoAtacanteFocusGained

    private void jTextFieldQtdAcertoAtacanteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldQtdAcertoAtacanteFocusGained
        jTextFieldQtdAcertoAtacante.selectAll();
    }//GEN-LAST:event_jTextFieldQtdAcertoAtacanteFocusGained

    private void jTextFieldDefensorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldDefensorFocusGained
        jTextFieldDefensor.selectAll();
    }//GEN-LAST:event_jTextFieldDefensorFocusGained

    private void jTextFieldShuDefensorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldShuDefensorFocusGained
        jTextFieldShuDefensor.selectAll();
    }//GEN-LAST:event_jTextFieldShuDefensorFocusGained

    private void jTextFieldRyuDefensorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldRyuDefensorFocusGained
        jTextFieldRyuDefensor.selectAll();
    }//GEN-LAST:event_jTextFieldRyuDefensorFocusGained

    private void jTextFieldDadoDefensorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldDadoDefensorFocusGained
        jTextFieldDadoDefensor.selectAll();
    }//GEN-LAST:event_jTextFieldDadoDefensorFocusGained

    private void jTextFieldAuraBonusDefensorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldAuraBonusDefensorFocusGained
        jTextFieldAuraBonusDefensor.selectAll();
    }//GEN-LAST:event_jTextFieldAuraBonusDefensorFocusGained

    private void jTextFieldQtdDefesaDefensorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldQtdDefesaDefensorFocusGained
        jTextFieldQtdDefesaDefensor.selectAll();
    }//GEN-LAST:event_jTextFieldQtdDefesaDefensorFocusGained

    private void jTextFieldQtdCriticoDefensorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldQtdCriticoDefensorFocusGained
        jTextFieldQtdCriticoDefensor.selectAll();
    }//GEN-LAST:event_jTextFieldQtdCriticoDefensorFocusGained

    private void jTextFieldQtdAcertoDefensorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldQtdAcertoDefensorFocusGained
        jTextFieldQtdAcertoDefensor.selectAll();
    }//GEN-LAST:event_jTextFieldQtdAcertoDefensorFocusGained

    private void jButtonMostrarMopsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMostrarMopsActionPerformed
        AlgoritmoPrincipal.setLinha(AlgoritmoPrincipal.getMOP());
        new ViewInfos().setVisible(true);
    }//GEN-LAST:event_jButtonMostrarMopsActionPerformed

    private void curarMopAtacante() {
        if (!validaAtacante()) {
            return;
        }
        Ficha personagem = AlgoritmoPrincipal.getAtacante();
        
        AlgoritmoPrincipal.setFicha(personagem);
        new View_curarMop(null, true).setVisible(true);
        
        AlgoritmoPrincipal.salvarTurno();
    }
    
    private void operarMopAtacante() {
        if (!validaAtacante()) {
            return;
        }
        
        AlgoritmoPrincipal.setLinha(AlgoritmoPrincipal.getMOP());
        AlgoritmoPrincipal.setFicha(AlgoritmoPrincipal.getAtacante());
        new View_operarValor(null, true).setVisible(true);
        
        AlgoritmoPrincipal.salvarTurno();
    }
    
    private void jButtonOperarMopAtacanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOperarMopAtacanteActionPerformed
        operarMopAtacante();
    }//GEN-LAST:event_jButtonOperarMopAtacanteActionPerformed

    private void curarHpAtacante() {
        if (!validaAtacante()) {
            return;
        }
        Ficha personagem = AlgoritmoPrincipal.getAtacante();
        

        JOptionPane.showMessageDialog(null, "HP de "+personagem.getNick()+" curado de "+
                personagem.getHpAtual()+" para "+personagem.getHpMax(), "Personagem Curado",
                JOptionPane.INFORMATION_MESSAGE);
        
        personagem.setHpAtual(personagem.getHpMax());
        personagem.setDesmaiado(false);
        
        AlgoritmoPrincipal.salvarTurno();
    }
    
    private void operarHpAtacante() {
        if (!validaAtacante()) {
            return;
        }
        
        AlgoritmoPrincipal.setLinha(AlgoritmoPrincipal.getHP());
        AlgoritmoPrincipal.setFicha(AlgoritmoPrincipal.getAtacante());
        new View_operarValor(null, true).setVisible(true);
        
        AlgoritmoPrincipal.salvarTurno();
    }
    
    private void jButtonOperarHpAtacanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOperarHpAtacanteActionPerformed
        operarHpAtacante();
    }//GEN-LAST:event_jButtonOperarHpAtacanteActionPerformed

    private void jButtonCurarHpsEMopsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCurarHpsEMopsActionPerformed
        switch (JOptionPane.showConfirmDialog(null, "Deseja curar todos os HPs e MOPs?",
                "Curando jogadores", JOptionPane.YES_NO_OPTION)) {
            case 0:
                // curando hp e mop de todos os personagens
                for (String nome : AlgoritmoPrincipal.getFichas().keySet()) {
                    AlgoritmoPrincipal.getPerson(nome).setHpAtual(AlgoritmoPrincipal.getPerson(nome).getHpMax());
                    AlgoritmoPrincipal.getPerson(nome).setMopAtual(AlgoritmoPrincipal.getPerson(nome).getMopMax());
                    AlgoritmoPrincipal.getPerson(nome).setDesmaiado(false);
                }
                JOptionPane.showMessageDialog(null, "Todos os personagens foram curados!",
                        "Personagens Curados!", JOptionPane.INFORMATION_MESSAGE);
                
                // atualizando jProgressBars
                try {
                    jProgressBarHpAtacante.setValue(AlgoritmoPrincipal.getAtacante().getHpAtual());
                    jProgressBarMopAtacante.setValue(AlgoritmoPrincipal.getAtacante().getMopAtual());
                    jProgressBarHpDefensor.setValue(AlgoritmoPrincipal.getDefensor().getHpAtual());
                    jProgressBarMopDefensor.setValue(AlgoritmoPrincipal.getDefensor().getMopAtual());
                } catch (NullPointerException e) {
                    // nao faz nada
                }
                
                // setando cor das progressBarsHp
                atualizarCorJProgressBarsHp();
                
                // salvando turno
                AlgoritmoPrincipal.salvarTurno();
                
                break;
        }
    }//GEN-LAST:event_jButtonCurarHpsEMopsActionPerformed

    private void editMopAtacante() {
        if (!validaAtacante()) {
            return;
        }
        
        AlgoritmoPrincipal.setLinha(AlgoritmoPrincipal.getMOP());
        AlgoritmoPrincipal.setFicha(AlgoritmoPrincipal.getAtacante());
        new View_editarValor(null, true).setVisible(true);
        
        AlgoritmoPrincipal.salvarTurno();
    }
    
    private void jButtonEditarMopAtacanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditarMopAtacanteActionPerformed
        editMopAtacante();
    }//GEN-LAST:event_jButtonEditarMopAtacanteActionPerformed

    private void jMenuItemSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSairActionPerformed
        sair();
    }//GEN-LAST:event_jMenuItemSairActionPerformed

    private void jMenuItemResetarFichasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemResetarFichasActionPerformed
//        try {
        // limpando as fichas existentes
        AlgoritmoPrincipal.getFichas().clear();
//        File folder = new File(AlgoritmoPrincipal.getDIR_FICHAS());
        try {
//            if (!AlgoritmoPrincipal.loadFichas(folder)) {
            if (!AlgoritmoPrincipal.loadFichas()) {
                JOptionPane.showMessageDialog(null, "Banco de dados de Personagens não encontrado!",
                        "Error!", JOptionPane.ERROR_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "Dados restaurados com sucesso!",
                        "Success!", JOptionPane.INFORMATION_MESSAGE);


                // recarregando HPs e MOPs
                if (!AlgoritmoPrincipal.loadInfo()) {
                    
                }
//                AlgoritmoPrincipal.loadHpEMop();
//                AlgoritmoPrincipal.loadHps();
//                AlgoritmoPrincipal.loadMops();

// recarregando atk e def padrão
//            try {
//                AlgoritmoPrincipal.loadAtkPad();
//                AlgoritmoPrincipal.loadDefPad();
//            } catch (ClassNotFoundException e) {
//                System.err.println(e);
//            }
//        } catch (FileNotFoundException | ClassNotFoundException ex) {
//            Logger.getLogger(ViewPrincipal.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (IOException ex) {
//            Logger.getLogger(ViewPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ViewPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ViewPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
//        } catch (IOException | ClassNotFoundException ex) {
//            Logger.getLogger(ViewPrincipal.class.getName()).log(Level.SEVERE, null, ex);
//        }
        // setando atacante
        if (AlgoritmoPrincipal.setAtacante(jTextFieldAtacante.getText().toUpperCase())) {
            setarAtacante();
        }
        // setando defensor
        if (AlgoritmoPrincipal.setDefensor(jTextFieldDefensor.getText().toUpperCase())) {
            setarDefensor();
        }
    }//GEN-LAST:event_jMenuItemResetarFichasActionPerformed
    
    private void jMenuItemRodarTurnosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRodarTurnosActionPerformed
        new View_qtdTurnos(null, true).setVisible(true);
    }//GEN-LAST:event_jMenuItemRodarTurnosActionPerformed
    
    private void jMenuItemMostrarMopsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemMostrarMopsActionPerformed
        AlgoritmoPrincipal.setLinha(AlgoritmoPrincipal.getMOP());
        new ViewInfos().setVisible(true);
    }//GEN-LAST:event_jMenuItemMostrarMopsActionPerformed

    private void jMenuItemZerarCorpoAtacanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemZerarCorpoAtacanteActionPerformed
        if (!validaAtacante()) {
            return;
        }
        zerarCorpo(AlgoritmoPrincipal.getAtacante());
    }//GEN-LAST:event_jMenuItemZerarCorpoAtacanteActionPerformed

    private void jMenuItemZerarTodosCorposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemZerarTodosCorposActionPerformed
        switch (JOptionPane.showConfirmDialog(null, "Deseja mesmo zerar todas as extensões de corpo dos personagens?",
                "Zerando extensões de corpo", JOptionPane.YES_NO_OPTION)) {
            case 0:
                // removendo todas as habilidades de todos os personagens
                for (String nomePerson : AlgoritmoPrincipal.getFichas().keySet()) {
                    Ficha personagem = AlgoritmoPrincipal.getPerson(nomePerson);
                    for (String nome : personagem.getCorpo().getHabilidades().keySet()) {
                        personagem.getCorpo().removeHabilidade(nome);
                    }
                }

                JOptionPane.showMessageDialog(null, "Todos os personagens tiveram o corpo zerado com sucesso!",
                        "Corpos zerados!", JOptionPane.INFORMATION_MESSAGE);
                break;
        }
    }//GEN-LAST:event_jMenuItemZerarTodosCorposActionPerformed

    private void jMenuItemCurarAtacanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCurarAtacanteActionPerformed
        curarHpAtacante();
        atualizarCorJProgressBarsHp();
    }//GEN-LAST:event_jMenuItemCurarAtacanteActionPerformed

    private void jMenuItemEditarHpAtacanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEditarHpAtacanteActionPerformed
        editHpAtacante();
    }//GEN-LAST:event_jMenuItemEditarHpAtacanteActionPerformed

    private void jMenuItemMostrarHpsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemMostrarHpsActionPerformed
        AlgoritmoPrincipal.setLinha(AlgoritmoPrincipal.getHP());
        new ViewInfos().setVisible(true);
    }//GEN-LAST:event_jMenuItemMostrarHpsActionPerformed

    private void jMenuItemEditarMopAtacanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEditarMopAtacanteActionPerformed
        editMopAtacante();
    }//GEN-LAST:event_jMenuItemEditarMopAtacanteActionPerformed

    private void jMenuItemCurarMopAtacanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCurarMopAtacanteActionPerformed
        curarMopAtacante();
        atualizarJProgressBarsMop();
    }//GEN-LAST:event_jMenuItemCurarMopAtacanteActionPerformed

    private void jMenuItemMostrarKensActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemMostrarKensActionPerformed
        new ViewKens().setVisible(true);
    }//GEN-LAST:event_jMenuItemMostrarKensActionPerformed

    private void jButtonExecutarEditor1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExecutarEditor1ActionPerformed
        new view.gerador.ViewPrincipalGerador().setVisible(true);
    }//GEN-LAST:event_jButtonExecutarEditor1ActionPerformed

    private void jLabelAuraBonusCalculadaAtacanteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelAuraBonusCalculadaAtacanteMouseEntered
        jLabelAuraBonusCalculadaAtacante.setToolTipText("Valor máximo de aura bonus para essa habilidade");
    }//GEN-LAST:event_jLabelAuraBonusCalculadaAtacanteMouseEntered

    private void jLabelAuraBonusCalculadaDefensorMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelAuraBonusCalculadaDefensorMouseEntered
        jLabelAuraBonusCalculadaDefensor.setToolTipText("Valor máximo de aura bonus para essa habilidade");
    }//GEN-LAST:event_jLabelAuraBonusCalculadaDefensorMouseEntered

    private void jButtonExecutarTrainerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExecutarTrainerActionPerformed
        try {
            new ViewPrincipalTrainer().setVisible(true);
        } catch (IOException ex) {
            Logger.getLogger(ViewPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonExecutarTrainerActionPerformed

    private void jMenuItemInventarioAtacanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemInventarioAtacanteActionPerformed
        if (!validaAtacante()) {
            return;
        }
        AlgoritmoPrincipal.setFicha(AlgoritmoPrincipal.getAtacante());
        new ViewInventario().setVisible(true);
    }//GEN-LAST:event_jMenuItemInventarioAtacanteActionPerformed

    private void jMenuItemInventarioDefensorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemInventarioDefensorActionPerformed
        if (!validaDefensor()) {
            return;
        }
        AlgoritmoPrincipal.setFicha(AlgoritmoPrincipal.getDefensor());
        new ViewInventario().setVisible(true);
    }//GEN-LAST:event_jMenuItemInventarioDefensorActionPerformed

    private void jMenuItemFichaDefensorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFichaDefensorActionPerformed
        if (!validaDefensor()) {
            return;
        }
        AlgoritmoPrincipalFicha.setFicha(AlgoritmoPrincipal.getDefensor());
        try {
//            if (AlgoritmoPrincipal.getDefensor().isCriaturaDoMestre()) {
//                new ViewFichaMob().setVisible(true);
//            } else {
                new ViewFicha().setVisible(true);
//            }
        } catch (NullPointerException ex) {
            Logger.getLogger(ViewPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemFichaDefensorActionPerformed

    private void jMenuItemFichaAtacanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFichaAtacanteActionPerformed
//        if (!validaAtacante()) {
//            return;
//        }
//        try {
//            AlgoritmoPrincipal.setLinha(AlgoritmoPrincipal.getAtacante().getNick());
//            if (AlgoritmoPrincipal.getAtacante().isCriaturaDoMestre()) {
//                new ViewFichaMob().setVisible(true);
//            } else {
//                new ViewFichaAntiga().setVisible(true);
//            }
//        } catch (ClassNotFoundException | NullPointerException ex) {
//            Logger.getLogger(ViewPrincipal.class.getName()).log(Level.SEVERE, null, ex);
//        }
        
        if (!validaAtacante()) {
            return;
        }
        try {
            AlgoritmoPrincipalFicha.setFicha(AlgoritmoPrincipal.getAtacante());
//            if (AlgoritmoPrincipal.getAtacante().isCriaturaDoMestre()) {
//                new ViewFichaMob().setVisible(true);
//            } else {
                new ViewFicha().setVisible(true);
//            }
        } catch (NullPointerException ex) {
            Logger.getLogger(ViewPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemFichaAtacanteActionPerformed

    private void jButtonEditaCorpoAtacanteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jButtonEditaCorpoAtacanteFocusGained
        if (AlgoritmoPrincipal.getAtacante() == null) {
            return;
        }
        jLabelCorpoAtacante.setText(String.valueOf(AlgoritmoPrincipal.getAtacante().getCorpo().getValor()));
        jTextFieldShuAtacante.setText(String.valueOf(AlgoritmoPrincipal.getFicha().getShu()));
        initTableRyuAtacante(AlgoritmoPrincipal.getAtacante());
    }//GEN-LAST:event_jButtonEditaCorpoAtacanteFocusGained

    private void jButtonEditaCorpoDefensorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jButtonEditaCorpoDefensorFocusGained
        if (AlgoritmoPrincipal.getDefensor() == null) {
            return;
        }
        jLabelCorpoDefensor.setText(String.valueOf(AlgoritmoPrincipal.getDefensor().getCorpo().getValor()));
        jTextFieldShuDefensor.setText(String.valueOf(AlgoritmoPrincipal.getFicha().getShu()));
        initTableRyuDefensor(AlgoritmoPrincipal.getDefensor());
    }//GEN-LAST:event_jButtonEditaCorpoDefensorFocusGained

    private void jButtonExecutarHabilidadesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExecutarHabilidadesActionPerformed
        try {
            new ViewPrincipalHabilidades().setVisible(true);
        } catch (IOException | ClassNotFoundException ex) {
            Logger.getLogger(ViewPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonExecutarHabilidadesActionPerformed

    private void resetarSortes() {
        switch (JOptionPane.showConfirmDialog(null, "Resetar sortes de todos personagens?",
                "Confirm!", JOptionPane.YES_NO_OPTION)) {
            
            case 0:
                // resetando sortes
                for (String nome : AlgoritmoPrincipal.getFichas().keySet()) {
                    AlgoritmoPrincipal.getFicha(nome).resetSortes();
                }
                
                // mensagem ao usuario
                JOptionPane.showMessageDialog(null, "Sortes resetadas!", "Success!", JOptionPane.INFORMATION_MESSAGE);
                break;
        }
    }
    
    private void jMenuItemResetarSortesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemResetarSortesActionPerformed
        resetarSortes();
    }//GEN-LAST:event_jMenuItemResetarSortesActionPerformed

    private void jProgressBarHpAtacanteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jProgressBarHpAtacanteMouseEntered
        jProgressBarHpAtacante.setToolTipText(jProgressBarHpAtacante.getValue()+"/"+jProgressBarHpAtacante.getMaximum());
    }//GEN-LAST:event_jProgressBarHpAtacanteMouseEntered

    private void jProgressBarMopAtacanteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jProgressBarMopAtacanteMouseEntered
        jProgressBarMopAtacante.setToolTipText(jProgressBarMopAtacante.getValue()+"/"+jProgressBarMopAtacante.getMaximum());
    }//GEN-LAST:event_jProgressBarMopAtacanteMouseEntered

    private void jProgressBarHpDefensorMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jProgressBarHpDefensorMouseEntered
        jProgressBarHpDefensor.setToolTipText(jProgressBarHpDefensor.getValue()+"/"+jProgressBarHpDefensor.getMaximum());
    }//GEN-LAST:event_jProgressBarHpDefensorMouseEntered

    private void jProgressBarMopDefensorMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jProgressBarMopDefensorMouseEntered
        jProgressBarMopDefensor.setToolTipText(jProgressBarMopDefensor.getValue()+"/"+jProgressBarMopDefensor.getMaximum());
    }//GEN-LAST:event_jProgressBarMopDefensorMouseEntered

    private void jButtonEditarMopAtacanteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jButtonEditarMopAtacanteFocusGained
        atualizarJProgressBarsMop();
    }//GEN-LAST:event_jButtonEditarMopAtacanteFocusGained

    private void atualizarJProgressBarsMop() {
        try {
            jProgressBarMopAtacante.setValue(AlgoritmoPrincipal.getAtacante().getMopAtual());
        } catch (NullPointerException e) {
            // nao faz nada
        }
        try {
            jProgressBarMopDefensor.setValue(AlgoritmoPrincipal.getDefensor().getMopAtual());
        } catch (NullPointerException e) {
            // nao faz nada
        }
    }
    
    private void jButtonOperarMopAtacanteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jButtonOperarMopAtacanteFocusGained
        atualizarJProgressBarsMop();
    }//GEN-LAST:event_jButtonOperarMopAtacanteFocusGained

    private void jButtonEditarHpAtacanteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jButtonEditarHpAtacanteFocusGained
        atualizarCorJProgressBarsHp();
    }//GEN-LAST:event_jButtonEditarHpAtacanteFocusGained

    private void jButtonOperarHpAtacanteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jButtonOperarHpAtacanteFocusGained
        atualizarCorJProgressBarsHp();
    }//GEN-LAST:event_jButtonOperarHpAtacanteFocusGained

    private void jMenuItemAdicionarCorposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAdicionarCorposActionPerformed
        new View_adicionarCorpos(null, true).setVisible(true);
    }//GEN-LAST:event_jMenuItemAdicionarCorposActionPerformed

    private void jMenuItemStunEmAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemStunEmAreaActionPerformed
        new View_stunArea(null, true).setVisible(true);
    }//GEN-LAST:event_jMenuItemStunEmAreaActionPerformed

    private void jMenuItemDanoEmAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDanoEmAreaActionPerformed
//        try {
//            AlgoritmoPrincipal.loadAtkPad();
//            AlgoritmoPrincipal.loadDefPad();
//        } catch (ClassNotFoundException ex) {
//            Logger.getLogger(ViewPrincipal.class.getName()).log(Level.SEVERE, null, ex);
//            System.err.println("DEU RUIM");
//        }
//        
//        
//        
//        for (String nick : AlgoritmoPrincipal.getFichas().keySet()) {
//            Ficha ficha = AlgoritmoPrincipal.getFicha(nick);
//            
//            SkillPadrao atkPad = AlgoritmoPrincipal.getAtkPad(nick);
//            if (atkPad != null) {
//                Habilidades atk = atkPad.getHabilidade();
//                if (atk != null) {
//                    HabilidadesNovas habAtk = ficha.getHabilidade(atk.getNome());
//
//                    ficha.setAtkPad(atkPad.getHabilidade().getNome());
//
//                    habAtk.setCorpo(atkPad.getCorpo());
//                    habAtk.setAuraBonus(atkPad.getAuraBonus());
//                    habAtk.setRyu(atkPad.getRyu());
//                    habAtk.setDanoRebote(atkPad.isDanoRebote());
//                    habAtk.setGastaRyu(atkPad.isGastouRyu());
//                    System.out.println(nick+"nao dem ATK PAD");
//                }
//            }
//            
//            SkillPadrao defPad = AlgoritmoPrincipal.getDefPad(nick);
//            if (defPad != null) {
//                Habilidades def = defPad.getHabilidade();
//                if (def != null) {
//                    HabilidadesNovas habDef = ficha.getHabilidade(def.getNome());
//
//                    ficha.setDefPad(defPad.getHabilidade().getNome());
//
//                    habDef.setCorpo(defPad.getCorpo());
//                    habDef.setAuraBonus(defPad.getAuraBonus());
//                    habDef.setRyu(defPad.getRyu());
//                    habDef.setDanoRebote(defPad.isDanoRebote());
//                    habDef.setGastaRyu(defPad.isGastouRyu());
//                    System.out.println(nick+"nao dem DEF PAD");
//                }
//            }
//        }
//        
//        AlgoritmoPrincipal.saveFichas();
//        
//        System.out.println("SALVO");
        
    }//GEN-LAST:event_jMenuItemDanoEmAreaActionPerformed

    private void jMenuItemDpsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDpsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItemDpsActionPerformed

    private void jMenuItemVisualizarNenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemVisualizarNenActionPerformed
        new ViewNenCorpo().setVisible(true);
    }//GEN-LAST:event_jMenuItemVisualizarNenActionPerformed

    private void jMenuItemRodarDiasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRodarDiasActionPerformed
        new View_dias(null, true).setVisible(true);
    }//GEN-LAST:event_jMenuItemRodarDiasActionPerformed

    private void jMenuItemDescricaoAtacanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDescricaoAtacanteActionPerformed
        if (!validaAtacante()) {
            return;
        }
        AlgoritmoPrincipal.setLinha(AlgoritmoPrincipal.getAtacante().getDescricao());
        new ViewDescricao().setVisible(true);
    }//GEN-LAST:event_jMenuItemDescricaoAtacanteActionPerformed

    private void jMenuItemDescricaoDefensorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDescricaoDefensorActionPerformed
        if (!validaDefensor()) {
            return;
        }
        AlgoritmoPrincipal.setLinha(AlgoritmoPrincipal.getDefensor().getDescricao());
        new ViewDescricao().setVisible(true);
    }//GEN-LAST:event_jMenuItemDescricaoDefensorActionPerformed

    private void jTextFieldShuAtacanteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldShuAtacanteFocusLost
        try {
            AlgoritmoPrincipal.getAtacante().setShu(Integer.parseInt(jTextFieldShuAtacante.getText()));
        } catch (NumberFormatException e) {
            jTextFieldShuAtacante.setText(String.valueOf(AlgoritmoPrincipal.getAtacante().getShu()));
        }
    }//GEN-LAST:event_jTextFieldShuAtacanteFocusLost

    private void jTextFieldShuDefensorFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldShuDefensorFocusLost
        try {
            AlgoritmoPrincipal.getDefensor().setShu(Integer.parseInt(jTextFieldShuDefensor.getText()));
        } catch (NumberFormatException e) {
            jTextFieldShuDefensor.setText(String.valueOf(AlgoritmoPrincipal.getDefensor().getShu()));
        }
    }//GEN-LAST:event_jTextFieldShuDefensorFocusLost

    private void jButtonCalcularAtaqueFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jButtonCalcularAtaqueFocusGained
        try {
            jLabelStunAtacante.setText(String.valueOf(AlgoritmoPrincipal.getAtacante().getStun()));
            jLabelStunDefensor.setText(String.valueOf(AlgoritmoPrincipal.getDefensor().getStun()));
        } catch (NullPointerException e) {
            // não faz nada
        }
    }//GEN-LAST:event_jButtonCalcularAtaqueFocusGained

    private void atualizaDefMult() {
        try {
            int valor = Integer.parseInt(jTextFieldQtdAcertoAtacante.getText());
            jTextFieldQtdDefesaDefensor.setText(String.valueOf(valor));
        } catch (NumberFormatException e) {
            // nao faz nada
        }
        
        try {
            int valor = Integer.parseInt(jTextFieldQtdAcertoAtacante.getText());
            jTextFieldQtdAcertoDefensor.setText(String.valueOf(valor));
        } catch (NumberFormatException e) {
            // nao faz nada
        }
    }
    
    private void jTextFieldQtdAcertoAtacanteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldQtdAcertoAtacanteFocusLost
        atualizaDefMult();
    }//GEN-LAST:event_jTextFieldQtdAcertoAtacanteFocusLost

    private void jButtonInvestidaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jButtonInvestidaFocusGained
        jLabelInvestidaAtacante.setText(String.valueOf(Calculadora.getInvestidaAtacante()));
        jLabelInvestidaDefensor.setText(String.valueOf(Calculadora.getInvestidaDefensor()));
        jLabelInvestidaTotal.setText(String.valueOf(Calculadora.getInvestida()));
    }//GEN-LAST:event_jButtonInvestidaFocusGained

    private void jMenuItemRolarDadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRolarDadosActionPerformed
        new ViewIniciativa().setVisible(true);
    }//GEN-LAST:event_jMenuItemRolarDadosActionPerformed

    private void jMenuItemVerIniciativasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemVerIniciativasActionPerformed
        new ViewPosicoes().setVisible(true);
    }//GEN-LAST:event_jMenuItemVerIniciativasActionPerformed

    private void jMenuItemFinalizarBatalhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFinalizarBatalhaActionPerformed
        for (String nome : AlgoritmoPrincipal.getTpb().keySet()) {
            AlgoritmoPrincipal.setFicha(AlgoritmoPrincipal.getPerson(nome));
            new ViewTreinos().setVisible(true);
        }
        // resetando emBatalha
        AlgoritmoPrincipal.clearEmBatalha();
    }//GEN-LAST:event_jMenuItemFinalizarBatalhaActionPerformed

    private void jButtonEditarHpDefensorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jButtonEditarHpDefensorFocusGained
        atualizarCorJProgressBarsHp();
    }//GEN-LAST:event_jButtonEditarHpDefensorFocusGained

    private void editHpDefensor() {
        if (!validaDefensor()) {
            return;
        }
        
        AlgoritmoPrincipal.setFicha(AlgoritmoPrincipal.getDefensor());
        AlgoritmoPrincipal.setLinha(AlgoritmoPrincipal.getHP());
        new View_editarValor(null, true).setVisible(true);
        
        AlgoritmoPrincipal.salvarTurno();
    }
    
    private void jButtonEditarHpDefensorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditarHpDefensorActionPerformed
        editHpDefensor();
    }//GEN-LAST:event_jButtonEditarHpDefensorActionPerformed

    private void jButtonOperarHpDefensorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jButtonOperarHpDefensorFocusGained
        atualizarCorJProgressBarsHp();
    }//GEN-LAST:event_jButtonOperarHpDefensorFocusGained

    private void curarHpDefensor() {
        if (!validaDefensor()) {
            return;
        }
        Ficha personagem = AlgoritmoPrincipal.getDefensor();
        
        
        JOptionPane.showMessageDialog(null, "HP de "+personagem.getNick()+" curado de "+
                personagem.getHpAtual()+" para "+personagem.getHpMax(), "Personagem Curado",
                JOptionPane.INFORMATION_MESSAGE);
        
        personagem.setHpAtual(personagem.getHpMax());
        personagem.setDesmaiado(false);
        
        AlgoritmoPrincipal.salvarTurno();
    }
    
    private void operarHpDefensor() {
        if (!validaDefensor()) {
            return;
        }
        
        AlgoritmoPrincipal.setLinha(AlgoritmoPrincipal.getHP());
        AlgoritmoPrincipal.setFicha(AlgoritmoPrincipal.getDefensor());
        new View_operarValor(null, true).setVisible(true);
        
        AlgoritmoPrincipal.salvarTurno();
    }
    
    private void jButtonOperarHpDefensorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOperarHpDefensorActionPerformed
        operarHpDefensor();
    }//GEN-LAST:event_jButtonOperarHpDefensorActionPerformed

    private void jButtonOperarMopDefensorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jButtonOperarMopDefensorFocusGained
        atualizarJProgressBarsMop();
    }//GEN-LAST:event_jButtonOperarMopDefensorFocusGained

    private void curarMopDefensor() {
        if (!validaDefensor()) {
            return;
        }
        Ficha personagem = AlgoritmoPrincipal.getDefensor();
        
        AlgoritmoPrincipal.setFicha(personagem);
        new View_curarMop(null, true).setVisible(true);
        
        AlgoritmoPrincipal.salvarTurno();
    }
    
    private void operarMopDefensor() {
        if (!validaDefensor()) {
            return;
        }
        
        AlgoritmoPrincipal.setLinha(AlgoritmoPrincipal.getMOP());
        AlgoritmoPrincipal.setFicha(AlgoritmoPrincipal.getDefensor());
        new View_operarValor(null, true).setVisible(true);
        
        AlgoritmoPrincipal.salvarTurno();
    }
    
    private void jButtonOperarMopDefensorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOperarMopDefensorActionPerformed
        operarMopDefensor();
    }//GEN-LAST:event_jButtonOperarMopDefensorActionPerformed

    private void jMenuItemMobsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemMobsActionPerformed
        new ViewMobs().setVisible(true);
    }//GEN-LAST:event_jMenuItemMobsActionPerformed

    private void jButtonEditarMopDefensorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jButtonEditarMopDefensorFocusGained
        atualizarJProgressBarsMop();
    }//GEN-LAST:event_jButtonEditarMopDefensorFocusGained

    private void editMopDefensor() {
        if (!validaDefensor()) {
            return;
        }
        
        AlgoritmoPrincipal.setLinha(AlgoritmoPrincipal.getMOP());
        AlgoritmoPrincipal.setFicha(AlgoritmoPrincipal.getDefensor());
        new View_editarValor(null, true).setVisible(true);
        
        AlgoritmoPrincipal.salvarTurno();
    }
    
    private void jButtonEditarMopDefensorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditarMopDefensorActionPerformed
        editMopDefensor();
    }//GEN-LAST:event_jButtonEditarMopDefensorActionPerformed

    private void jMenuItemEditarHpDefensorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEditarHpDefensorActionPerformed
        editHpDefensor();
    }//GEN-LAST:event_jMenuItemEditarHpDefensorActionPerformed

    private void jMenuItemCurarDefensorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCurarDefensorActionPerformed
        curarHpDefensor();
        atualizarCorJProgressBarsHp();
    }//GEN-LAST:event_jMenuItemCurarDefensorActionPerformed

    private void jMenuItemEditarMopDefensorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEditarMopDefensorActionPerformed
        editMopDefensor();
    }//GEN-LAST:event_jMenuItemEditarMopDefensorActionPerformed

    private void jMenuItemCurarMopDefensorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCurarMopDefensorActionPerformed
        curarMopDefensor();
        atualizarJProgressBarsMop();
    }//GEN-LAST:event_jMenuItemCurarMopDefensorActionPerformed

    private void jMenuItemZerarDadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemZerarDadosActionPerformed
        switch (JOptionPane.showConfirmDialog(null, "Deseja zerar dados de treino?",
                "Reset Train?", JOptionPane.YES_NO_OPTION)) {
            case 0:
                AlgoritmoPrincipal.getTpb().clear();
                // resetando emBatalha
                AlgoritmoPrincipal.clearEmBatalha();
                break;
        }
    }//GEN-LAST:event_jMenuItemZerarDadosActionPerformed

    private void jMenuItemDeterminacaoPenalidadeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemDeterminacaoPenalidadeActionPerformed
        new ViewDeterminacao_Penalidade().setVisible(true);
    }//GEN-LAST:event_jMenuItemDeterminacaoPenalidadeActionPerformed

    private void zerarCorpo(Ficha personagem) {
        // removendo todas as habilidades do corpo
        for (String nome : personagem.getCorpo().getHabilidades().keySet()) {
            personagem.getCorpo().removeHabilidade(nome);
        }
        
        JOptionPane.showMessageDialog(null, "Corpo zerado com sucesso!", "Success!", JOptionPane.INFORMATION_MESSAGE);
    }
    
    private void jMenuItemZerarCorpoDefensorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemZerarCorpoDefensorActionPerformed
        if (!validaDefensor()) {
            return;
        }
        zerarCorpo(AlgoritmoPrincipal.getDefensor());
    }//GEN-LAST:event_jMenuItemZerarCorpoDefensorActionPerformed

    private void jButtonRenDeReflexoAtacanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRenDeReflexoAtacanteActionPerformed
        if (!validaAtacante()) {
            return;
        }
        AlgoritmoPrincipal.setFicha(AlgoritmoPrincipal.getAtacante());
        new ViewReflexRen().setVisible(true);
    }//GEN-LAST:event_jButtonRenDeReflexoAtacanteActionPerformed

    private void jButtonRenDeReflexoDefensorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRenDeReflexoDefensorActionPerformed
        if (!validaDefensor()) {
            return;
        }
        AlgoritmoPrincipal.setFicha(AlgoritmoPrincipal.getDefensor());
        new ViewReflexRen().setVisible(true);
    }//GEN-LAST:event_jButtonRenDeReflexoDefensorActionPerformed

    private void jLabelDanoAtaqueAtacanteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelDanoAtaqueAtacanteMouseEntered
        jLabelDanoAtaqueAtacante.setToolTipText(jLabelDanoAtaqueAtacante.getText());
    }//GEN-LAST:event_jLabelDanoAtaqueAtacanteMouseEntered

    private void jLabelDadoDanoAtacanteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelDadoDanoAtacanteMouseEntered
        jLabelDadoDanoAtacante.setToolTipText(jLabelDadoDanoAtacante.getText());
    }//GEN-LAST:event_jLabelDadoDanoAtacanteMouseEntered

    private void jLabelDanoAtaqueDefensorMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelDanoAtaqueDefensorMouseEntered
        jLabelDanoAtaqueDefensor.setToolTipText(jLabelDanoAtaqueDefensor.getText());
    }//GEN-LAST:event_jLabelDanoAtaqueDefensorMouseEntered

    private void jLabelDadoDanoDefensorMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelDadoDanoDefensorMouseEntered
        jLabelDadoDanoDefensor.setToolTipText(jLabelDadoDanoDefensor.getText());
    }//GEN-LAST:event_jLabelDadoDanoDefensorMouseEntered

    private void jComboBoxNenAtacanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxNenAtacanteActionPerformed
        initTableRyuAtacante(AlgoritmoPrincipal.getAtacante());
    }//GEN-LAST:event_jComboBoxNenAtacanteActionPerformed

    private void jComboBoxNenDefensorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxNenDefensorActionPerformed
        initTableRyuDefensor(AlgoritmoPrincipal.getDefensor());
    }//GEN-LAST:event_jComboBoxNenDefensorActionPerformed

    private void jMenuItemMobsHpsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemMobsHpsActionPerformed
        AlgoritmoPrincipal.setLinha(AlgoritmoPrincipal.getHP());
        new ViewInfosMobs().setVisible(true);
    }//GEN-LAST:event_jMenuItemMobsHpsActionPerformed

    private void jButtonCurarHpAtacante1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jButtonCurarHpAtacante1FocusGained
        atualizarCorJProgressBarsHp();
    }//GEN-LAST:event_jButtonCurarHpAtacante1FocusGained

    private void jButtonCurarHpAtacante1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCurarHpAtacante1ActionPerformed
        curarHpAtacante();
    }//GEN-LAST:event_jButtonCurarHpAtacante1ActionPerformed

    private void jButtonCurarHpDefensor1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jButtonCurarHpDefensor1FocusGained
        atualizarCorJProgressBarsHp();
    }//GEN-LAST:event_jButtonCurarHpDefensor1FocusGained

    private void jButtonCurarHpDefensor1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCurarHpDefensor1ActionPerformed
        curarHpDefensor();
    }//GEN-LAST:event_jButtonCurarHpDefensor1ActionPerformed

    private void jButtonCurarMopAtacante1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jButtonCurarMopAtacante1FocusGained
        atualizarJProgressBarsMop();
    }//GEN-LAST:event_jButtonCurarMopAtacante1FocusGained

    private void jButtonCurarMopAtacante1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCurarMopAtacante1ActionPerformed
        curarMopAtacante();
    }//GEN-LAST:event_jButtonCurarMopAtacante1ActionPerformed

    private void jButtonCurarMopDefensor1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jButtonCurarMopDefensor1FocusGained
        atualizarJProgressBarsMop();
    }//GEN-LAST:event_jButtonCurarMopDefensor1FocusGained

    private void jButtonCurarMopDefensor1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCurarMopDefensor1ActionPerformed
        curarMopDefensor();
    }//GEN-LAST:event_jButtonCurarMopDefensor1ActionPerformed

    private void jMenuItemAtualizarHabilidadesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAtualizarHabilidadesActionPerformed
        CalculadoraHabilidades.init();

        // RECALCULANDO HABILIDADES DE TODAS AS FICHAS
        for (String nick : AlgoritmoPrincipal.getFichas().keySet()) {
            Ficha personagem = AlgoritmoPrincipal.getPerson(nick);
            for (String nomeHabilidade : personagem.getHabilidades().keySet()) {
                Habilidades habilidade = personagem.getHabilidade(nomeHabilidade);
                
                // calculando dano
                int dano = CalculadoraHabilidades.calculaDano(personagem, habilidade);
                // setando dano
                habilidade.setDano(dano);
                
                // ressetando aura bonus
                if (habilidade.isMat()) {
                    double modMat = (double) personagem.getModMat();
                    habilidade.setAuraBonus((int) modMat);
                }
                if (habilidade.isMan()) {
                    double modMan = (double) personagem.getModMan();
                    habilidade.setAuraBonus((int) modMan);
                }
            }
        }
        
        // SALVANDO FICHAS
        File folder = new File(AlgoritmoPrincipal.getDIR_FICHAS());
        try {
            AlgoritmoPrincipal.saveFichas(folder);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ViewPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        // mensagem ao usuario
        JOptionPane.showMessageDialog(null, "Habilidades atualizadas!", "Success!", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jMenuItemAtualizarHabilidadesActionPerformed

    private void jMenuItemPersonsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemPersonsActionPerformed
        new ViewPersons().setVisible(true);
    }//GEN-LAST:event_jMenuItemPersonsActionPerformed

    private void jMenuItemFichaSimplesAtacanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFichaSimplesAtacanteActionPerformed
        if (!validaAtacante()) {
            return;
        }
        AlgoritmoPrincipal.setLinha(AlgoritmoPrincipal.getAtacante().getNick());
        try {
            new ViewFichaMob().setVisible(true);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ViewPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemFichaSimplesAtacanteActionPerformed

    private void jMenuItemFichaSimplesDefensorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemFichaSimplesDefensorActionPerformed
        if (!validaDefensor()) {
            return;
        }
        AlgoritmoPrincipal.setLinha(AlgoritmoPrincipal.getDefensor().getNick());
        try {
            new ViewFichaMob().setVisible(true);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ViewPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItemFichaSimplesDefensorActionPerformed

    private void jButtonGastarMopAtacanteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jButtonGastarMopAtacanteFocusGained
        atualizarJProgressBarsMop();
    }//GEN-LAST:event_jButtonGastarMopAtacanteFocusGained

    private void jButtonGastarMopAtacanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGastarMopAtacanteActionPerformed
        if (!validaAtacante()) {
            return;
        }
        Ficha personagem = AlgoritmoPrincipal.getAtacante();
        
        AlgoritmoPrincipal.setFicha(personagem);
        new View_gastarMop(null, true).setVisible(true);
        
        AlgoritmoPrincipal.salvarTurno();
    }//GEN-LAST:event_jButtonGastarMopAtacanteActionPerformed

    private void jButtonGastarMopDefensorFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jButtonGastarMopDefensorFocusGained
        atualizarJProgressBarsMop();
    }//GEN-LAST:event_jButtonGastarMopDefensorFocusGained

    private void jButtonGastarMopDefensorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGastarMopDefensorActionPerformed
        if (!validaDefensor()) {
            return;
        }
        Ficha personagem = AlgoritmoPrincipal.getDefensor();

        AlgoritmoPrincipal.setFicha(personagem);
        new View_gastarMop(null, true).setVisible(true);
        
        AlgoritmoPrincipal.salvarTurno();
    }//GEN-LAST:event_jButtonGastarMopDefensorActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        switch (JOptionPane.showConfirmDialog(null, "Deseja zerar o stun dos personagens?",
                "Zerando stuns", JOptionPane.YES_NO_OPTION)) {
            case 0:
                // zerando todos os stuns
                for (String nomePerson : AlgoritmoPrincipal.getFichas().keySet()) {
                    AlgoritmoPrincipal.getPerson(nomePerson).setStun(0);
                }

                JOptionPane.showMessageDialog(null, "Todos os personagens tiveram o stun zerado com sucesso!",
                        "Stuns zerados!", JOptionPane.INFORMATION_MESSAGE);
                
                // atualizando jLabelStuns
                try {
                    jLabelStunAtacante.setText(String.valueOf(AlgoritmoPrincipal.getAtacante().getStun()));
                } catch (NullPointerException e) {
                    // nao faz nada
                }
                try {
                    jLabelStunDefensor.setText(String.valueOf(AlgoritmoPrincipal.getDefensor().getStun()));
                } catch (NullPointerException e) {
                    // nao faz nada
                }
                break;
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButtonDesfazerMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonDesfazerMouseEntered
        jButtonDesfazer.setToolTipText("Desfaz alterações em HP e MOP");
    }//GEN-LAST:event_jButtonDesfazerMouseEntered
    
    private void desfazer() {
        if (!InfoTurno.decrementarQtdTurnos()) {
            JOptionPane.showMessageDialog(null, "Não é possível desfazer mais!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        int turno = InfoTurno.getQtdTurnos() - 1;
        InfoTurno infoTurno = AlgoritmoPrincipal.getInfoTurnos().get(turno);
        
        for (String nick : AlgoritmoPrincipal.getFichas().keySet()) {
            Ficha personagem = AlgoritmoPrincipal.getPerson(nick);
            try {
                personagem.setHpAtual(infoTurno.getInfoPersons().get(nick).getHp());
                personagem.setMopAtual(infoTurno.getInfoPersons().get(nick).getMop());
            } catch (NullPointerException e) {
//                JOptionPane.showMessageDialog(null, "Bando de Dados de HP e MOP não encontrados!", "No DataBase!",
//                    JOptionPane.WARNING_MESSAGE);
            }
        }
        
        atualizarJProgressBarsMop();
        atualizarCorJProgressBarsHp();
    }
    
    private void jButtonDesfazerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDesfazerActionPerformed
        desfazer();
    }//GEN-LAST:event_jButtonDesfazerActionPerformed

    private void jButtonRefazerMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonRefazerMouseEntered
        jButtonDesfazer.setToolTipText("Refaz alterações em HP e MOP");
    }//GEN-LAST:event_jButtonRefazerMouseEntered
    
    private void refazer() {
        if (!InfoTurno.incrementarQtdTurnos()) {
            JOptionPane.showMessageDialog(null, "Não é possível refazer mais!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        int turno = InfoTurno.getQtdTurnos() - 1;
        InfoTurno infoTurno = AlgoritmoPrincipal.getInfoTurnos().get(turno);
        
        for (String nick : AlgoritmoPrincipal.getFichas().keySet()) {
            Ficha personagem = AlgoritmoPrincipal.getPerson(nick);
            try {
                personagem.setHpAtual(infoTurno.getInfoPersons().get(nick).getHp());
                personagem.setMopAtual(infoTurno.getInfoPersons().get(nick).getMop());
            } catch (NullPointerException e) {
//                JOptionPane.showMessageDialog(null, "Bando de Dados de HP e MOP não encontrados!", "No DataBase!",
//                    JOptionPane.WARNING_MESSAGE);
            }
        }
        
        atualizarJProgressBarsMop();
        atualizarCorJProgressBarsHp();
    }
    
    private void jButtonRefazerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefazerActionPerformed
        refazer();
    }//GEN-LAST:event_jButtonRefazerActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        desfazer();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        refazer();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        operarHpAtacante();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        operarHpDefensor();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        operarMopAtacante();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        operarMopDefensor();
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void curar(Ficha personagem, String nomeSkill, String nen, int ryu, int dado, int bonus, int qtd, boolean consomeAura) {
        Calculadora.init();
        
        Calculadora.setAtacante(personagem);
        int cura = Calculadora.getDano(nomeSkill, nen, ryu, dado, bonus, consomeAura);
        
        int hp = personagem.getHpAtual();
        cura *= qtd;
        hp += cura;

        if (hp > personagem.getHpMax()) {
            hp = personagem.getHpMax();
        }
        personagem.setHpAtual(hp);
        
        // mensagem ao usuario
        JOptionPane.showMessageDialog(null,
                personagem.getNick() + " curado em " + cura, "Success", JOptionPane.INFORMATION_MESSAGE);

        
        if (personagem.isDesmaiado()) {
            switch (JOptionPane.showConfirmDialog(null, "Acordar personagem do desmaio?",
                "Faint", JOptionPane.YES_NO_OPTION)) {

                case 0:
                personagem.setDesmaiado(false);
                break;
            }
        }
        
        // reduzindo aura do ataque, se consomeAura estiver selecionado
        int mop = personagem.getMopAtual();
        int volume = personagem.getHabilidade(nomeSkill).getVol();
        
        if (jCheckBoxGastouRyuAtacante.isSelected()) {
            // reduz o ryu gasto
            mop -= Calculadora.calculaGastoRyu(ryu, personagem.getAop(), qtd, volume,
                    Integer.parseInt(jTextFieldAuraBonusAtacante.getText()));
        }
        
        // setando novo MOP no personagem
        personagem.setMopAtual(mop);
        
        // atualizando jProgressBars
        atualizarCorJProgressBarsHp();
        atualizarJProgressBarsMop();
        
        AlgoritmoPrincipal.salvarTurno();
    }
    
    private void jButtonCurarAtacanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCurarAtacanteActionPerformed
        if (!validaAtacante()) {
            return;
        }
        Ficha personagem = AlgoritmoPrincipal.getAtacante();
        String nomeSkill = jComboBoxAtacante.getSelectedItem().toString();
        String nen = jComboBoxNenAtacante.getSelectedItem().toString();
        int ryu = Integer.parseInt(jTextFieldRyuAtacante.getText());
        int dado = Integer.parseInt(jTextFieldDadoAtacante.getText());
        int bonus = Integer.parseInt(jTextFieldAuraBonusAtacante.getText());
        int qtd = Integer.parseInt(jTextFieldQtdAcertoAtacante.getText());
        boolean consomeAura = jCheckBoxUsouRenAtacante.isSelected();
        
        curar(personagem, nomeSkill, nen, ryu, dado, bonus, qtd, consomeAura);
    }//GEN-LAST:event_jButtonCurarAtacanteActionPerformed

    private void jButtonCurarDefensorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCurarDefensorActionPerformed
        if (!validaDefensor()) {
            return;
        }
        Ficha personagem = AlgoritmoPrincipal.getDefensor();
        String nomeSkill = jComboBoxDefensor.getSelectedItem().toString();
        String nen = jComboBoxNenDefensor.getSelectedItem().toString();
        int ryu = Integer.parseInt(jTextFieldRyuDefensor.getText());
        int dado = Integer.parseInt(jTextFieldDadoDefensor.getText());
        int bonus = Integer.parseInt(jTextFieldAuraBonusDefensor.getText());
        int qtd = Integer.parseInt(jTextFieldQtdAcertoDefensor.getText());
        boolean consomeAura = jCheckBoxGastouRyuDefensor.isSelected();
        
        curar(personagem, nomeSkill, nen, ryu, dado, bonus, qtd, consomeAura);
    }//GEN-LAST:event_jButtonCurarDefensorActionPerformed
    
    private void zerarStun(Ficha personagem) {
        switch (JOptionPane.showConfirmDialog(null,
                "Zerar stun de " + personagem.getNick() + "?",
                "Reset stun?",
                JOptionPane.YES_NO_OPTION)) {
            
            case 0:
                personagem.setStun(0);
                JOptionPane.showMessageDialog(null,
                        "Stun de " + personagem.getStun() + " foi zerado!",
                        "Success!",
                        JOptionPane.INFORMATION_MESSAGE);
                
                break;
        }
    }
    
    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        if (!validaDefensor()) {
            return;
        }
        Ficha defensor = AlgoritmoPrincipal.getDefensor();
        zerarStun(defensor);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        if (!validaAtacante()) {
            return;
        }
        Ficha atacante = AlgoritmoPrincipal.getAtacante();
        zerarStun(atacante);
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jCheckBoxMenuItemSalvamentoAutomaticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemSalvamentoAutomaticoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxMenuItemSalvamentoAutomaticoActionPerformed

    private void jMenuItemSalvarHpMopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSalvarHpMopActionPerformed
        salvarHpsEMops();
    }//GEN-LAST:event_jMenuItemSalvarHpMopActionPerformed

    private void jMenuItemZerarTodosShusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemZerarTodosShusActionPerformed
        switch (JOptionPane.showConfirmDialog(null, "Deseja mesmo zerar os shus de todos os personagens?",
                "Zerando todos os shus", JOptionPane.YES_NO_OPTION)) {
            case 0:
                // zerando shus
                for (String nome : AlgoritmoPrincipal.getFichas().keySet()) {
                    AlgoritmoPrincipal.getPerson(nome).setShu(0);
                }
                
                // mensagem ao usuario
                JOptionPane.showMessageDialog(null, "Shus zerados!", "Success!", JOptionPane.INFORMATION_MESSAGE);
                break;
        }
    }//GEN-LAST:event_jMenuItemZerarTodosShusActionPerformed

    private void atualizarPontosInspiracaoBd(Ficha ficha) {
//        Connection execute = ModuloConexao.conector();
        Connection execute = ModuloConexao.postgresConector();
        String sql = "update ficha set pontosInspiracao = ? where nick = ?";
        
        try {
            PreparedStatement pst = execute.prepareStatement(sql);
            pst.setString(1, String.valueOf(ficha.getPontosInspiracao()));
            pst.setString(2, ficha.getNick());
            pst.execute();
            
            execute.close();
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    private void atualizarPontosHeroicosBd(Ficha ficha) {
        Connection execute = ModuloConexao.postgresConector();
        String sql = "update ficha set pontosHeroicos = ? where nick = ?";
        
        try {
            PreparedStatement pst = execute.prepareStatement(sql);
            pst.setString(1, String.valueOf(ficha.getPontosInspiracao()));
            pst.setString(2, ficha.getNick());
            pst.execute();
            
            execute.close();
        } catch (Exception e) {
            System.out.println(e);
        }
    }
    
    private void addPontoInspiracao(Ficha ficha) {
        if (ficha == null) {
            return;
        }
        
        ficha.setPontosInspiracao(ficha.getPontosInspiracao() + 1);
        
        JOptionPane.showMessageDialog(null, "Ponto de inspiração adicionado no personagem "
                + ficha.getNick(), "Success!", JOptionPane.INFORMATION_MESSAGE);
        
        atualizarPontosInspiracaoBd(ficha);
    }
    
    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        if (!validaAtacante()) {
            return;
        }
        addPontoInspiracao(AlgoritmoPrincipal.getAtacante());
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        if (!validaDefensor()) {
            return;
        }
        addPontoInspiracao(AlgoritmoPrincipal.getDefensor());
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void addPontoHeroico(Ficha ficha) {
        ficha.setPontosHeroicos(ficha.getPontosHeroicos() + 1);
        
        JOptionPane.showMessageDialog(null, "Ponto heróico adicionado no personagem "
                + ficha.getNick(), "Success!", JOptionPane.INFORMATION_MESSAGE);
        
        atualizarPontosHeroicosBd(ficha);
    }
    
    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        if (!validaAtacante()) {
            return;
        }
        addPontoHeroico(AlgoritmoPrincipal.getAtacante());
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed
        if (!validaDefensor()) {
            return;
        }
        addPontoHeroico(AlgoritmoPrincipal.getDefensor());
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void removePontoInspiracao(Ficha ficha) {
        int pt = ficha.getPontosInspiracao();
        if (pt < 1) {
            JOptionPane.showMessageDialog(null, "O personagem nao tem pontos de inspiração!",
                    "Error!", JOptionPane.ERROR_MESSAGE);
        } else {
            ficha.setPontosInspiracao(--pt);
            
            JOptionPane.showMessageDialog(null, "Ponto de inspiração removido do personagem "
                + ficha.getNick(), "Success!", JOptionPane.INFORMATION_MESSAGE);
            
            atualizarPontosInspiracaoBd(ficha);
        }
    }
    
    private void jMenuItem16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem16ActionPerformed
        if (!validaAtacante()) {
            return;
        }
        removePontoInspiracao(AlgoritmoPrincipal.getAtacante());
    }//GEN-LAST:event_jMenuItem16ActionPerformed

    private void jMenuItem17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem17ActionPerformed
        if (!validaDefensor()) {
            return;
        }
        removePontoInspiracao(AlgoritmoPrincipal.getDefensor());
    }//GEN-LAST:event_jMenuItem17ActionPerformed

    private void removePontoHeroico(Ficha ficha) {
        int pt = ficha.getPontosHeroicos();
        if (pt < 1) {
            JOptionPane.showMessageDialog(null, "O personagem nao tem pontos heróicos!",
                    "Error!", JOptionPane.ERROR_MESSAGE);
        } else {
            ficha.setPontosHeroicos(--pt);
            
            JOptionPane.showMessageDialog(null, "Ponto heróico removido do personagem "
                + ficha.getNick(), "Success!", JOptionPane.INFORMATION_MESSAGE);
            
            atualizarPontosHeroicosBd(ficha);
        }
    }
    
    private void jMenuItem18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem18ActionPerformed
        if (!validaAtacante()) {
            return;
        }
        removePontoHeroico(AlgoritmoPrincipal.getAtacante());
    }//GEN-LAST:event_jMenuItem18ActionPerformed

    private void jMenuItem19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem19ActionPerformed
        if (!validaDefensor()) {
            return;
        }
        removePontoHeroico(AlgoritmoPrincipal.getDefensor());
    }//GEN-LAST:event_jMenuItem19ActionPerformed

    private void gastarSorte(Ficha ficha) {
        int sorte = ficha.getSorte();
        if (sorte < 1) {
            JOptionPane.showMessageDialog(null, "O personagem nao tem mais sortes!",
                    "Error!", JOptionPane.ERROR_MESSAGE);
            
            return;
        }
        
        Connection execute = ModuloConexao.postgresConector();
        String sql = "update ficha set sortes = ? where nick = ?";
        
        // LINHA PRINCIPAL
        ficha.decrementaSorte();
        
        try {
            PreparedStatement pst = execute.prepareStatement(sql);
            pst.setString(1, String.valueOf(ficha.getSorte()));
            pst.setString(2, ficha.getNick());
            pst.execute();
            
            execute.close();
            
            JOptionPane.showMessageDialog(null, "Sorte decrementada!",
                    "Success", JOptionPane.INFORMATION_MESSAGE);
            
        } catch (Exception e) {
            System.out.println(e);
        }
    }
    
    private void jMenuItem14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem14ActionPerformed
        if (!validaAtacante()) {
            return;
        }
        gastarSorte(AlgoritmoPrincipal.getAtacante());
    }//GEN-LAST:event_jMenuItem14ActionPerformed

    private void jMenuItem15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem15ActionPerformed
        if (!validaDefensor()) {
            return;
        }
        gastarSorte(AlgoritmoPrincipal.getDefensor());
    }//GEN-LAST:event_jMenuItem15ActionPerformed

    private void jComboBoxAtacanteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBoxAtacanteMouseEntered
        if (jComboBoxAtacante.getSelectedItem() == null) {
            return;
        }
        jComboBoxAtacante.setToolTipText(jComboBoxAtacante.getSelectedItem().toString());
    }//GEN-LAST:event_jComboBoxAtacanteMouseEntered

    private void jComboBoxDefensorMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBoxDefensorMouseEntered
        if (jComboBoxDefensor.getSelectedItem() == null) {
            return;
        }
        jComboBoxDefensor.setToolTipText(jComboBoxDefensor.getSelectedItem().toString());
    }//GEN-LAST:event_jComboBoxDefensorMouseEntered

    private void jComboBoxAtacanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxAtacanteActionPerformed
        
        if (jComboBoxAtacante.getSelectedItem() == null) {
            
            // limpando informações de habilidade
            jLabelDanoAtaqueAtacante.setText("");
            jLabelVolumeAtaqueAtacante.setText("");
            
            // limpando informações de habilidade
            jLabelDadoDanoAtacante.setText("");
            jTextPaneDescSkillAtacante.setText("");
            jLabelActAtacante.setText("");
            jLabelVolAtacante.setText("");
            jLabelCrtSkillAtacante.setText("");
            jLabelSkillQtdAtacante.setText("");
            return;
            
        }
        if (jComboBoxAtacante.getSelectedItem().toString().equals("FISICO")) {
            
            // limpando informações de habilidade
            jLabelDanoAtaqueAtacante.setText(" +"+AlgoritmoPrincipal.getAtacante().getPerFor());
            jLabelVolumeAtaqueAtacante.setText("2");
            
            // limpando informações de habilidade
            jLabelDadoDanoAtacante.setText(" +"+AlgoritmoPrincipal.getAtacante().getPerFor());
            jTextPaneDescSkillAtacante.setText("");
            jLabelActAtacante.setText(String.valueOf(AlgoritmoPrincipal.getAtacante().getPerDex()));
            jLabelVolAtacante.setText("2");
            jLabelCrtSkillAtacante.setText("2");
            jLabelSkillQtdAtacante.setText("2");
            jTextFieldAuraBonusAtacante.setText("0");
            jLabelAuraBonusCalculadaAtacante.setText("0");
            jTextFieldQtdAtaqueAtacante.setText("2");
            jTextFieldQtdAcertoAtacante.setText("2");
            return;
            
        }

        Ficha atacante = AlgoritmoPrincipal.getAtacante();
        String nomeHabilidade = jComboBoxAtacante.getSelectedItem().toString();
        Habilidades habilidade = atacante.getHabilidade(nomeHabilidade);
        double pop = Calculadora.getPop(atacante.getAtrRef(), jComboBoxNenAtacante.getSelectedItem().toString());
        int auraBonus;
        
        if (habilidade.isMan()) {
            auraBonus = (int) (/*habilidade.getRestricao() **/ atacante.getPerMan());
        } else if (habilidade.isMat()) {
            auraBonus = (int) (/*habilidade.getRestricao() **/ atacante.getPerMat());
        } else {
            auraBonus = 0;
        }
        jTextFieldAuraBonusAtacante.setText(String.valueOf(auraBonus));
        
        if (habilidade.getVol() == 2) {
            auraBonus *= 2;
        }
        if (habilidade.getVol() == 3) {
            auraBonus *= 1.5;
        }
        
        int ren = (int) Calculadora.getRyu(50, 100, pop * auraBonus);
        jLabelAuraBonusAtacante.setText(String.valueOf((int) (habilidade.getRestricao() * ren)));
        jLabelAuraBonusCalculadaAtacante.setText(jTextFieldAuraBonusAtacante.getText());
        
        jLabelDanoAtaqueAtacante.setText(habilidade.getDados()+" +"+String.valueOf(habilidade.getDano()));
        jLabelVolumeAtaqueAtacante.setText(String.valueOf(habilidade.getVol()));
        jTextFieldQtdAtaqueAtacante.setText(String.valueOf(habilidade.getQtd()));
        jTextFieldQtdAcertoAtacante.setText(String.valueOf(habilidade.getQtd()));

        AlgoritmoPrincipal.setFicha(atacante);
        AlgoritmoPrincipal.setLinha(jComboBoxAtacante.getSelectedItem().toString());
        try {
            AlgoritmoPrincipal.setValor(Integer.parseInt(jTextFieldQtdAtaqueAtacante.getText()));
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Valor de \"Quantidade de Ataque\" inválido!",
                "Error!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (nomeHabilidade.equals("FISICO")) {
            return;
        }
        
        if (habilidade.isMat()) {
            AlgoritmoPrincipal.setLinha(nomeHabilidade);
            new View_conjurada(null, true).setVisible(true);
            jProgressBarMopAtacante.setValue(atacante.getMopAtual());
        }
        
        // desmarcando as checkbox
        jCheckBoxDanoCritico.setSelected(false);
        jCheckBoxUsouRenAtacante.setSelected(false);
        jCheckBoxGastouRyuAtacante.setSelected(habilidade.isGastaRyu());
        
        // setando valores padrao
        jTextFieldRyuAtacante.setText(String.valueOf(habilidade.getRyu()));
        jCheckBoxGastouRyuAtacante.setSelected(habilidade.isGastaRyu());
        jCheckBoxDanoRebote.setSelected(habilidade.isDanoRebote());
        jCheckBoxDanoPerfurante.setSelected(habilidade.isPerfurante());
        
        initInfoAtacanteHabilidade(atacante, habilidade);
    }//GEN-LAST:event_jComboBoxAtacanteActionPerformed

    private void jMenuItem20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem20ActionPerformed
        AlgoritmoPrincipal.setLinha(AlgoritmoPrincipal.getLVL());
        new ViewInfos().setVisible(true);
    }//GEN-LAST:event_jMenuItem20ActionPerformed

    private void jMenuItem21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem21ActionPerformed
        if (!validaAtacante()) {
            return;
        }
        AlgoritmoPrincipal.setLinha(AlgoritmoPrincipal.getAtacante().getNick());
        new ViewFichaPadrao().setVisible(true);
    }//GEN-LAST:event_jMenuItem21ActionPerformed

    private void jMenuItem22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem22ActionPerformed
        if (!validaDefensor()) {
            return;
        }
        AlgoritmoPrincipal.setLinha(AlgoritmoPrincipal.getDefensor().getNick());
        new ViewFichaPadrao().setVisible(true);
    }//GEN-LAST:event_jMenuItem22ActionPerformed

    private void jLabelZtsAtacanteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelZtsAtacanteMouseEntered
        jLabelZtsAtacante.setToolTipText("Per Zts");
    }//GEN-LAST:event_jLabelZtsAtacanteMouseEntered

    private void jLabelAuraBonusAtacanteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelAuraBonusAtacanteMouseEntered
        jLabelAuraBonusAtacante.setToolTipText("Dano relativo ao volume bonus máxmo");
    }//GEN-LAST:event_jLabelAuraBonusAtacanteMouseEntered

    private void jLabelAuraBonusDefensorMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabelAuraBonusDefensorMouseEntered
        jLabelAuraBonusDefensor.setToolTipText("Dano relativo ao volume bonus máxmo");
    }//GEN-LAST:event_jLabelAuraBonusDefensorMouseEntered

    private void jCheckBoxMenuItemIniciativaAutomaticaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxMenuItemIniciativaAutomaticaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxMenuItemIniciativaAutomaticaActionPerformed

    private void jCheckBoxUsouRenAtacanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxUsouRenAtacanteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxUsouRenAtacanteActionPerformed
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new ViewPrincipal().setVisible(true);
            } catch (IOException | ClassNotFoundException ex) {
                Logger.getLogger(ViewPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCalcularAtaque;
    private javax.swing.JButton jButtonCurarAtacante;
    private javax.swing.JButton jButtonCurarDefensor;
    private javax.swing.JButton jButtonCurarHpAtacante1;
    private javax.swing.JButton jButtonCurarHpDefensor1;
    private javax.swing.JButton jButtonCurarHpsEMops;
    private javax.swing.JButton jButtonCurarMopAtacante1;
    private javax.swing.JButton jButtonCurarMopDefensor1;
    private javax.swing.JButton jButtonDesfazer;
    private javax.swing.JButton jButtonEditaCorpoAtacante;
    private javax.swing.JButton jButtonEditaCorpoDefensor;
    private javax.swing.JButton jButtonEditarHpAtacante;
    private javax.swing.JButton jButtonEditarHpDefensor;
    private javax.swing.JButton jButtonEditarMopAtacante;
    private javax.swing.JButton jButtonEditarMopDefensor;
    private javax.swing.JButton jButtonExecutarEditor;
    private javax.swing.JButton jButtonExecutarEditor1;
    private javax.swing.JButton jButtonExecutarHabilidades;
    private javax.swing.JButton jButtonExecutarTrainer;
    private javax.swing.JButton jButtonGastarMopAtacante;
    private javax.swing.JButton jButtonGastarMopDefensor;
    private javax.swing.JButton jButtonInverterJogadores;
    private javax.swing.JButton jButtonInvestida;
    private javax.swing.JButton jButtonMostrarExtensoes;
    private javax.swing.JButton jButtonMostrarHps;
    private javax.swing.JButton jButtonMostrarKens;
    private javax.swing.JButton jButtonMostrarMops;
    private javax.swing.JButton jButtonOkAtacante;
    private javax.swing.JButton jButtonOkDefensor;
    private javax.swing.JButton jButtonOperarHpAtacante;
    private javax.swing.JButton jButtonOperarHpDefensor;
    private javax.swing.JButton jButtonOperarMopAtacante;
    private javax.swing.JButton jButtonOperarMopDefensor;
    private javax.swing.JButton jButtonRefazer;
    private javax.swing.JButton jButtonRenDeReflexoAtacante;
    private javax.swing.JButton jButtonRenDeReflexoDefensor;
    private javax.swing.JButton jButtonRodarTurno;
    private javax.swing.JButton jButtonSair;
    private javax.swing.JButton jButtonSalvarHpsEMops;
    private javax.swing.JCheckBox jCheckBoxDanoCritico;
    private javax.swing.JCheckBox jCheckBoxDanoPerfurante;
    private javax.swing.JCheckBox jCheckBoxDanoRebote;
    private javax.swing.JCheckBox jCheckBoxDefendeu;
    private javax.swing.JCheckBox jCheckBoxGastouRyuAtacante;
    private javax.swing.JCheckBox jCheckBoxGastouRyuDefensor;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemIniciativaAutomatica;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItemSalvamentoAutomatico;
    private javax.swing.JCheckBox jCheckBoxUsouRenAtacante;
    private javax.swing.JCheckBox jCheckBoxUsouRenDefensor;
    private javax.swing.JComboBox<String> jComboBoxAtacante;
    private javax.swing.JComboBox<String> jComboBoxDefensor;
    private javax.swing.JComboBox<String> jComboBoxNenAtacante;
    private javax.swing.JComboBox<String> jComboBoxNenDefensor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel110;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel73;
    private javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel75;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JLabel jLabel77;
    private javax.swing.JLabel jLabel78;
    private javax.swing.JLabel jLabel79;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel80;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JLabel jLabel82;
    private javax.swing.JLabel jLabel83;
    private javax.swing.JLabel jLabel84;
    private javax.swing.JLabel jLabel85;
    private javax.swing.JLabel jLabel86;
    private javax.swing.JLabel jLabel87;
    private javax.swing.JLabel jLabel88;
    private javax.swing.JLabel jLabel89;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabel90;
    private javax.swing.JLabel jLabel91;
    private javax.swing.JLabel jLabelActAtacante;
    private javax.swing.JLabel jLabelActDefensor;
    private javax.swing.JLabel jLabelAtacante;
    private javax.swing.JLabel jLabelAtacante2;
    private javax.swing.JLabel jLabelAtaque;
    private javax.swing.JLabel jLabelAtk;
    private javax.swing.JLabel jLabelAuraBonusAtacante;
    private javax.swing.JLabel jLabelAuraBonusCalculadaAtacante;
    private javax.swing.JLabel jLabelAuraBonusCalculadaDefensor;
    private javax.swing.JLabel jLabelAuraBonusDefensor;
    private javax.swing.JLabel jLabelCarAtacante;
    private javax.swing.JLabel jLabelCarDefensor;
    private javax.swing.JLabel jLabelConAtacante;
    private javax.swing.JLabel jLabelConDefensor;
    private javax.swing.JLabel jLabelCorpoAtacante;
    private javax.swing.JLabel jLabelCorpoDefensor;
    private javax.swing.JLabel jLabelCrtAtacante;
    private javax.swing.JLabel jLabelCrtDefensor;
    private javax.swing.JLabel jLabelCrtSkillAtacante;
    private javax.swing.JLabel jLabelCrtSkillDefensor;
    private javax.swing.JLabel jLabelDF;
    private javax.swing.JLabel jLabelDadoDanoAtacante;
    private javax.swing.JLabel jLabelDadoDanoDefensor;
    private javax.swing.JLabel jLabelDanoAtaqueAtacante;
    private javax.swing.JLabel jLabelDanoAtaqueDefensor;
    private javax.swing.JLabel jLabelDanoFinal;
    private javax.swing.JLabel jLabelDanoInicial;
    private javax.swing.JLabel jLabelDef;
    private javax.swing.JLabel jLabelDefensor;
    private javax.swing.JLabel jLabelDefensor2;
    private javax.swing.JLabel jLabelDefesa;
    private javax.swing.JLabel jLabelDefesaCalculada;
    private javax.swing.JLabel jLabelDexAtacante;
    private javax.swing.JLabel jLabelDexDefensor;
    private javax.swing.JLabel jLabelEmsAtacante;
    private javax.swing.JLabel jLabelEmsDefensor;
    private javax.swing.JLabel jLabelEnAtacante;
    private javax.swing.JLabel jLabelEnDefensor;
    private javax.swing.JLabel jLabelEsqAtacante;
    private javax.swing.JLabel jLabelEsqDefensor;
    private javax.swing.JLabel jLabelForAtacante;
    private javax.swing.JLabel jLabelForDefensor;
    private javax.swing.JLabel jLabelHpAtualAtacante;
    private javax.swing.JLabel jLabelHpAtualDefensor;
    private javax.swing.JLabel jLabelHpFinalAtacante;
    private javax.swing.JLabel jLabelHpFinalDefensor;
    private javax.swing.JLabel jLabelImagemPerfilAtacante;
    private javax.swing.JLabel jLabelImagemPerfilDefensor;
    private javax.swing.JLabel jLabelIniAtacante;
    private javax.swing.JLabel jLabelIniDefensor;
    private javax.swing.JLabel jLabelIntAtacante;
    private javax.swing.JLabel jLabelIntDefensor;
    private javax.swing.JLabel jLabelInvestidaAtacante;
    private javax.swing.JLabel jLabelInvestidaDefensor;
    private javax.swing.JLabel jLabelInvestidaTotal;
    private javax.swing.JLabel jLabelMenAtacante;
    private javax.swing.JLabel jLabelMenDefensor;
    private javax.swing.JLabel jLabelNomePersonagemAtacante;
    private javax.swing.JLabel jLabelNomePersonagemDefensor;
    private javax.swing.JLabel jLabelRyuAtacante;
    private javax.swing.JLabel jLabelRyuDefensor;
    private javax.swing.JLabel jLabelSkillQtdAtacante;
    private javax.swing.JLabel jLabelSkillQtdDefensor;
    private javax.swing.JLabel jLabelSrtAtacante;
    private javax.swing.JLabel jLabelSrtDefensor;
    private javax.swing.JLabel jLabelStunAtacante;
    private javax.swing.JLabel jLabelStunDefensor;
    private javax.swing.JLabel jLabelVelKmAtacante;
    private javax.swing.JLabel jLabelVelKmDefensor;
    private javax.swing.JLabel jLabelVelMsAtacante;
    private javax.swing.JLabel jLabelVelMsDefensor;
    private javax.swing.JLabel jLabelVolAtacante;
    private javax.swing.JLabel jLabelVolDefensor;
    private javax.swing.JLabel jLabelVolumeAtaqueAtacante;
    private javax.swing.JLabel jLabelVolumeAtaqueDefensor;
    private javax.swing.JLabel jLabelZtsAtacante;
    private javax.swing.JLabel jLabelZtsDefensor;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu10;
    private javax.swing.JMenu jMenu11;
    private javax.swing.JMenu jMenu12;
    private javax.swing.JMenu jMenu13;
    private javax.swing.JMenu jMenu14;
    private javax.swing.JMenu jMenu15;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem17;
    private javax.swing.JMenuItem jMenuItem18;
    private javax.swing.JMenuItem jMenuItem19;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem20;
    private javax.swing.JMenuItem jMenuItem21;
    private javax.swing.JMenuItem jMenuItem22;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JMenuItem jMenuItemAdicionarCorpos;
    private javax.swing.JMenuItem jMenuItemAtualizarHabilidades;
    private javax.swing.JMenuItem jMenuItemCurarAtacante;
    private javax.swing.JMenuItem jMenuItemCurarDefensor;
    private javax.swing.JMenuItem jMenuItemCurarMopAtacante;
    private javax.swing.JMenuItem jMenuItemCurarMopDefensor;
    private javax.swing.JMenuItem jMenuItemDanoEmArea;
    private javax.swing.JMenuItem jMenuItemDescricaoAtacante;
    private javax.swing.JMenuItem jMenuItemDescricaoDefensor;
    private javax.swing.JMenuItem jMenuItemDeterminacaoPenalidade;
    private javax.swing.JMenuItem jMenuItemDps;
    private javax.swing.JMenuItem jMenuItemEditarHpAtacante;
    private javax.swing.JMenuItem jMenuItemEditarHpDefensor;
    private javax.swing.JMenuItem jMenuItemEditarMopAtacante;
    private javax.swing.JMenuItem jMenuItemEditarMopDefensor;
    private javax.swing.JMenuItem jMenuItemFichaAtacante;
    private javax.swing.JMenuItem jMenuItemFichaDefensor;
    private javax.swing.JMenuItem jMenuItemFichaSimplesAtacante;
    private javax.swing.JMenuItem jMenuItemFichaSimplesDefensor;
    private javax.swing.JMenuItem jMenuItemFinalizarBatalha;
    private javax.swing.JMenuItem jMenuItemInventarioAtacante;
    private javax.swing.JMenuItem jMenuItemInventarioDefensor;
    private javax.swing.JMenuItem jMenuItemMobs;
    private javax.swing.JMenuItem jMenuItemMobsHps;
    private javax.swing.JMenuItem jMenuItemMostrarHps;
    private javax.swing.JMenuItem jMenuItemMostrarKens;
    private javax.swing.JMenuItem jMenuItemMostrarMops;
    private javax.swing.JMenuItem jMenuItemPersons;
    private javax.swing.JMenuItem jMenuItemResetarFichas;
    private javax.swing.JMenuItem jMenuItemResetarSortes;
    private javax.swing.JMenuItem jMenuItemRodarDias;
    private javax.swing.JMenuItem jMenuItemRodarTurnos;
    private javax.swing.JMenuItem jMenuItemRolarDados;
    private javax.swing.JMenuItem jMenuItemSair;
    private javax.swing.JMenuItem jMenuItemSalvarHpMop;
    private javax.swing.JMenuItem jMenuItemStunEmArea;
    private javax.swing.JMenuItem jMenuItemVerIniciativas;
    private javax.swing.JMenuItem jMenuItemVisualizarNen;
    private javax.swing.JMenuItem jMenuItemZerarCorpoAtacante;
    private javax.swing.JMenuItem jMenuItemZerarCorpoDefensor;
    private javax.swing.JMenuItem jMenuItemZerarDados;
    private javax.swing.JMenuItem jMenuItemZerarTodosCorpos;
    private javax.swing.JMenuItem jMenuItemZerarTodosShus;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JProgressBar jProgressBarHpAtacante;
    private javax.swing.JProgressBar jProgressBarHpDefensor;
    private javax.swing.JProgressBar jProgressBarMopAtacante;
    private javax.swing.JProgressBar jProgressBarMopDefensor;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable jTableRyuAtacante;
    private javax.swing.JTable jTableRyuDefensor;
    private javax.swing.JTextField jTextFieldAtacante;
    private javax.swing.JTextField jTextFieldAuraBonusAtacante;
    private javax.swing.JTextField jTextFieldAuraBonusDefensor;
    private javax.swing.JTextField jTextFieldDadoAtacante;
    private javax.swing.JTextField jTextFieldDadoDefensor;
    private javax.swing.JTextField jTextFieldDefensor;
    private javax.swing.JTextField jTextFieldQtdAcertoAtacante;
    private javax.swing.JTextField jTextFieldQtdAcertoDefensor;
    private javax.swing.JTextField jTextFieldQtdAtaqueAtacante;
    private javax.swing.JTextField jTextFieldQtdCriticoAtacante;
    private javax.swing.JTextField jTextFieldQtdCriticoDefensor;
    private javax.swing.JTextField jTextFieldQtdDefesaDefensor;
    private javax.swing.JTextField jTextFieldRyuAtacante;
    private javax.swing.JTextField jTextFieldRyuDefensor;
    private javax.swing.JTextField jTextFieldShuAtacante;
    private javax.swing.JTextField jTextFieldShuDefensor;
    private javax.swing.JTextPane jTextPaneDescSkillAtacante;
    private javax.swing.JTextPane jTextPaneDescSkillDefensor;
    private javax.swing.JTextPane jTextPaneDescricaoBreveAtacante;
    private javax.swing.JTextPane jTextPaneDescricaoBreveDefensor;
    // End of variables declaration//GEN-END:variables
}
